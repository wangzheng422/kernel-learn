'\" t
.\"     Title: perf-stat
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 09/30/2022
.\"    Manual: perf Manual
.\"    Source: perf
.\"  Language: English
.\"
.TH "PERF\-STAT" "1" "09/30/2022" "perf" "perf Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
perf-stat \- Run a command and gather performance counter statistics
.SH "SYNOPSIS"
.sp
.nf
\fIperf stat\fR [\-e <EVENT> | \-\-event=EVENT] [\-a] <command>
\fIperf stat\fR [\-e <EVENT> | \-\-event=EVENT] [\-a] \-\- <command> [<options>]
\fIperf stat\fR [\-e <EVENT> | \-\-event=EVENT] [\-a] record [\-o file] \-\- <command> [<options>]
\fIperf stat\fR report [\-i file]
.fi
.SH "DESCRIPTION"
.sp
This command runs a command and gathers performance counter statistics from it\&.
.SH "OPTIONS"
.PP
<command>\&...
.RS 4
Any command you can specify in a shell\&.
.RE
.PP
record
.RS 4
See STAT RECORD\&.
.RE
.PP
report
.RS 4
See STAT REPORT\&.
.RE
.PP
\-e, \-\-event=
.RS 4
Select the PMU event\&. Selection can be:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a symbolic event name (use
\fIperf list\fR
to list all events)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a raw PMU event in the form of rN where N is a hexadecimal value that represents the raw register encoding with the layout of the event control registers as described by entries in /sys/bus/event_sources/devices/cpu/format/*\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a symbolic or raw PMU event followed by an optional colon and a list of event modifiers, e\&.g\&., cpu\-cycles:p\&. See the
\fBperf-list\fR(1)
man page for details on event modifiers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a symbolically formed event like
\fIpmu/param1=0x3,param2/\fR
where param1 and param2 are defined as formats for the PMU in /sys/bus/event_source/devices/<pmu>/format/*
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqpercore\*(Aq is a event qualifier that sums up the event counts for both
hardware threads in a core\&. For example:
perf stat \-A \-a \-e cpu/event,percore=1/,otherevent \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
a symbolically formed event like
\fIpmu/config=M,config1=N,config2=K/\fR
where M, N, K are numbers (in decimal, hex, octal format)\&. Acceptable values for each of
\fIconfig\fR,
\fIconfig1\fR
and
\fIconfig2\fR
parameters are defined by corresponding entries in /sys/bus/event_source/devices/<pmu>/format/*
.sp
.if n \{\
.RS 4
.\}
.nf
Note that the last two syntaxes support prefix and glob matching in
the PMU name to simplify creation of events across multiple instances
of the same type of PMU in large systems (e\&.g\&. memory controller PMUs)\&.
Multiple PMU instances are typical for uncore PMUs, so the prefix
\*(Aquncore_\*(Aq is also ignored when performing this match\&.
.fi
.if n \{\
.RE
.\}
.RE
.RE
.PP
\-i, \-\-no\-inherit
.RS 4
child tasks do not inherit counters
.RE
.PP
\-p, \-\-pid=<pid>
.RS 4
stat events on existing process id (comma separated list)
.RE
.PP
\-t, \-\-tid=<tid>
.RS 4
stat events on existing thread id (comma separated list)
.RE
.PP
\-b, \-\-bpf\-prog
.RS 4
stat events on existing bpf program id (comma separated list), requiring root rights\&. bpftool\-prog could be used to find program id all bpf programs in the system\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
# bpftool prog | head \-n 1
17247: tracepoint  name sys_enter  tag 192d548b9d754067  gpl
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
# perf stat \-e cycles,instructions \-\-bpf\-prog 17247 \-\-timeout 1000
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Performance counter stats for \*(AqBPF program(s) 17247\*(Aq:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
85,967      cycles
28,982      instructions              #    0\&.34  insn per cycle
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
1\&.102235068 seconds time elapsed
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-bpf\-counters
.RS 4
Use BPF programs to aggregate readings from perf_events\&. This allows multiple perf\-stat sessions that are counting the same metric (cycles, instructions, etc\&.) to share hardware counters\&. To use BPF programs on common events by default, use "perf config stat\&.bpf\-counter\-events=<list_of_events>"\&.
.RE
.PP
\-\-bpf\-attr\-map
.RS 4
With option "\-\-bpf\-counters", different perf\-stat sessions share information about shared BPF programs and maps via a pinned hashmap\&. Use "\-\-bpf\-attr\-map" to specify the path of this pinned hashmap\&. The default path is /sys/fs/bpf/perf_attr_map\&.
.RE
.PP
\-a, \-\-all\-cpus
.RS 4
system\-wide collection from all CPUs (default if no target is specified)
.RE
.PP
\-\-no\-scale
.RS 4
Don\(cqt scale/normalize counter values
.RE
.PP
\-d, \-\-detailed
.RS 4
print more detailed statistics, can be specified up to 3 times
.sp
.if n \{\
.RS 4
.\}
.nf
      \-d:          detailed events, L1 and LLC data cache
   \-d \-d:     more detailed events, dTLB and iTLB events
\-d \-d \-d:     very detailed events, adding prefetch events
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-r, \-\-repeat=<n>
.RS 4
repeat command and print average + stddev (max: 100)\&. 0 means forever\&.
.RE
.PP
\-B, \-\-big\-num
.RS 4
print large numbers with thousands\*(Aq separators according to locale\&. Enabled by default\&. Use "\-\-no\-big\-num" to disable\&. Default setting can be changed with "perf config stat\&.big\-num=false"\&.
.RE
.PP
\-C, \-\-cpu=
.RS 4
Count only on the list of CPUs provided\&. Multiple CPUs can be provided as a comma\-separated list with no space: 0,1\&. Ranges of CPUs are specified with \-: 0\-2\&. In per\-thread mode, this option is ignored\&. The \-a option is still necessary to activate system\-wide monitoring\&. Default is to count on all CPUs\&.
.RE
.PP
\-A, \-\-no\-aggr
.RS 4
Do not aggregate counts across all monitored CPUs\&.
.RE
.PP
\-n, \-\-null
.RS 4
null run \- Don\(cqt start any counters\&.
.RE
.sp
This can be useful to measure just elapsed wall\-clock time \- or to assess the raw overhead of perf stat itself, without running any counters\&.
.PP
\-v, \-\-verbose
.RS 4
be more verbose (show counter open errors, etc)
.RE
.PP
\-x SEP, \-\-field\-separator SEP
.RS 4
print counts using a CSV\-style output to make it easy to import directly into spreadsheets\&. Columns are separated by the string specified in SEP\&.
.RE
.PP
\-\-table
.RS 4
Display time for each run (\-r option), in a table format, e\&.g\&.:
.sp
.if n \{\
.RS 4
.\}
.nf
$ perf stat \-\-null \-r 5 \-\-table perf bench sched pipe
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Performance counter stats for \*(Aqperf bench sched pipe\*(Aq (5 runs):
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
# Table of individual measurements:
5\&.189 (\-0\&.293) #
5\&.189 (\-0\&.294) #
5\&.186 (\-0\&.296) #
5\&.663 (+0\&.181) ##
6\&.186 (+0\&.703) ####
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
# Final result:
5\&.483 +\- 0\&.198 seconds time elapsed  ( +\-  3\&.62% )
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-G name, \-\-cgroup name
.RS 4
monitor only in the container (cgroup) called "name"\&. This option is available only in per\-cpu mode\&. The cgroup filesystem must be mounted\&. All threads belonging to container "name" are monitored when they run on the monitored CPUs\&. Multiple cgroups can be provided\&. Each cgroup is applied to the corresponding event, i\&.e\&., first cgroup to first event, second cgroup to second event and so on\&. It is possible to provide an empty cgroup (monitor all the time) using, e\&.g\&., \-G foo,,bar\&. Cgroups must have corresponding events, i\&.e\&., they always refer to events defined earlier on the command line\&. If the user wants to track multiple events for a specific cgroup, the user can use
\fI\-e e1 \-e e2 \-G foo,foo\fR
or just use
\fI\-e e1 \-e e2 \-G foo\fR\&.
.RE
.sp
If wanting to monitor, say, \fIcycles\fR for a cgroup and also for system wide, this command line can be used: \fIperf stat \-e cycles \-G cgroup_name \-a \-e cycles\fR\&.
.PP
\-\-for\-each\-cgroup name
.RS 4
Expand event list for each cgroup in "name" (allow multiple cgroups separated by comma)\&. It also support regex patterns to match multiple groups\&. This has same effect that repeating \-e option and \-G option for each event x name\&. This option cannot be used with \-G/\-\-cgroup option\&.
.RE
.PP
\-o file, \-\-output file
.RS 4
Print the output into the designated file\&.
.RE
.PP
\-\-append
.RS 4
Append to the output file designated with the \-o option\&. Ignored if \-o is not specified\&.
.RE
.PP
\-\-log\-fd
.RS 4
Log output to fd, instead of stderr\&. Complementary to \-\-output, and mutually exclusive with it\&. \-\-append may be used here\&. Examples: 3>results perf stat \-\-log\-fd 3 \-\- $cmd 3>>results perf stat \-\-log\-fd 3 \-\-append \-\- $cmd
.RE
.PP
\-\-control=fifo:ctl\-fifo[,ack\-fifo], \-\-control=fd:ctl\-fd[,ack\-fd]
.RS 4
ctl\-fifo / ack\-fifo are opened and used as ctl\-fd / ack\-fd as follows\&. Listen on ctl\-fd descriptor for command to control measurement (\fIenable\fR: enable events,
\fIdisable\fR: disable events)\&. Measurements can be started with events disabled using \-\-delay=\-1 option\&. Optionally send control command completion (\fIack\en\fR) to ack\-fd descriptor to synchronize with the controlling process\&. Example of bash shell script to enable and disable events during measurements:
.sp
.if n \{\
.RS 4
.\}
.nf
#!/bin/bash
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
ctl_dir=/tmp/
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
ctl_fifo=${ctl_dir}perf_ctl\&.fifo
test \-p ${ctl_fifo} && unlink ${ctl_fifo}
mkfifo ${ctl_fifo}
exec {ctl_fd}<>${ctl_fifo}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
ctl_ack_fifo=${ctl_dir}perf_ctl_ack\&.fifo
test \-p ${ctl_ack_fifo} && unlink ${ctl_ack_fifo}
mkfifo ${ctl_ack_fifo}
exec {ctl_fd_ack}<>${ctl_ack_fifo}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
perf stat \-D \-1 \-e cpu\-cycles \-a \-I 1000       \e
          \-\-control fd:${ctl_fd},${ctl_fd_ack} \e
          \e\-\- sleep 30 &
perf_pid=$!
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
sleep 5  && echo \*(Aqenable\*(Aq >&${ctl_fd} && read \-u ${ctl_fd_ack} e1 && echo "enabled(${e1})"
sleep 10 && echo \*(Aqdisable\*(Aq >&${ctl_fd} && read \-u ${ctl_fd_ack} d1 && echo "disabled(${d1})"
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
exec {ctl_fd_ack}>&\-
unlink ${ctl_ack_fifo}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
exec {ctl_fd}>&\-
unlink ${ctl_fifo}
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
wait \-n ${perf_pid}
exit $?
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-pre, \-\-post
.RS 4
Pre and post measurement hooks, e\&.g\&.:
.RE
.sp
perf stat \-\-repeat 10 \-\-null \-\-sync \-\-pre \fImake \-s O=defconfig\-build/clean\fR \-\- make \-s \-j64 O=defconfig\-build/ bzImage
.PP
\-I msecs, \-\-interval\-print msecs
.RS 4
Print count deltas every N milliseconds (minimum: 1ms) The overhead percentage could be high in some cases, for instance with small, sub 100ms intervals\&. Use with caution\&. example:
\fIperf stat \-I 1000 \-e cycles \-a sleep 5\fR
.RE
.sp
If the metric exists, it is calculated by the counts generated in this interval and the metric is printed after #\&.
.PP
\-\-interval\-count times
.RS 4
Print count deltas for fixed number of times\&. This option should be used together with "\-I" option\&. example:
\fIperf stat \-I 1000 \-\-interval\-count 2 \-e cycles \-a\fR
.RE
.PP
\-\-interval\-clear
.RS 4
Clear the screen before next interval\&.
.RE
.PP
\-\-timeout msecs
.RS 4
Stop the
\fIperf stat\fR
session and print count deltas after N milliseconds (minimum: 10 ms)\&. This option is not supported with the "\-I" option\&. example:
\fIperf stat \-\-time 2000 \-e cycles \-a\fR
.RE
.PP
\-\-metric\-only
.RS 4
Only print computed metrics\&. Print them in a single line\&. Don\(cqt show any raw values\&. Not supported with \-\-per\-thread\&.
.RE
.PP
\-\-per\-socket
.RS 4
Aggregate counts per processor socket for system\-wide mode measurements\&. This is a useful mode to detect imbalance between sockets\&. To enable this mode, use \-\-per\-socket in addition to \-a\&. (system\-wide)\&. The output includes the socket number and the number of online processors on that socket\&. This is useful to gauge the amount of aggregation\&.
.RE
.PP
\-\-per\-die
.RS 4
Aggregate counts per processor die for system\-wide mode measurements\&. This is a useful mode to detect imbalance between dies\&. To enable this mode, use \-\-per\-die in addition to \-a\&. (system\-wide)\&. The output includes the die number and the number of online processors on that die\&. This is useful to gauge the amount of aggregation\&.
.RE
.PP
\-\-per\-core
.RS 4
Aggregate counts per physical processor for system\-wide mode measurements\&. This is a useful mode to detect imbalance between physical cores\&. To enable this mode, use \-\-per\-core in addition to \-a\&. (system\-wide)\&. The output includes the core number and the number of online logical processors on that physical processor\&.
.RE
.PP
\-\-per\-thread
.RS 4
Aggregate counts per monitored threads, when monitoring threads (\-t option) or processes (\-p option)\&.
.RE
.PP
\-\-per\-node
.RS 4
Aggregate counts per NUMA nodes for system\-wide mode measurements\&. This is a useful mode to detect imbalance between NUMA nodes\&. To enable this mode, use \-\-per\-node in addition to \-a\&. (system\-wide)\&.
.RE
.PP
\-D msecs, \-\-delay msecs
.RS 4
After starting the program, wait msecs before measuring (\-1: start with events disabled)\&. This is useful to filter out the startup phase of the program, which is often very different\&.
.RE
.PP
\-T, \-\-transaction
.RS 4
Print statistics of transactional execution if supported\&.
.RE
.PP
\-\-metric\-no\-group
.RS 4
By default, events to compute a metric are placed in weak groups\&. The group tries to enforce scheduling all or none of the events\&. The \-\-metric\-no\-group option places events outside of groups and may increase the chance of the event being scheduled \- leading to more accuracy\&. However, as events may not be scheduled together accuracy for metrics like instructions per cycle can be lower \- as both metrics may no longer be being measured at the same time\&.
.RE
.PP
\-\-metric\-no\-merge
.RS 4
By default metric events in different weak groups can be shared if one group contains all the events needed by another\&. In such cases one group will be eliminated reducing event multiplexing and making it so that certain groups of metrics sum to 100%\&. A downside to sharing a group is that the group may require multiplexing and so accuracy for a small group that need not have multiplexing is lowered\&. This option forbids the event merging logic from sharing events between groups and may be used to increase accuracy in this case\&.
.RE
.PP
\-\-quiet
.RS 4
Don\(cqt print output\&. This is useful with perf stat record below to only write data to the perf\&.data file\&.
.RE
.SH "STAT RECORD"
.sp
Stores stat data into perf data file\&.
.PP
\-o file, \-\-output file
.RS 4
Output file name\&.
.RE
.SH "STAT REPORT"
.sp
Reads and reports stat data from perf data file\&.
.PP
\-i file, \-\-input file
.RS 4
Input file name\&.
.RE
.PP
\-\-per\-socket
.RS 4
Aggregate counts per processor socket for system\-wide mode measurements\&.
.RE
.PP
\-\-per\-die
.RS 4
Aggregate counts per processor die for system\-wide mode measurements\&.
.RE
.PP
\-\-per\-core
.RS 4
Aggregate counts per physical processor for system\-wide mode measurements\&.
.RE
.PP
\-M, \-\-metrics
.RS 4
Print metrics or metricgroups specified in a comma separated list\&. For a group all metrics from the group are added\&. The events from the metrics are automatically measured\&. See perf list output for the possible metrics and metricgroups\&.
.RE
.PP
\-A, \-\-no\-aggr
.RS 4
Do not aggregate counts across all monitored CPUs\&.
.RE
.PP
\-\-topdown
.RS 4
Print complete top\-down metrics supported by the CPU\&. This allows to determine bottle necks in the CPU pipeline for CPU bound workloads, by breaking the cycles consumed down into frontend bound, backend bound, bad speculation and retiring\&.
.RE
.sp
Frontend bound means that the CPU cannot fetch and decode instructions fast enough\&. Backend bound means that computation or memory access is the bottle neck\&. Bad Speculation means that the CPU wasted cycles due to branch mispredictions and similar issues\&. Retiring means that the CPU computed without an apparently bottleneck\&. The bottleneck is only the real bottleneck if the workload is actually bound by the CPU and not by something else\&.
.sp
For best results it is usually a good idea to use it with interval mode like \-I 1000, as the bottleneck of workloads can change often\&.
.sp
This enables \-\-metric\-only, unless overridden with \-\-no\-metric\-only\&.
.sp
The following restrictions only apply to older Intel CPUs and Atom, on newer CPUs (IceLake and later) TopDown can be collected for any thread:
.sp
The top down metrics are collected per core instead of per CPU thread\&. Per core mode is automatically enabled and \-a (global monitoring) is needed, requiring root rights or perf\&.perf_event_paranoid=\-1\&.
.sp
Topdown uses the full Performance Monitoring Unit, and needs disabling of the NMI watchdog (as root): echo 0 > /proc/sys/kernel/nmi_watchdog for best results\&. Otherwise the bottlenecks may be inconsistent on workload with changing phases\&.
.sp
To interpret the results it is usually needed to know on which CPUs the workload runs on\&. If needed the CPUs can be forced using taskset\&.
.PP
\-\-td\-level
.RS 4
Print the top\-down statistics that equal to or lower than the input level\&. It allows users to print the interested top\-down metrics level instead of the complete top\-down metrics\&.
.RE
.sp
The availability of the top\-down metrics level depends on the hardware\&. For example, Ice Lake only supports L1 top\-down metrics\&. The Sapphire Rapids supports both L1 and L2 top\-down metrics\&.
.sp
Default: 0 means the max level that the current hardware support\&. Error out if the input is higher than the supported max level\&.
.PP
\-\-no\-merge
.RS 4
Do not merge results from same PMUs\&.
.RE
.sp
When multiple events are created from a single event specification, stat will, by default, aggregate the event counts and show the result in a single row\&. This option disables that behavior and shows the individual events and counts\&.
.sp
Multiple events are created from a single event specification when: 1\&. Prefix or glob matching is used for the PMU name\&. 2\&. Aliases, which are listed immediately after the Kernel PMU events by perf list, are used\&.
.PP
\-\-smi\-cost
.RS 4
Measure SMI cost if msr/aperf/ and msr/smi/ events are supported\&.
.RE
.sp
During the measurement, the /sys/device/cpu/freeze_on_smi will be set to freeze core counters on SMI\&. The aperf counter will not be effected by the setting\&. The cost of SMI can be measured by (aperf \- unhalted core cycles)\&.
.sp
In practice, the percentages of SMI cycles is very useful for performance oriented analysis\&. \-\-metric_only will be applied by default\&. The output is SMI cycles%, equals to (aperf \- unhalted core cycles) / aperf
.sp
Users who wants to get the actual value can apply \-\-no\-metric\-only\&.
.PP
\-\-all\-kernel
.RS 4
Configure all used events to run in kernel space\&.
.RE
.PP
\-\-all\-user
.RS 4
Configure all used events to run in user space\&.
.RE
.PP
\-\-percore\-show\-thread
.RS 4
The event modifier "percore" has supported to sum up the event counts for all hardware threads in a core and show the counts per core\&.
.RE
.sp
This option with event modifier "percore" enabled also sums up the event counts for all hardware threads in a core but show the sum counts per hardware thread\&. This is essentially a replacement for the any bit and convenient for post processing\&.
.PP
\-\-summary
.RS 4
Print summary for interval mode (\-I)\&.
.RE
.PP
\-\-no\-csv\-summary
.RS 4
Don\(cqt print
\fIsummary\fR
at the first column for CVS summary output\&. This option must be used with \-x and \-\-summary\&.
.RE
.sp
This option can be enabled in perf config by setting the variable \fIstat\&.no\-csv\-summary\fR\&.
.sp
$ perf config stat\&.no\-csv\-summary=true
.PP
\-\-cputype
.RS 4
Only enable events on applying cpu with this type for hybrid platform (e\&.g\&. core or atom)"
.RE
.SH "EXAMPLES"
.sp
$ perf stat \-\- make
.sp
.if n \{\
.RS 4
.\}
.nf
Performance counter stats for \*(Aqmake\*(Aq:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
   83723\&.452481      task\-clock:u (msec)       #    1\&.004 CPUs utilized
              0      context\-switches:u        #    0\&.000 K/sec
              0      cpu\-migrations:u          #    0\&.000 K/sec
      3,228,188      page\-faults:u             #    0\&.039 M/sec
229,570,665,834      cycles:u                  #    2\&.742 GHz
313,163,853,778      instructions:u            #    1\&.36  insn per cycle
 69,704,684,856      branches:u                #  832\&.559 M/sec
  2,078,861,393      branch\-misses:u           #    2\&.98% of all branches
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
83\&.409183620 seconds time elapsed
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
74\&.684747000 seconds user
 8\&.739217000 seconds sys
.fi
.if n \{\
.RE
.\}
.SH "TIMINGS"
.sp
As displayed in the example above we can display 3 types of timings\&. We always display the time the counters were enabled/alive:
.sp
.if n \{\
.RS 4
.\}
.nf
83\&.409183620 seconds time elapsed
.fi
.if n \{\
.RE
.\}
.sp
For workload sessions we also display time the workloads spent in user/system lands:
.sp
.if n \{\
.RS 4
.\}
.nf
74\&.684747000 seconds user
 8\&.739217000 seconds sys
.fi
.if n \{\
.RE
.\}
.sp
Those times are the very same as displayed by the \fItime\fR tool\&.
.SH "CSV FORMAT"
.sp
With \-x, perf stat is able to output a not\-quite\-CSV format output Commas in the output are not put into ""\&. To make it easy to parse it is recommended to use a different character like \-x \e;
.sp
The fields are in this order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
optional usec time stamp in fractions of second (with \-I xxx)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
optional CPU, core, or socket identifier
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
optional number of logical CPUs aggregated
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
counter value
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
unit of the counter value or empty
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
event name
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
run time of counter
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
percentage of measurement time the counter was running
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
optional variance if multiple values are collected with \-r
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
optional metric value
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
optional unit of metric
.RE
.sp
Additional metrics may be printed with all earlier fields being empty\&.
.SH "INTEL HYBRID SUPPORT"
.sp
Support for Intel hybrid events within perf tools\&.
.sp
For some Intel platforms, such as AlderLake, which is hybrid platform and it consists of atom cpu and core cpu\&. Each cpu has dedicated event list\&. Part of events are available on core cpu, part of events are available on atom cpu and even part of events are available on both\&.
.sp
Kernel exports two new cpu pmus via sysfs: /sys/devices/cpu_core /sys/devices/cpu_atom
.sp
The \fIcpus\fR files are created under the directories\&. For example,
.sp
cat /sys/devices/cpu_core/cpus 0\-15
.sp
cat /sys/devices/cpu_atom/cpus 16\-23
.sp
It indicates cpu0\-cpu15 are core cpus and cpu16\-cpu23 are atom cpus\&.
.sp
Quickstart
.SH "LIST HYBRID EVENT"
.sp
As before, use perf\-list to list the symbolic event\&.
.sp
perf list
.sp
inst_retired\&.any [Fixed Counter: Counts the number of instructions retired\&. Unit: cpu_atom] inst_retired\&.any [Number of instructions retired\&. Fixed Counter \- architectural event\&. Unit: cpu_core]
.sp
The \fIUnit: xxx\fR is added to brief description to indicate which pmu the event is belong to\&. Same event name but with different pmu can be supported\&.
.SH "ENABLE HYBRID EVENT WITH A SPECIFIC PMU"
.sp
To enable a core only event or atom only event, following syntax is supported:
.sp
.if n \{\
.RS 4
.\}
.nf
        cpu_core/<event name>/
or
        cpu_atom/<event name>/
.fi
.if n \{\
.RE
.\}
.sp
For example, count the \fIcycles\fR event on core cpus\&.
.sp
.if n \{\
.RS 4
.\}
.nf
perf stat \-e cpu_core/cycles/
.fi
.if n \{\
.RE
.\}
.SH "CREATE TWO EVENTS FOR ONE HARDWARE EVENT AUTOMATICALLY"
.sp
When creating one event and the event is available on both atom and core, two events are created automatically\&. One is for atom, the other is for core\&. Most of hardware events and cache events are available on both cpu_core and cpu_atom\&.
.sp
For hardware events, they have pre\-defined configs (e\&.g\&. 0 for cycles)\&. But on hybrid platform, kernel needs to know where the event comes from (from atom or from core)\&. The original perf event type PERF_TYPE_HARDWARE can\(cqt carry pmu information\&. So now this type is extended to be PMU aware type\&. The PMU type ID is stored at attr\&.config[63:32]\&.
.sp
PMU type ID is retrieved from sysfs\&. /sys/devices/cpu_atom/type /sys/devices/cpu_core/type
.sp
The new attr\&.config layout for PERF_TYPE_HARDWARE:
.sp
PERF_TYPE_HARDWARE: 0xEEEEEEEE000000AA AA: hardware event ID EEEEEEEE: PMU type ID
.sp
Cache event is similar\&. The type PERF_TYPE_HW_CACHE is extended to be PMU aware type\&. The PMU type ID is stored at attr\&.config[63:32]\&.
.sp
The new attr\&.config layout for PERF_TYPE_HW_CACHE:
.sp
PERF_TYPE_HW_CACHE: 0xEEEEEEEE00DDCCBB BB: hardware cache ID CC: hardware cache op ID DD: hardware cache op result ID EEEEEEEE: PMU type ID
.sp
When enabling a hardware event without specified pmu, such as, perf stat \-e cycles \-a (use system\-wide in this example), two events are created automatically\&.
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
perf_event_attr:
  size                             120
  config                           0x400000000
  sample_type                      IDENTIFIER
  read_format                      TOTAL_TIME_ENABLED|TOTAL_TIME_RUNNING
  disabled                         1
  inherit                          1
  exclude_guest                    1
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
and
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
perf_event_attr:
  size                             120
  config                           0x800000000
  sample_type                      IDENTIFIER
  read_format                      TOTAL_TIME_ENABLED|TOTAL_TIME_RUNNING
  disabled                         1
  inherit                          1
  exclude_guest                    1
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.fi
.if n \{\
.RE
.\}
.sp
type 0 is PERF_TYPE_HARDWARE\&. 0x4 in 0x400000000 indicates it\(cqs cpu_core pmu\&. 0x8 in 0x800000000 indicates it\(cqs cpu_atom pmu (atom pmu type id is random)\&.
.sp
The kernel creates \fIcycles\fR (0x400000000) on cpu0\-cpu15 (core cpus), and create \fIcycles\fR (0x800000000) on cpu16\-cpu23 (atom cpus)\&.
.sp
For perf\-stat result, it displays two events:
.sp
.if n \{\
.RS 4
.\}
.nf
Performance counter stats for \*(Aqsystem wide\*(Aq:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
6,744,979      cpu_core/cycles/
1,965,552      cpu_atom/cycles/
.fi
.if n \{\
.RE
.\}
.sp
The first \fIcycles\fR is core event, the second \fIcycles\fR is atom event\&.
.SH "THREAD MODE EXAMPLE:"
.sp
perf\-stat reports the scaled counts for hybrid event and with a percentage displayed\&. The percentage is the event\(cqs running time/enabling time\&.
.sp
One example, \fItriad_loop\fR runs on cpu16 (atom core), while we can see the scaled value for core cycles is 160,444,092 and the percentage is 0\&.47%\&.
.sp
perf stat \-e cycles \-\- taskset \-c 16 \&./triad_loop
.sp
As previous, two events are created\&.
.sp
.if n \{\
.RS 4
.\}
.nf

\&.ft C
perf_event_attr:
  size                             120
  config                           0x400000000
  sample_type                      IDENTIFIER
  read_format                      TOTAL_TIME_ENABLED|TOTAL_TIME_RUNNING
  disabled                         1
  inherit                          1
  enable_on_exec                   1
  exclude_guest                    1
\&.ft

.fi
.if n \{\
.RE
.\}
.sp
and
.sp
.if n \{\
.RS 4
.\}
.nf

\&.ft C
perf_event_attr:
  size                             120
  config                           0x800000000
  sample_type                      IDENTIFIER
  read_format                      TOTAL_TIME_ENABLED|TOTAL_TIME_RUNNING
  disabled                         1
  inherit                          1
  enable_on_exec                   1
  exclude_guest                    1
\&.ft

.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Performance counter stats for \*(Aqtaskset \-c 16 \&./triad_loop\*(Aq:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
233,066,666      cpu_core/cycles/                                              (0\&.43%)
604,097,080      cpu_atom/cycles/                                              (99\&.57%)
.fi
.if n \{\
.RE
.\}
.SH "PERF\-RECORD:"
.sp
If there is no \fI\-e\fR specified in perf record, on hybrid platform, it creates two default \fIcycles\fR and adds them to event list\&. One is for core, the other is for atom\&.
.SH "PERF\-STAT:"
.sp
If there is no \fI\-e\fR specified in perf stat, on hybrid platform, besides of software events, following events are created and added to event list in order\&.
.sp
cpu_core/cycles/, cpu_atom/cycles/, cpu_core/instructions/, cpu_atom/instructions/, cpu_core/branches/, cpu_atom/branches/, cpu_core/branch\-misses/, cpu_atom/branch\-misses/
.sp
Of course, both perf\-stat and perf\-record support to enable hybrid event with a specific pmu\&.
.sp
e\&.g\&. perf stat \-e cpu_core/cycles/ perf stat \-e cpu_atom/cycles/ perf stat \-e cpu_core/r1a/ perf stat \-e cpu_atom/L1\-icache\-loads/ perf stat \-e cpu_core/cycles/,cpu_atom/instructions/ perf stat \-e \fI{cpu_core/cycles/,cpu_core/instructions/}\fR
.sp
But \fI{cpu_core/cycles/,cpu_atom/instructions/}\fR will return warning and disable grouping, because the pmus in group are not matched (cpu_core vs\&. cpu_atom)\&.
.SH "SEE ALSO"
.sp
\fBperf-top\fR(1), \fBperf-list\fR(1)
