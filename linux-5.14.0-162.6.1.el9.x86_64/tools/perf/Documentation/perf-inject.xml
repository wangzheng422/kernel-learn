<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refentryinfo><date></date></refentryinfo>
<refmeta>
<refentrytitle>perf-inject</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-inject</refname>
  <refpurpose>Filter to augment the events stream with additional information</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf inject &lt;options&gt;</emphasis></literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>perf-inject reads a perf-record event stream and repipes it to stdout.  At any
point the processing code can inject other events into the event stream - in
this case build-ids (-b option) are read and injected as needed into the event
stream.</simpara>
<simpara>Build-ids are just the first user of perf-inject - potentially anything that
needs userspace processing to augment the events stream with additional
information could make use of this facility.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-b
</term>
<term>
--build-ids
</term>
<listitem>
<simpara>
        Inject build-ids into the output stream
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>--buildid-all:
        Inject build-ids of all DSOs into the output stream</simpara>
<variablelist>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be more verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--input=
</term>
<listitem>
<simpara>
        Input file name. (default: stdin)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o
</term>
<term>
--output=
</term>
<listitem>
<simpara>
        Output file name. (default: stdout)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--sched-stat
</term>
<listitem>
<simpara>
        Merge sched_stat and sched_switch for getting events where and how long
        tasks slept. sched_switch contains a callchain where a task slept and
        sched_stat contains a timeslice how long a task slept.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k
</term>
<term>
--vmlinux=&lt;file&gt;
</term>
<listitem>
<simpara>
        vmlinux pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-vmlinux
</term>
<listitem>
<simpara>
        Ignore vmlinux files.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--kallsyms=&lt;file&gt;
</term>
<listitem>
<simpara>
        kallsyms pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--itrace
</term>
<listitem>
<simpara>
        Decode Instruction Tracing data, replacing it with synthesized events.
        Options are:
</simpara>
<literallayout class="monospaced">i       synthesize instructions events
b       synthesize branches events (branch misses for Arm SPE)
c       synthesize branches events (calls only)
r       synthesize branches events (returns only)
x       synthesize transactions events
w       synthesize ptwrite events
p       synthesize power events (incl. PSB events for Intel PT)
o       synthesize other events recorded due to the use
        of aux-output (refer to perf record)
e       synthesize error events
d       create a debug log
f       synthesize first level cache events
m       synthesize last level cache events
M       synthesize memory events
t       synthesize TLB events
a       synthesize remote access events
g       synthesize a call chain (use with i or x)
G       synthesize a call chain on existing event records
l       synthesize last branch entries (use with i or x)
L       synthesize last branch entries on existing event records
s       skip initial number of events
q       quicker (less detailed) decoding
A       approximate IPC
Z       prefer to ignore timestamps (so-called "timeless" decoding)</literallayout>
<literallayout class="monospaced">The default is all events i.e. the same as --itrace=ibxwpe,
except for perf script where it is --itrace=ce</literallayout>
<literallayout class="monospaced">In addition, the period (default 100000, except for perf script where it is 1)
for instructions events can be specified in units of:</literallayout>
<literallayout class="monospaced">i       instructions
t       ticks
ms      milliseconds
us      microseconds
ns      nanoseconds (default)</literallayout>
<literallayout class="monospaced">Also the call chain size (default 16, max. 1024) for instructions or
transactions events can be specified.</literallayout>
<literallayout class="monospaced">Also the number of last branch entries (default 64, max. 1024) for
instructions or transactions events can be specified.</literallayout>
<literallayout class="monospaced">Similar to options g and l, size may also be specified for options G and L.
On x86, note that G and L work poorly when data has been recorded with
large PEBS. Refer linkperf:perf-intel-pt[1] man page for details.</literallayout>
<literallayout class="monospaced">It is also possible to skip events generated (instructions, branches, transactions,
ptwrite, power) at the beginning. This is useful to ignore initialization code.</literallayout>
<literallayout class="monospaced">--itrace=i0nss1000000</literallayout>
<literallayout class="monospaced">skips the first million instructions.</literallayout>
<literallayout class="monospaced">The 'e' option may be followed by flags which affect what errors will or
will not be reported. Each flag must be preceded by either '+' or '-'.
The flags are:
        o       overflow
        l       trace data lost</literallayout>
<literallayout class="monospaced">If supported, the 'd' option may be followed by flags which affect what
debug messages will or will not be logged. Each flag must be preceded
by either '+' or '-'. The flags are:
        a       all perf events
        o       output to stdout</literallayout>
<literallayout class="monospaced">If supported, the 'q' option may be repeated to increase the effect.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--strip
</term>
<listitem>
<simpara>
        Use with --itrace to strip out non-synthesized events.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-j
</term>
<term>
--jit
</term>
<listitem>
<simpara>
        Process jitdump files by injecting the mmap records corresponding to jitted
        functions. This option also generates the ELF images for each jitted function
        found in the jitdumps files captured in the input perf.data file. Use this option
        if you are monitoring environment using JIT runtimes, such as Java, DART or V8.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        Don&#8217;t complain, do it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--vm-time-correlation[=OPTIONS]
</term>
<listitem>
<simpara>
        Some architectures may capture AUX area data which contains timestamps
        affected by virtualization. This option will update those timestamps
        in place, to correlate with host timestamps. The in-place update means
        that an output file is not specified, and instead the input file is
        modified.  The options are architecture specific, except that they may
        start with "dry-run" which will cause the file to be processed but
        without updating it. Currently this option is supported only by
        Intel PT, refer <citerefentry>
<refentrytitle>perf-intel-pt</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf-record</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-report</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-archive</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>,
<citerefentry>
<refentrytitle>perf-intel-pt</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
