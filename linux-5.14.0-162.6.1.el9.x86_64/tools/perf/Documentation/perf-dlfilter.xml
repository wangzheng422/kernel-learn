<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refentryinfo><date></date></refentryinfo>
<refmeta>
<refentrytitle>perf-dlfilter</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-dlfilter</refname>
  <refpurpose>Filter sample events using a dynamically loaded shared object file</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf script</emphasis> [--dlfilter file.so ] [ --dlarg arg ]&#8230;</literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>This option is used to process data through a custom filter provided by a
dynamically loaded shared object file. Arguments can be passed using --dlarg
and retrieved using perf_dlfilter_fns.args().</simpara>
<simpara>If <emphasis>file.so</emphasis> does not contain "/", then it will be found either in the current
directory, or perf tools exec path which is ~/libexec/perf-core/dlfilters for
a local build and install (refer perf --exec-path), or the dynamic linker
paths.</simpara>
</refsect1>
<refsect1 id="_api">
<title>API</title>
<simpara>The API for filtering consists of the following:</simpara>
<programlisting language="c" linenumbering="unnumbered">#include &lt;perf/perf_dlfilter.h&gt;

struct perf_dlfilter_fns perf_dlfilter_fns;

int start(void **data, void *ctx);
int stop(void *data, void *ctx);
int filter_event(void *data, const struct perf_dlfilter_sample *sample, void *ctx);
int filter_event_early(void *data, const struct perf_dlfilter_sample *sample, void *ctx);
const char *filter_description(const char **long_description);</programlisting>
<simpara>If implemented, <emphasis>start</emphasis> will be called at the beginning, before any
calls to <emphasis>filter_event</emphasis> or <emphasis>filter_event_early</emphasis>. Return 0 to indicate success,
or return a negative error code. <emphasis>*data</emphasis> can be assigned for use by other
functions. <emphasis>ctx</emphasis> is needed for calls to perf_dlfilter_fns, but most
perf_dlfilter_fns are not valid when called from <emphasis>start</emphasis>.</simpara>
<simpara>If implemented, <emphasis>stop</emphasis> will be called at the end, after any calls to
<emphasis>filter_event</emphasis> or <emphasis>filter_event_early</emphasis>. Return 0 to indicate success, or
return a negative error code. <emphasis>data</emphasis> is set by <emphasis>start</emphasis>. <emphasis>ctx</emphasis> is needed
for calls to perf_dlfilter_fns, but most perf_dlfilter_fns are not valid
when called from <emphasis>stop</emphasis>.</simpara>
<simpara>If implemented, <emphasis>filter_event</emphasis> will be called for each sample event.
Return 0 to keep the sample event, 1 to filter it out, or return a negative
error code. <emphasis>data</emphasis> is set by <emphasis>start</emphasis>. <emphasis>ctx</emphasis> is needed for calls to
<emphasis>perf_dlfilter_fns</emphasis>.</simpara>
<simpara><emphasis>filter_event_early</emphasis> is the same as <emphasis>filter_event</emphasis> except it is called before
internal filtering.</simpara>
<simpara>If implemented, <emphasis>filter_description</emphasis> should return a one-line description
of the filter, and optionally a longer description.</simpara>
<refsect2 id="_the_perf_dlfilter_sample_structure">
<title>The perf_dlfilter_sample structure</title>
<simpara><emphasis>filter_event</emphasis> and <emphasis>filter_event_early</emphasis> are passed a perf_dlfilter_sample
structure, which contains the following fields:</simpara>
<programlisting language="c" linenumbering="unnumbered">/*
 * perf sample event information (as per perf script and &lt;linux/perf_event.h&gt;)
 */
struct perf_dlfilter_sample {
        __u32 size; /* Size of this structure (for compatibility checking) */
        __u16 ins_lat;          /* Refer PERF_SAMPLE_WEIGHT_TYPE in &lt;linux/perf_event.h&gt; */
        __u16 p_stage_cyc;      /* Refer PERF_SAMPLE_WEIGHT_TYPE in &lt;linux/perf_event.h&gt; */
        __u64 ip;
        __s32 pid;
        __s32 tid;
        __u64 time;
        __u64 addr;
        __u64 id;
        __u64 stream_id;
        __u64 period;
        __u64 weight;           /* Refer PERF_SAMPLE_WEIGHT_TYPE in &lt;linux/perf_event.h&gt; */
        __u64 transaction;      /* Refer PERF_SAMPLE_TRANSACTION in &lt;linux/perf_event.h&gt; */
        __u64 insn_cnt; /* For instructions-per-cycle (IPC) */
        __u64 cyc_cnt;          /* For instructions-per-cycle (IPC) */
        __s32 cpu;
        __u32 flags;            /* Refer PERF_DLFILTER_FLAG_* above */
        __u64 data_src;         /* Refer PERF_SAMPLE_DATA_SRC in &lt;linux/perf_event.h&gt; */
        __u64 phys_addr;        /* Refer PERF_SAMPLE_PHYS_ADDR in &lt;linux/perf_event.h&gt; */
        __u64 data_page_size;   /* Refer PERF_SAMPLE_DATA_PAGE_SIZE in &lt;linux/perf_event.h&gt; */
        __u64 code_page_size;   /* Refer PERF_SAMPLE_CODE_PAGE_SIZE in &lt;linux/perf_event.h&gt; */
        __u64 cgroup;           /* Refer PERF_SAMPLE_CGROUP in &lt;linux/perf_event.h&gt; */
        __u8  cpumode;          /* Refer CPUMODE_MASK etc in &lt;linux/perf_event.h&gt; */
        __u8  addr_correlates_sym; /* True =&gt; resolve_addr() can be called */
        __u16 misc;             /* Refer perf_event_header in &lt;linux/perf_event.h&gt; */
        __u32 raw_size;         /* Refer PERF_SAMPLE_RAW in &lt;linux/perf_event.h&gt; */
        const void *raw_data;   /* Refer PERF_SAMPLE_RAW in &lt;linux/perf_event.h&gt; */
        __u64 brstack_nr;       /* Number of brstack entries */
        const struct perf_branch_entry *brstack; /* Refer &lt;linux/perf_event.h&gt; */
        __u64 raw_callchain_nr; /* Number of raw_callchain entries */
        const __u64 *raw_callchain; /* Refer &lt;linux/perf_event.h&gt; */
        const char *event;
};</programlisting>
</refsect2>
<refsect2 id="_the_perf_dlfilter_fns_structure">
<title>The perf_dlfilter_fns structure</title>
<simpara>The <emphasis>perf_dlfilter_fns</emphasis> structure is populated with function pointers when the
file is loaded. The functions can be called by <emphasis>filter_event</emphasis> or
<emphasis>filter_event_early</emphasis>.</simpara>
<programlisting language="c" linenumbering="unnumbered">struct perf_dlfilter_fns {
        const struct perf_dlfilter_al *(*resolve_ip)(void *ctx);
        const struct perf_dlfilter_al *(*resolve_addr)(void *ctx);
        char **(*args)(void *ctx, int *dlargc);
        __s32 (*resolve_address)(void *ctx, __u64 address, struct perf_dlfilter_al *al);
        const __u8 *(*insn)(void *ctx, __u32 *length);
        const char *(*srcline)(void *ctx, __u32 *line_number);
        struct perf_event_attr *(*attr)(void *ctx);
        __s32 (*object_code)(void *ctx, __u64 ip, void *buf, __u32 len);
        void *(*reserved[120])(void *);
};</programlisting>
<simpara><emphasis>resolve_ip</emphasis> returns information about ip.</simpara>
<simpara><emphasis>resolve_addr</emphasis> returns information about addr (if addr_correlates_sym).</simpara>
<simpara><emphasis>args</emphasis> returns arguments from --dlarg options.</simpara>
<simpara><emphasis>resolve_address</emphasis> provides information about <emphasis>address</emphasis>. al&#8594;size must be set
before calling. Returns 0 on success, -1 otherwise.</simpara>
<simpara><emphasis>insn</emphasis> returns instruction bytes and length.</simpara>
<simpara><emphasis>srcline</emphasis> return source file name and line number.</simpara>
<simpara><emphasis>attr</emphasis> returns perf_event_attr, refer &lt;linux/perf_event.h&gt;.</simpara>
<simpara><emphasis>object_code</emphasis> reads object code and returns the number of bytes read.</simpara>
</refsect2>
<refsect2 id="_the_perf_dlfilter_al_structure">
<title>The perf_dlfilter_al structure</title>
<simpara>The <emphasis>perf_dlfilter_al</emphasis> structure contains information about an address.</simpara>
<programlisting language="c" linenumbering="unnumbered">/*
 * Address location (as per perf script)
 */
struct perf_dlfilter_al {
        __u32 size; /* Size of this structure (for compatibility checking) */
        __u32 symoff;
        const char *sym;
        __u64 addr; /* Mapped address (from dso) */
        __u64 sym_start;
        __u64 sym_end;
        const char *dso;
        __u8  sym_binding; /* STB_LOCAL, STB_GLOBAL or STB_WEAK, refer &lt;elf.h&gt; */
        __u8  is_64_bit; /* Only valid if dso is not NULL */
        __u8  is_kernel_ip; /* True if in kernel space */
        __u32 buildid_size;
        __u8 *buildid;
        /* Below members are only populated by resolve_ip() */
        __u8 filtered; /* true if this sample event will be filtered out */
        const char *comm;
};</programlisting>
</refsect2>
<refsect2 id="_perf_dlfilter_sample_flags">
<title>perf_dlfilter_sample flags</title>
<simpara>The <emphasis>flags</emphasis> member of <emphasis>perf_dlfilter_sample</emphasis> corresponds with the flags field
of perf script. The bits of the flags are as follows:</simpara>
<programlisting language="c" linenumbering="unnumbered">/* Definitions for perf_dlfilter_sample flags */
enum {
        PERF_DLFILTER_FLAG_BRANCH       = 1ULL &lt;&lt; 0,
        PERF_DLFILTER_FLAG_CALL         = 1ULL &lt;&lt; 1,
        PERF_DLFILTER_FLAG_RETURN       = 1ULL &lt;&lt; 2,
        PERF_DLFILTER_FLAG_CONDITIONAL  = 1ULL &lt;&lt; 3,
        PERF_DLFILTER_FLAG_SYSCALLRET   = 1ULL &lt;&lt; 4,
        PERF_DLFILTER_FLAG_ASYNC        = 1ULL &lt;&lt; 5,
        PERF_DLFILTER_FLAG_INTERRUPT    = 1ULL &lt;&lt; 6,
        PERF_DLFILTER_FLAG_TX_ABORT     = 1ULL &lt;&lt; 7,
        PERF_DLFILTER_FLAG_TRACE_BEGIN  = 1ULL &lt;&lt; 8,
        PERF_DLFILTER_FLAG_TRACE_END    = 1ULL &lt;&lt; 9,
        PERF_DLFILTER_FLAG_IN_TX        = 1ULL &lt;&lt; 10,
        PERF_DLFILTER_FLAG_VMENTRY      = 1ULL &lt;&lt; 11,
        PERF_DLFILTER_FLAG_VMEXIT       = 1ULL &lt;&lt; 12,
};</programlisting>
</refsect2>
</refsect1>
<refsect1 id="_example">
<title>EXAMPLE</title>
<simpara>Filter out everything except branches from "foo" to "bar":</simpara>
<programlisting language="c" linenumbering="unnumbered">#include &lt;perf/perf_dlfilter.h&gt;
#include &lt;string.h&gt;

struct perf_dlfilter_fns perf_dlfilter_fns;

int filter_event(void *data, const struct perf_dlfilter_sample *sample, void *ctx)
{
        const struct perf_dlfilter_al *al;
        const struct perf_dlfilter_al *addr_al;

        if (!sample-&gt;ip || !sample-&gt;addr_correlates_sym)
                return 1;

        al = perf_dlfilter_fns.resolve_ip(ctx);
        if (!al || !al-&gt;sym || strcmp(al-&gt;sym, "foo"))
                return 1;

        addr_al = perf_dlfilter_fns.resolve_addr(ctx);
        if (!addr_al || !addr_al-&gt;sym || strcmp(addr_al-&gt;sym, "bar"))
                return 1;

        return 0;
}</programlisting>
<simpara>To build the shared object, assuming perf has been installed for the local user
i.e. perf_dlfilter.h is in ~/include/perf :</simpara>
<literallayout class="monospaced">gcc -c -I ~/include -fpic dlfilter-example.c
gcc -shared -o dlfilter-example.so dlfilter-example.o</literallayout>
<simpara>To use the filter with perf script:</simpara>
<literallayout class="monospaced">perf script --dlfilter dlfilter-example.so</literallayout>
</refsect1>
<refsect1 id="_notes">
<title>NOTES</title>
<simpara>The dlfilter .so file will be dependent on shared libraries. If those change,
it may be necessary to rebuild the .so. Also there may be unexpected results
if the .so uses different versions of the shared libraries that perf uses.
Versions can be checked using the ldd command.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf-script</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
