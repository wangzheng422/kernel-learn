<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refentryinfo><date></date></refentryinfo>
<refmeta>
<refentrytitle>perf-probe</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-probe</refname>
  <refpurpose>Define new dynamic tracepoints</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf probe</emphasis> [options] --add=<emphasis>PROBE</emphasis> [&#8230;]
or
<emphasis>perf probe</emphasis> [options] PROBE
or
<emphasis>perf probe</emphasis> [options] --del=<emphasis>[GROUP:]EVENT</emphasis> [&#8230;]
or
<emphasis>perf probe</emphasis> --list[=[GROUP:]EVENT]
or
<emphasis>perf probe</emphasis> [options] --line=<emphasis>LINE</emphasis>
or
<emphasis>perf probe</emphasis> [options] --vars=<emphasis>PROBEPOINT</emphasis>
or
<emphasis>perf probe</emphasis> [options] --funcs
or
<emphasis>perf probe</emphasis> [options] --definition=<emphasis>PROBE</emphasis> [&#8230;]</literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>This command defines dynamic tracepoint events, by symbol and registers
without debuginfo, or by C expressions (C line numbers, C function names,
and C local variables) with debuginfo.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-k
</term>
<term>
--vmlinux=PATH
</term>
<listitem>
<simpara>
        Specify vmlinux path which has debuginfo (Dwarf binary).
        Only when using this with --definition, you can give an offline
        vmlinux file.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m
</term>
<term>
--module=MODNAME|PATH
</term>
<listitem>
<simpara>
        Specify module name in which perf-probe searches probe points
        or lines. If a path of module file is passed, perf-probe
        treat it as an offline module (this means you can add a probe on
        a module which has not been loaded yet).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--source=PATH
</term>
<listitem>
<simpara>
        Specify path to kernel source.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be more verbose (show parsed arguments, etc).
        Can not use with -q.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-q
</term>
<term>
--quiet
</term>
<listitem>
<simpara>
        Be quiet (do not show any messages including errors).
        Can not use with -v.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-a
</term>
<term>
--add=
</term>
<listitem>
<simpara>
        Define a probe event (see PROBE SYNTAX for detail).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-d
</term>
<term>
--del=
</term>
<listitem>
<simpara>
        Delete probe events. This accepts glob wildcards(<emphasis>*</emphasis>, <emphasis>?</emphasis>) and character
        classes(e.g. [a-z], [!A-Z]).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-l
</term>
<term>
--list[=[GROUP:]EVENT]
</term>
<listitem>
<simpara>
        List up current probe events. This can also accept filtering patterns of
        event names.
        When this is used with --cache, perf shows all cached probes instead of
        the live probes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-L
</term>
<term>
--line=
</term>
<listitem>
<simpara>
        Show source code lines which can be probed. This needs an argument
        which specifies a range of the source code. (see LINE SYNTAX for detail)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-V
</term>
<term>
--vars=
</term>
<listitem>
<simpara>
        Show available local variables at given probe point. The argument
        syntax is same as PROBE SYNTAX, but NO ARGs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--externs
</term>
<listitem>
<simpara>
        (Only for --vars) Show external defined variables in addition to local
        variables.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--no-inlines
</term>
<listitem>
<simpara>
        (Only for --add) Search only for non-inlined functions. The functions
        which do not have instances are ignored.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F
</term>
<term>
--funcs[=FILTER]
</term>
<listitem>
<simpara>
        Show available functions in given module or kernel. With -x/--exec,
        can also list functions in a user space executable / shared library.
        This also can accept a FILTER rule argument.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-D
</term>
<term>
--definition=
</term>
<listitem>
<simpara>
        Show trace-event definition converted from given probe-event instead
        of write it into tracing/[k,u]probe_events.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--filter=FILTER
</term>
<listitem>
<simpara>
        (Only for --vars and --funcs) Set filter. FILTER is a combination of glob
        pattern, see FILTER PATTERN for detail.
        Default FILTER is "!<emphasis>k???tab_* &amp; !</emphasis>crc_*" for --vars, and "!_*"
        for --funcs.
        If several filters are specified, only the last filter is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        Forcibly add events with existing name.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--dry-run
</term>
<listitem>
<simpara>
        Dry run. With this option, --add and --del doesn&#8217;t execute actual
        adding and removal operations.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--cache
</term>
<listitem>
<simpara>
        (With --add) Cache the probes. Any events which successfully added
        are also stored in the cache file.
        (With --list) Show cached probes.
        (With --del) Remove cached probes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--max-probes=NUM
</term>
<listitem>
<simpara>
        Set the maximum number of probe points for an event. Default is 128.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>--target-ns=PID:
        Obtain mount namespace information from the target pid.  This is
        used when creating a uprobe for a process that resides in a
        different mount namespace from the perf(1) utility.</simpara>
<variablelist>
<varlistentry>
<term>
-x
</term>
<term>
--exec=PATH
</term>
<listitem>
<simpara>
        Specify path to the executable or shared library file for user
        space tracing. Can also be used with --funcs option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--demangle
</term>
<listitem>
<simpara>
        Demangle application symbols. --no-demangle is also available
        for disabling demangling.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--demangle-kernel
</term>
<listitem>
<simpara>
        Demangle kernel symbols. --no-demangle-kernel is also available
        for disabling kernel demangling.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>In absence of -m/-x options, perf probe checks if the first argument after
the options is an absolute path name. If its an absolute path, perf probe
uses it as a target module/target user space binary to probe.</simpara>
</refsect1>
<refsect1 id="_probe_syntax">
<title>PROBE SYNTAX</title>
<simpara>Probe points are defined by following syntax.</simpara>
<literallayout class="monospaced">1) Define event based on function name
 [[GROUP:]EVENT=]FUNC[@SRC][:RLN|+OFFS|%return|;PTN] [ARG ...]</literallayout>
<literallayout class="monospaced">2) Define event based on source file with line number
 [[GROUP:]EVENT=]SRC:ALN [ARG ...]</literallayout>
<literallayout class="monospaced">3) Define event based on source file with lazy pattern
 [[GROUP:]EVENT=]SRC;PTN [ARG ...]</literallayout>
<literallayout class="monospaced">4) Pre-defined SDT events or cached event with name
 %[sdt_PROVIDER:]SDTEVENT
 or,
 sdt_PROVIDER:SDTEVENT</literallayout>
<simpara><emphasis>EVENT</emphasis> specifies the name of new event, if omitted, it will be set the name of the probed function, and for return probes, a "__return" suffix is automatically added to the function name. You can also specify a group name by <emphasis>GROUP</emphasis>, if omitted, set <emphasis>probe</emphasis> is used for kprobe and <emphasis>probe_&lt;bin&gt;</emphasis> is used for uprobe.
Note that using existing group name can conflict with other events. Especially, using the group name reserved for kernel modules can hide embedded events in the
modules.
<emphasis>FUNC</emphasis> specifies a probed function name, and it may have one of the following options; <emphasis>+OFFS</emphasis> is the offset from function entry address in bytes, <emphasis>:RLN</emphasis> is the relative-line number from function entry line, and <emphasis>%return</emphasis> means that it probes function return. And <emphasis>;PTN</emphasis> means lazy matching pattern (see LAZY MATCHING). Note that <emphasis>;PTN</emphasis> must be the end of the probe point definition.  In addition, <emphasis>@SRC</emphasis> specifies a source file which has that function.
It is also possible to specify a probe point by the source line number or lazy matching by using <emphasis>SRC:ALN</emphasis> or <emphasis>SRC;PTN</emphasis> syntax, where <emphasis>SRC</emphasis> is the source file path, <emphasis>:ALN</emphasis> is the line number and <emphasis>;PTN</emphasis> is the lazy matching pattern.
<emphasis>ARG</emphasis> specifies the arguments of this probe point, (see PROBE ARGUMENT).
<emphasis>SDTEVENT</emphasis> and <emphasis>PROVIDER</emphasis> is the pre-defined event name which is defined by user SDT (Statically Defined Tracing) or the pre-cached probes with event name.
Note that before using the SDT event, the target binary (on which SDT events are defined) must be scanned by <citerefentry>
<refentrytitle>perf-buildid-cache</refentrytitle><manvolnum>1</manvolnum>
</citerefentry> to make SDT events as cached events.</simpara>
<simpara>For details of the SDT, see below.
<ulink url="https://sourceware.org/gdb/onlinedocs/gdb/Static-Probe-Points.html">https://sourceware.org/gdb/onlinedocs/gdb/Static-Probe-Points.html</ulink></simpara>
</refsect1>
<refsect1 id="_escaped_character">
<title>ESCAPED CHARACTER</title>
<simpara>In the probe syntax, <emphasis>=</emphasis>, <emphasis>@</emphasis>, <emphasis>+</emphasis>, <emphasis>:</emphasis> and <emphasis>;</emphasis> are treated as a special character. You can use a backslash (<emphasis>\</emphasis>) to escape the special characters.
This is useful if you need to probe on a specific versioned symbols, like @GLIBC_&#8230; suffixes, or also you need to specify a source file which includes the special characters.
Note that usually single backslash is consumed by shell, so you might need to pass double backslash (\\) or wrapping with single quotes ('AAA\@BBB').
See EXAMPLES how it is used.</simpara>
</refsect1>
<refsect1 id="_probe_argument">
<title>PROBE ARGUMENT</title>
<simpara>Each probe argument follows below syntax.</simpara>
<literallayout class="monospaced">[NAME=]LOCALVAR|$retval|%REG|@SYMBOL[:TYPE][@user]</literallayout>
<simpara><emphasis>NAME</emphasis> specifies the name of this argument (optional). You can use the name of local variable, local data structure member (e.g. var&#8594;field, var.field2), local array with fixed index (e.g. array[1], var&#8594;array[0], var&#8594;pointer[2]), or kprobe-tracer argument format (e.g. $retval, %ax, etc). Note that the name of this argument will be set as the last member name if you specify a local data structure member (e.g. field2 for <emphasis>var&#8594;field1.field2</emphasis>.)
<emphasis>$vars</emphasis> and <emphasis>$params</emphasis> special arguments are also available for NAME, <emphasis>$vars</emphasis> is expanded to the local variables (including function parameters) which can access at given probe point. <emphasis>$params</emphasis> is expanded to only the function parameters.
<emphasis>TYPE</emphasis> casts the type of this argument (optional). If omitted, perf probe automatically set the type based on debuginfo (*). Currently, basic types (u8/u16/u32/u64/s8/s16/s32/s64), hexadecimal integers (x/x8/x16/x32/x64), signedness casting (u/s), "string" and bitfield are supported. (see TYPES for detail)
On x86 systems %REG is always the short form of the register: for example %AX. %RAX or %EAX is not valid.
"@user" is a special attribute which means the LOCALVAR will be treated as a user-space memory. This is only valid for kprobe event.</simpara>
</refsect1>
<refsect1 id="_types">
<title>TYPES</title>
<simpara>Basic types (u8/u16/u32/u64/s8/s16/s32/s64) and hexadecimal integers (x8/x16/x32/x64) are integer types. Prefix <emphasis>s</emphasis> and <emphasis>u</emphasis> means those types are signed and unsigned respectively, and <emphasis>x</emphasis> means that is shown in hexadecimal format. Traced arguments are shown in decimal (sNN/uNN) or hex (xNN). You can also use <emphasis>s</emphasis> or <emphasis>u</emphasis> to specify only signedness and leave its size auto-detected by perf probe. Moreover, you can use <emphasis>x</emphasis> to explicitly specify to be shown in hexadecimal (the size is also auto-detected).
String type is a special type, which fetches a "null-terminated" string from kernel space. This means it will fail and store NULL if the string container has been paged out. You can specify <emphasis>string</emphasis> type only for the local variable or structure member which is an array of or a pointer to <emphasis>char</emphasis> or <emphasis>unsigned char</emphasis> type.
Bitfield is another special type, which takes 3 parameters, bit-width, bit-offset, and container-size (usually 32). The syntax is;</simpara>
<literallayout class="monospaced">b&lt;bit-width&gt;@&lt;bit-offset&gt;/&lt;container-size&gt;</literallayout>
</refsect1>
<refsect1 id="_line_syntax">
<title>LINE SYNTAX</title>
<simpara>Line range is described by following syntax.</simpara>
<literallayout class="monospaced">"FUNC[@SRC][:RLN[+NUM|-RLN2]]|SRC[:ALN[+NUM|-ALN2]]"</literallayout>
<simpara>FUNC specifies the function name of showing lines. <emphasis>RLN</emphasis> is the start line
number from function entry line, and <emphasis>RLN2</emphasis> is the end line number. As same as
probe syntax, <emphasis>SRC</emphasis> means the source file path, <emphasis>ALN</emphasis> is start line number,
and <emphasis>ALN2</emphasis> is end line number in the file. It is also possible to specify how
many lines to show by using <emphasis>NUM</emphasis>. Moreover, <emphasis>FUNC@SRC</emphasis> combination is good
for searching a specific function when several functions share same name.
So, "source.c:100-120" shows lines between 100th to l20th in source.c file. And "func:10+20" shows 20 lines from 10th line of func function.</simpara>
</refsect1>
<refsect1 id="_lazy_matching">
<title>LAZY MATCHING</title>
<simpara>The lazy line matching is similar to glob matching but ignoring spaces in both of pattern and target. So this accepts wildcards(<emphasis>*</emphasis>, <emphasis>?</emphasis>) and character classes(e.g. [a-z], [!A-Z]).</simpara>
<simpara>e.g.
 <emphasis>a=*</emphasis> can matches <emphasis>a=b</emphasis>, <emphasis>a = b</emphasis>, <emphasis>a == b</emphasis> and so on.</simpara>
<simpara>This provides some sort of flexibility and robustness to probe point definitions against minor code changes. For example, actual 10th line of schedule() can be moved easily by modifying schedule(), but the same line matching <emphasis>rq=cpu_rq*</emphasis> may still exist in the function.)</simpara>
</refsect1>
<refsect1 id="_filter_pattern">
<title>FILTER PATTERN</title>
<simpara>The filter pattern is a glob matching pattern(s) to filter variables.
In addition, you can use "!" for specifying filter-out rule. You also can give several rules combined with "&amp;" or "|", and fold those rules as one rule by using "(" ")".</simpara>
<simpara>e.g.
 With --filter "foo* | bar*", perf probe -V shows variables which start with "foo" or "bar".
 With --filter "!foo* &amp; *bar", perf probe -V shows variables which don&#8217;t start with "foo" and end with "bar", like "fizzbar". But "foobar" is filtered out.</simpara>
</refsect1>
<refsect1 id="_examples">
<title>EXAMPLES</title>
<simpara>Display which lines in schedule() can be probed:</simpara>
<literallayout class="monospaced">./perf probe --line schedule</literallayout>
<simpara>Add a probe on schedule() function 12th line with recording cpu local variable:</simpara>
<literallayout class="monospaced">./perf probe schedule:12 cpu
or
./perf probe --add='schedule:12 cpu'</literallayout>
<simpara>Add one or more probes which has the name start with "schedule".</simpara>
<literallayout class="monospaced">./perf probe schedule*
or
./perf probe --add='schedule*'</literallayout>
<simpara>Add probes on lines in schedule() function which calls update_rq_clock().</simpara>
<literallayout class="monospaced">./perf probe 'schedule;update_rq_clock*'
or
./perf probe --add='schedule;update_rq_clock*'</literallayout>
<simpara>Delete all probes on schedule().</simpara>
<literallayout class="monospaced">./perf probe --del='schedule*'</literallayout>
<simpara>Add probes at zfree() function on /bin/zsh</simpara>
<literallayout class="monospaced">./perf probe -x /bin/zsh zfree or ./perf probe /bin/zsh zfree</literallayout>
<simpara>Add probes at malloc() function on libc</simpara>
<literallayout class="monospaced">./perf probe -x /lib/libc.so.6 malloc or ./perf probe /lib/libc.so.6 malloc</literallayout>
<simpara>Add a uprobe to a target process running in a different mount namespace</simpara>
<literallayout class="monospaced">./perf probe --target-ns &lt;target pid&gt; -x /lib64/libc.so.6 malloc</literallayout>
<simpara>Add a USDT probe to a target process running in a different mount namespace</simpara>
<literallayout class="monospaced">./perf probe --target-ns &lt;target pid&gt; -x /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64/jre/lib/amd64/server/libjvm.so %sdt_hotspot:thread__sleep__end</literallayout>
<simpara>Add a probe on specific versioned symbol by backslash escape</simpara>
<literallayout class="monospaced">./perf probe -x /lib64/libc-2.25.so 'malloc_get_state\@GLIBC_2.2.5'</literallayout>
<simpara>Add a probe in a source file using special characters by backslash escape</simpara>
<literallayout class="monospaced">./perf probe -x /opt/test/a.out 'foo\+bar.c:4'</literallayout>
</refsect1>
<refsect1 id="_permissions_and_sysctl">
<title>PERMISSIONS AND SYSCTL</title>
<simpara>Since perf probe depends on ftrace (tracefs) and kallsyms (/proc/kallsyms), you have to care about the permission and some sysctl knobs.</simpara>
<itemizedlist>
<listitem>
<simpara>
Since tracefs and kallsyms requires root or privileged user to access it, the following perf probe commands also require it; --add, --del, --list (except for --cache option)
</simpara>
</listitem>
<listitem>
<simpara>
The system admin can remount the tracefs with 755 (<literal>sudo mount -o remount,mode=755 /sys/kernel/tracing/</literal>) to allow unprivileged user to run the perf probe --list command.
</simpara>
</listitem>
<listitem>
<simpara>
/proc/sys/kernel/kptr_restrict = 2 (restrict all users) also prevents perf probe to retrieve the important information from kallsyms. You also need to set to 1 (restrict non CAP_SYSLOG users) for the above commands. Since the user-space probe doesn&#8217;t need to access kallsyms, this is only for probing the kernel function (kprobes).
</simpara>
</listitem>
<listitem>
<simpara>
Since the perf probe commands read the vmlinux (for kernel) and/or the debuginfo file (including user-space application), you need to ensure that you can read those files.
</simpara>
</listitem>
</itemizedlist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf-trace</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-record</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-buildid-cache</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
