'\" t
.\"     Title: perf-script
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 09/30/2022
.\"    Manual: perf Manual
.\"    Source: perf
.\"  Language: English
.\"
.TH "PERF\-SCRIPT" "1" "09/30/2022" "perf" "perf Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
perf-script \- Read perf\&.data (created by perf record) and display trace output
.SH "SYNOPSIS"
.sp
.nf
\fIperf script\fR [<options>]
\fIperf script\fR [<options>] record <script> [<record\-options>] <command>
\fIperf script\fR [<options>] report <script> [script\-args]
\fIperf script\fR [<options>] <script> <required\-script\-args> [<record\-options>] <command>
\fIperf script\fR [<options>] <top\-script> [script\-args]
.fi
.SH "DESCRIPTION"
.sp
This command reads the input file and displays the trace recorded\&.
.sp
There are several variants of perf script:
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script\*(Aq to see a detailed trace of the workload that was
recorded\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
You can also run a set of pre\-canned scripts that aggregate and
summarize the raw trace data in various ways (the list of scripts is
available via \*(Aqperf script \-l\*(Aq)\&.  The following variants allow you to
record and run those scripts:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script record <script> <command>\*(Aq to record the events required
for \*(Aqperf script report\*(Aq\&.  <script> is the name displayed in the
output of \*(Aqperf script \-\-list\*(Aq i\&.e\&. the actual script name minus any
language extension\&.  If <command> is not specified, the events are
recorded using the \-a (system\-wide) \*(Aqperf record\*(Aq option\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script report <script> [args]\*(Aq to run and display the results
of <script>\&.  <script> is the name displayed in the output of \*(Aqperf
script \-\-list\*(Aq i\&.e\&. the actual script name minus any language
extension\&.  The perf\&.data output from a previous run of \*(Aqperf script
record <script>\*(Aq is used and should be present for this command to
succeed\&.  [args] refers to the (mainly optional) args expected by
the script\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script <script> <required\-script\-args> <command>\*(Aq to both
record the events required for <script> and to run the <script>
using \*(Aqlive\-mode\*(Aq i\&.e\&. without writing anything to disk\&.  <script>
is the name displayed in the output of \*(Aqperf script \-\-list\*(Aq i\&.e\&. the
actual script name minus any language extension\&.  If <command> is
not specified, the events are recorded using the \-a (system\-wide)
\*(Aqperf record\*(Aq option\&.  If <script> has any required args, they
should be specified before <command>\&.  This mode doesn\*(Aqt allow for
optional script args to be specified; if optional script args are
desired, they can be specified using separate \*(Aqperf script record\*(Aq
and \*(Aqperf script report\*(Aq commands, with the stdout of the record step
piped to the stdin of the report script, using the \*(Aq\-o \-\*(Aq and \*(Aq\-i \-\*(Aq
options of the corresponding commands\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\*(Aqperf script <top\-script>\*(Aq to both record the events required for
<top\-script> and to run the <top\-script> using \*(Aqlive\-mode\*(Aq
i\&.e\&. without writing anything to disk\&.  <top\-script> is the name
displayed in the output of \*(Aqperf script \-\-list\*(Aq i\&.e\&. the actual
script name minus any language extension; a <top\-script> is defined
as any script name ending with the string \*(Aqtop\*(Aq\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
[<record\-options>] can be passed to the record steps of \*(Aqperf script
record\*(Aq and \*(Aqlive\-mode\*(Aq variants; this isn\*(Aqt possible however for
<top\-script> \*(Aqlive\-mode\*(Aq or \*(Aqperf script report\*(Aq variants\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
See the \*(AqSEE ALSO\*(Aq section for links to language\-specific
information on how to write and run your own trace scripts\&.
.fi
.if n \{\
.RE
.\}
.SH "OPTIONS"
.PP
<command>\&...
.RS 4
Any command you can specify in a shell\&.
.RE
.PP
\-D, \-\-dump\-raw\-trace=
.RS 4
Display verbose dump of the trace data\&.
.RE
.PP
\-L, \-\-Latency=
.RS 4
Show latency attributes (irqs/preemption disabled, etc)\&.
.RE
.PP
\-l, \-\-list=
.RS 4
Display a list of available trace scripts\&.
.RE
.PP
\-s [\fIlang\fR], \-\-script=
.RS 4
Process trace data with the given script ([lang]:script[\&.ext])\&. If the string
\fIlang\fR
is specified in place of a script name, a list of supported languages will be displayed instead\&.
.RE
.PP
\-g, \-\-gen\-script=
.RS 4
Generate perf\-script\&.[ext] starter script for given language, using current perf\&.data\&.
.RE
.PP
\-\-dlfilter=<file>
.RS 4
Filter sample events using the given shared object file\&. Refer
\fBperf-dlfilter\fR(1)
.RE
.PP
\-\-dlarg=<arg>
.RS 4
Pass
\fIarg\fR
as an argument to the dlfilter\&. \-\-dlarg may be repeated to add more arguments\&.
.RE
.PP
\-\-list\-dlfilters
.RS 4
Display a list of available dlfilters\&. Use with option \-v (must come before option \-\-list\-dlfilters) to show long descriptions\&.
.RE
.PP
\-a
.RS 4
Force system\-wide collection\&. Scripts run without a <command> normally use \-a by default, while scripts run with a <command> normally don\(cqt \- this option allows the latter to be run in system\-wide mode\&.
.RE
.PP
\-i, \-\-input=
.RS 4
Input file name\&. (default: perf\&.data unless stdin is a fifo)
.RE
.PP
\-d, \-\-debug\-mode
.RS 4
Do various checks like samples ordering and lost events\&.
.RE
.PP
\-F, \-\-fields
.RS 4
Comma separated list of fields to print\&. Options are: comm, tid, pid, time, cpu, event, trace, ip, sym, dso, addr, symoff, srcline, period, iregs, uregs, brstack, brstacksym, flags, bpf\-output, brstackinsn, brstackoff, callindent, insn, insnlen, synth, phys_addr, metric, misc, srccode, ipc, data_page_size, code_page_size, ins_lat\&. Field list can be prepended with the type, trace, sw or hw, to indicate to which event type the field list applies\&. e\&.g\&., \-F sw:comm,tid,time,ip,sym and \-F trace:time,cpu,trace
.sp
.if n \{\
.RS 4
.\}
.nf
perf script \-F <fields>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
is equivalent to:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
perf script \-F trace:<fields> \-F sw:<fields> \-F hw:<fields>
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
i\&.e\&., the specified fields apply to all event types if the type string
is not given\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
In addition to overriding fields, it is also possible to add or remove
fields from the defaults\&. For example
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-F \-cpu,+insn
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
removes the cpu field and adds the insn field\&. Adding/removing fields
cannot be mixed with normal overriding\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The arguments are processed in the order received\&. A later usage can
reset a prior request\&. e\&.g\&.:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-F trace: \-F comm,tid,time,ip,sym
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The first \-F suppresses trace events (field list is ""), but then the
second invocation sets the fields to comm,tid,time,ip,sym\&. In this case a
warning is given to the user:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
"Overriding previous field request for all events\&."
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Alternatively, consider the order:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-F comm,tid,time,ip,sym \-F trace:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The first \-F sets the fields for all events and the second \-F
suppresses trace events\&. The user is given a warning message about
the override, and the result of the above is that only S/W and H/W
events are displayed with the given fields\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
It\*(Aqs possible tp add/remove fields only for specific event type:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-Fsw:\-cpu,\-period
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
removes cpu and period from software events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For the \*(Aqwildcard\*(Aq option if a user selected field is invalid for an
event type, a message is displayed to the user that the option is
ignored for that type\&. For example:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ perf script \-F comm,tid,trace
\*(Aqtrace\*(Aq not valid for hardware events\&. Ignoring\&.
\*(Aqtrace\*(Aq not valid for software events\&. Ignoring\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Alternatively, if the type is given an invalid field is specified it
is an error\&. For example:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
perf script \-v \-F sw:comm,tid,trace
\*(Aqtrace\*(Aq not valid for software events\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
At this point usage is displayed, and perf\-script exits\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The flags field is synthesized and may have a value when Instruction
Trace decoding\&. The flags are "bcrosyiABExgh" which stand for branch,
call, return, conditional, system, asynchronous, interrupt,
transaction abort, trace begin, trace end, in transaction, VM\-Entry, and VM\-Exit
respectively\&. Known combinations of flags are printed more nicely e\&.g\&.
"call" for "bc", "return" for "br", "jcc" for "bo", "jmp" for "b",
"int" for "bci", "iret" for "bri", "syscall" for "bcs", "sysret" for "brs",
"async" for "by", "hw int" for "bcyi", "tx abrt" for "bA", "tr strt" for "bB",
"tr end" for "bE", "vmentry" for "bcg", "vmexit" for "bch"\&.
However the "x" flag will be displayed separately in those
cases e\&.g\&. "jcc     (x)" for a condition branch within a transaction\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The callindent field is synthesized and may have a value when
Instruction Trace decoding\&. For calls and returns, it will display the
name of the symbol indented with spaces to reflect the stack depth\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When doing instruction trace decoding insn and insnlen give the
instruction bytes and the instruction length of the current
instruction\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The synth field is used by synthesized events which may be created when
Instruction Trace decoding\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The ipc (instructions per cycle) field is synthesized and may have a value when
Instruction Trace decoding\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Finally, a user may not set fields to none for all event types\&.
i\&.e\&., \-F "" is not allowed\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The brstack output includes branch related information with raw addresses using the
/v/v/v/v/cycles syntax in the following order:
FROM: branch source instruction
TO  : branch target instruction
M/P/\-: M=branch target mispredicted or branch direction was mispredicted, P=target predicted or direction predicted, \-=not supported
X/\- : X=branch inside a transactional region, \-=not in transaction region or not supported
A/\- : A=TSX abort entry, \-=not aborted region or not supported
cycles
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The brstacksym is identical to brstack, except that the FROM and TO addresses are printed in a symbolic form if possible\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
When brstackinsn is specified the full assembler sequences of branch sequences for each sample
is printed\&. This is the full execution path leading to the sample\&. This is only supported when the
sample was recorded with perf record \-b or \-j any\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The brstackoff field will print an offset into a specific dso/binary\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
With the metric option perf script can compute metrics for
sampling periods, similar to perf stat\&. This requires
specifying a group with multiple events defining metrics with the :S option
for perf record\&. perf will sample on the first event, and
print computed metrics for all the events in the group\&. Please note
that the metric computed is averaged over the whole sampling
period (since the last sample), not just for the sample point\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For sample events it\*(Aqs possible to display misc field with \-F +misc option,
following letters are displayed for each bit:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
PERF_RECORD_MISC_KERNEL               K
PERF_RECORD_MISC_USER                 U
PERF_RECORD_MISC_HYPERVISOR           H
PERF_RECORD_MISC_GUEST_KERNEL         G
PERF_RECORD_MISC_GUEST_USER           g
PERF_RECORD_MISC_MMAP_DATA*           M
PERF_RECORD_MISC_COMM_EXEC            E
PERF_RECORD_MISC_SWITCH_OUT           S
PERF_RECORD_MISC_SWITCH_OUT_PREEMPT   Sp
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
$ perf script \-F +misc \&.\&.\&.
 sched\-messaging  1414 K     28690\&.636582:       4590 cycles \&.\&.\&.
 sched\-messaging  1407 U     28690\&.636600:     325620 cycles \&.\&.\&.
 sched\-messaging  1414 K     28690\&.636608:      19473 cycles \&.\&.\&.
misc field ___________/
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-k, \-\-vmlinux=<file>
.RS 4
vmlinux pathname
.RE
.PP
\-\-kallsyms=<file>
.RS 4
kallsyms pathname
.RE
.PP
\-\-symfs=<directory>
.RS 4
Look for files with symbols relative to this directory\&.
.RE
.PP
\-G, \-\-hide\-call\-graph
.RS 4
When printing symbols do not display call chain\&.
.RE
.PP
\-\-stop\-bt
.RS 4
Stop display of callgraph at these symbols
.RE
.PP
\-C, \-\-cpu
.RS 4
Only report samples for the list of CPUs provided\&. Multiple CPUs can be provided as a comma\-separated list with no space: 0,1\&. Ranges of CPUs are specified with \-: 0\-2\&. Default is to report samples on all CPUs\&.
.RE
.PP
\-c, \-\-comms=
.RS 4
Only display events for these comms\&. CSV that understands
\m[blue]\fBfile://filename\fR\m[]
entries\&.
.RE
.PP
\-\-pid=
.RS 4
Only show events for given process ID (comma separated list)\&.
.RE
.PP
\-\-tid=
.RS 4
Only show events for given thread ID (comma separated list)\&.
.RE
.PP
\-I, \-\-show\-info
.RS 4
Display extended information about the perf\&.data file\&. This adds information which may be very large and thus may clutter the display\&. It currently includes: cpu and numa topology of the host system\&. It can only be used with the perf script report mode\&.
.RE
.PP
\-\-show\-kernel\-path
.RS 4
Try to resolve the path of [kernel\&.kallsyms]
.RE
.sp
\-\-show\-task\-events Display task related events (e\&.g\&. FORK, COMM, EXIT)\&.
.sp
\-\-show\-mmap\-events Display mmap related events (e\&.g\&. MMAP, MMAP2)\&.
.sp
\-\-show\-namespace\-events Display namespace events i\&.e\&. events of type PERF_RECORD_NAMESPACES\&.
.sp
\-\-show\-switch\-events Display context switch events i\&.e\&. events of type PERF_RECORD_SWITCH or PERF_RECORD_SWITCH_CPU_WIDE\&.
.sp
\-\-show\-lost\-events Display lost events i\&.e\&. events of type PERF_RECORD_LOST\&.
.sp
\-\-show\-round\-events Display finished round events i\&.e\&. events of type PERF_RECORD_FINISHED_ROUND\&.
.sp
\-\-show\-bpf\-events Display bpf events i\&.e\&. events of type PERF_RECORD_KSYMBOL and PERF_RECORD_BPF_EVENT\&.
.sp
\-\-show\-cgroup\-events Display cgroup events i\&.e\&. events of type PERF_RECORD_CGROUP\&.
.sp
\-\-show\-text\-poke\-events Display text poke events i\&.e\&. events of type PERF_RECORD_TEXT_POKE and PERF_RECORD_KSYMBOL\&.
.PP
\-\-demangle
.RS 4
Demangle symbol names to human readable form\&. It\(cqs enabled by default, disable with \-\-no\-demangle\&.
.RE
.PP
\-\-demangle\-kernel
.RS 4
Demangle kernel symbol names to human readable form (for C++ kernels)\&.
.RE
.sp
\-\-header Show perf\&.data header\&.
.sp
\-\-header\-only Show only perf\&.data header\&.
.PP
\-\-itrace
.RS 4
Options for decoding instruction tracing data\&. The options are:
.sp
.if n \{\
.RS 4
.\}
.nf
i       synthesize instructions events
b       synthesize branches events (branch misses for Arm SPE)
c       synthesize branches events (calls only)
r       synthesize branches events (returns only)
x       synthesize transactions events
w       synthesize ptwrite events
p       synthesize power events (incl\&. PSB events for Intel PT)
o       synthesize other events recorded due to the use
        of aux\-output (refer to perf record)
e       synthesize error events
d       create a debug log
f       synthesize first level cache events
m       synthesize last level cache events
M       synthesize memory events
t       synthesize TLB events
a       synthesize remote access events
g       synthesize a call chain (use with i or x)
G       synthesize a call chain on existing event records
l       synthesize last branch entries (use with i or x)
L       synthesize last branch entries on existing event records
s       skip initial number of events
q       quicker (less detailed) decoding
A       approximate IPC
Z       prefer to ignore timestamps (so\-called "timeless" decoding)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The default is all events i\&.e\&. the same as \-\-itrace=ibxwpe,
except for perf script where it is \-\-itrace=ce
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
In addition, the period (default 100000, except for perf script where it is 1)
for instructions events can be specified in units of:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
i       instructions
t       ticks
ms      milliseconds
us      microseconds
ns      nanoseconds (default)
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Also the call chain size (default 16, max\&. 1024) for instructions or
transactions events can be specified\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Also the number of last branch entries (default 64, max\&. 1024) for
instructions or transactions events can be specified\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Similar to options g and l, size may also be specified for options G and L\&.
On x86, note that G and L work poorly when data has been recorded with
large PEBS\&. Refer linkperf:perf\-intel\-pt[1] man page for details\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
It is also possible to skip events generated (instructions, branches, transactions,
ptwrite, power) at the beginning\&. This is useful to ignore initialization code\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
\-\-itrace=i0nss1000000
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
skips the first million instructions\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The \*(Aqe\*(Aq option may be followed by flags which affect what errors will or
will not be reported\&. Each flag must be preceded by either \*(Aq+\*(Aq or \*(Aq\-\*(Aq\&.
The flags are:
        o       overflow
        l       trace data lost
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If supported, the \*(Aqd\*(Aq option may be followed by flags which affect what
debug messages will or will not be logged\&. Each flag must be preceded
by either \*(Aq+\*(Aq or \*(Aq\-\*(Aq\&. The flags are:
        a       all perf events
        o       output to stdout
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
If supported, the \*(Aqq\*(Aq option may be repeated to increase the effect\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
To disable decoding entirely, use \-\-no\-itrace\&.
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-full\-source\-path
.RS 4
Show the full path for source files for srcline output\&.
.RE
.PP
\-\-max\-stack
.RS 4
Set the stack depth limit when parsing the callchain, anything beyond the specified depth will be ignored\&. This is a trade\-off between information loss and faster processing especially for workloads that can have a very long callchain stack\&. Note that when using the \-\-itrace option the synthesized callchain size will override this value if the synthesized callchain size is bigger\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Default: 127
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-ns
.RS 4
Use 9 decimal places when displaying time (i\&.e\&. show the nanoseconds)
.RE
.PP
\-f, \-\-force
.RS 4
Don\(cqt do ownership validation\&.
.RE
.PP
\-\-time
.RS 4
Only analyze samples within given time window: <start>,<stop>\&. Times have the format seconds\&.nanoseconds\&. If start is not given (i\&.e\&. time string is
\fI,x\&.y\fR) then analysis starts at the beginning of the file\&. If stop time is not given (i\&.e\&. time string is
\fIx\&.y,\fR) then analysis goes to end of file\&. Multiple ranges can be separated by spaces, which requires the argument to be quoted e\&.g\&. \-\-time "1234\&.567,1234\&.789 1235,"
.sp
.if n \{\
.RS 4
.\}
.nf
Also support time percent with multiple time ranges\&. Time string is
\*(Aqa%/n,b%/m,\&.\&.\&.\*(Aq or \*(Aqa%\-b%,c%\-%d,\&.\&.\&.\*(Aq\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For example:
Select the second 10% time slice:
perf script \-\-time 10%/2
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Select from 0% to 10% time slice:
perf script \-\-time 0%\-10%
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Select the first and second 10% time slices:
perf script \-\-time 10%/1,10%/2
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Select from 0% to 10% and 30% to 40% slices:
perf script \-\-time 0%\-10%,30%\-40%
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-max\-blocks
.RS 4
Set the maximum number of program blocks to print with brstackinsn for each sample\&.
.RE
.PP
\-\-reltime
.RS 4
Print time stamps relative to trace start\&.
.RE
.PP
\-\-deltatime
.RS 4
Print time stamps relative to previous event\&.
.RE
.PP
\-\-per\-event\-dump
.RS 4
Create per event files with a "perf\&.data\&.EVENT\&.dump" name instead of printing to stdout, useful, for instance, for generating flamegraphs\&.
.RE
.PP
\-\-inline
.RS 4
If a callgraph address belongs to an inlined function, the inline stack will be printed\&. Each entry has function name and file/line\&. Enabled by default, disable with \-\-no\-inline\&.
.RE
.PP
\-\-insn\-trace
.RS 4
Show instruction stream for intel_pt traces\&. Combine with \-\-xed to show disassembly\&.
.RE
.PP
\-\-xed
.RS 4
Run xed disassembler on output\&. Requires installing the xed disassembler\&.
.RE
.PP
\-S, \-\-symbols=symbol[,symbol\&...]
.RS 4
Only consider the listed symbols\&. Symbols are typically a name but they may also be hexadecimal address\&.
.sp
.if n \{\
.RS 4
.\}
.nf
The hexadecimal address may be the start address of a symbol or
any other address to filter the trace records
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
For example, to select the symbol noploop or the address 0x4007a0:
perf script \-\-symbols=noploop,0x4007a0
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
Support filtering trace records by symbol name, start address of
symbol, any hexadecimal address and address range\&.
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
The comparison order is:
.fi
.if n \{\
.RE
.\}
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
symbol name comparison
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
symbol start address comparison\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
any hexadecimal address comparison\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
address range comparison (see \-\-addr\-range)\&.
.RE
.RE
.PP
\-\-addr\-range
.RS 4
Use with \-S or \-\-symbols to list traced records within address range\&.
.sp
.if n \{\
.RS 4
.\}
.nf
For example, to list the traced records within the address range
[0x4007a0, 0x0x4007a9]:
perf script \-S 0x4007a0 \-\-addr\-range 10
.fi
.if n \{\
.RE
.\}
.RE
.PP
\-\-dsos=
.RS 4
Only consider symbols in these DSOs\&.
.RE
.PP
\-\-call\-trace
.RS 4
Show call stream for intel_pt traces\&. The CPUs are interleaved, but can be filtered with \-C\&.
.RE
.PP
\-\-call\-ret\-trace
.RS 4
Show call and return stream for intel_pt traces\&.
.RE
.PP
\-\-graph\-function
.RS 4
For itrace only show specified functions and their callees for itrace\&. Multiple functions can be separated by comma\&.
.RE
.PP
\-\-switch\-on EVENT_NAME
.RS 4
Only consider events after this event is found\&.
.RE
.PP
\-\-switch\-off EVENT_NAME
.RS 4
Stop considering events after this event is found\&.
.RE
.PP
\-\-show\-on\-off\-events
.RS 4
Show the \-\-switch\-on/off events too\&.
.RE
.PP
\-\-stitch\-lbr
.RS 4
Show callgraph with stitched LBRs, which may have more complete callgraph\&. The perf\&.data file must have been obtained using perf record \-\-call\-graph lbr\&. Disabled by default\&. In common cases with call stack overflows, it can recreate better call stacks than the default lbr call stack output\&. But this approach is not full proof\&. There can be cases where it creates incorrect call stacks from incorrect matches\&. The known limitations include exception handing such as setjmp/longjmp will have calls/returns not match\&.
.RE
.SH "SEE ALSO"
.sp
\fBperf-record\fR(1), \fBperf-script-perl\fR(1), \fBperf-script-python\fR(1), \fBperf-intel-pt\fR(1), \fBperf-dlfilter\fR(1)
