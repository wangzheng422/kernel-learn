/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __DEV_CGROUP_SKEL_H__
#define __DEV_CGROUP_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct dev_cgroup {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *bpf_prog1;
	} progs;
	struct {
		struct bpf_link *bpf_prog1;
	} links;
};

static void
dev_cgroup__destroy(struct dev_cgroup *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
dev_cgroup__create_skeleton(struct dev_cgroup *obj);

static inline struct dev_cgroup *
dev_cgroup__open_opts(const struct bpf_object_open_opts *opts)
{
	struct dev_cgroup *obj;
	int err;

	obj = (struct dev_cgroup *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = dev_cgroup__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	dev_cgroup__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct dev_cgroup *
dev_cgroup__open(void)
{
	return dev_cgroup__open_opts(NULL);
}

static inline int
dev_cgroup__load(struct dev_cgroup *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct dev_cgroup *
dev_cgroup__open_and_load(void)
{
	struct dev_cgroup *obj;
	int err;

	obj = dev_cgroup__open();
	if (!obj)
		return NULL;
	err = dev_cgroup__load(obj);
	if (err) {
		dev_cgroup__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
dev_cgroup__attach(struct dev_cgroup *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
dev_cgroup__detach(struct dev_cgroup *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *dev_cgroup__elf_bytes(size_t *sz);

static inline int
dev_cgroup__create_skeleton(struct dev_cgroup *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "dev_cgroup";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "bpf_prog1";
	s->progs[0].prog = &obj->progs.bpf_prog1;
	s->progs[0].link = &obj->links.bpf_prog1;

	s->data = (void *)dev_cgroup__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *dev_cgroup__elf_bytes(size_t *sz)
{
	*sz = 1832;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x68\x05\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x07\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x63\x67\
\x72\x6f\x75\x70\x2f\x64\x65\x76\0\x6c\x69\x63\x65\x6e\x73\x65\0\x64\x65\x76\
\x5f\x63\x67\x72\x6f\x75\x70\x2e\x63\0\x4c\x42\x42\x30\x5f\x37\0\x4c\x42\x42\
\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\x36\0\x62\x70\x66\x5f\x70\x72\x6f\x67\x31\0\
\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\
\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\0\0\0\x04\0\
\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x31\0\0\0\0\0\x03\0\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\
\0\0\x03\0\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3f\0\0\0\0\0\x03\0\x68\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\
\x50\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xb4\0\0\0\0\0\0\0\x61\
\x12\x04\0\0\0\0\0\x56\x02\x0b\0\x01\0\0\0\x61\x12\0\0\0\0\0\0\x54\x02\0\0\xff\
\xff\0\0\x56\x02\x08\0\x02\0\0\0\x61\x12\x08\0\0\0\0\0\xb4\0\0\0\x01\0\0\0\xb4\
\x01\0\0\x01\0\0\0\x16\x02\x01\0\x09\0\0\0\xb4\x01\0\0\0\0\0\0\x16\x02\x01\0\
\x05\0\0\0\xb4\0\0\0\0\0\0\0\x4c\x10\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\
\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xe8\0\0\0\xe8\0\0\0\xaa\x01\0\0\0\0\
\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x03\0\0\x04\x0c\0\0\0\x14\0\0\0\x03\0\0\0\0\
\0\0\0\x20\0\0\0\x03\0\0\0\x20\0\0\0\x26\0\0\0\x03\0\0\0\x40\0\0\0\x2c\0\0\0\0\
\0\0\x08\x04\0\0\0\x32\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\
\x06\0\0\0\x3f\0\0\0\x01\0\0\0\x43\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x47\0\
\0\0\x01\0\0\x0c\x05\0\0\0\x51\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\
\0\0\x03\0\0\0\0\x08\0\0\0\x0a\0\0\0\x04\0\0\0\x56\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\0\x6a\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\0\x97\x01\0\0\x01\0\0\x0f\x04\
\0\0\0\x0b\0\0\0\0\0\0\0\x04\0\0\0\0\x62\x70\x66\x5f\x63\x67\x72\x6f\x75\x70\
\x5f\x64\x65\x76\x5f\x63\x74\x78\0\x61\x63\x63\x65\x73\x73\x5f\x74\x79\x70\x65\
\0\x6d\x61\x6a\x6f\x72\0\x6d\x69\x6e\x6f\x72\0\x5f\x5f\x75\x33\x32\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\0\x62\x70\
\x66\x5f\x70\x72\x6f\x67\x31\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\
\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\
\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\
\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\
\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\
\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\
\x73\x2f\x64\x65\x76\x5f\x63\x67\x72\x6f\x75\x70\x2e\x63\0\x69\x6e\x74\x20\x62\
\x70\x66\x5f\x70\x72\x6f\x67\x31\x28\x73\x74\x72\x75\x63\x74\x20\x62\x70\x66\
\x5f\x63\x67\x72\x6f\x75\x70\x5f\x64\x65\x76\x5f\x63\x74\x78\x20\x2a\x63\x74\
\x78\x29\0\x09\x69\x66\x20\x28\x63\x74\x78\x2d\x3e\x6d\x61\x6a\x6f\x72\x20\x21\
\x3d\x20\x31\x20\x7c\x7c\x20\x74\x79\x70\x65\x20\x21\x3d\x20\x42\x50\x46\x5f\
\x44\x45\x56\x43\x47\x5f\x44\x45\x56\x5f\x43\x48\x41\x52\x29\0\x09\x73\x68\x6f\
\x72\x74\x20\x74\x79\x70\x65\x20\x3d\x20\x63\x74\x78\x2d\x3e\x61\x63\x63\x65\
\x73\x73\x5f\x74\x79\x70\x65\x20\x26\x20\x30\x78\x46\x46\x46\x46\x3b\0\x09\x73\
\x77\x69\x74\x63\x68\x20\x28\x63\x74\x78\x2d\x3e\x6d\x69\x6e\x6f\x72\x29\x20\
\x7b\0\x7d\0\x6c\x69\x63\x65\x6e\x73\x65\0\x63\x67\x72\x6f\x75\x70\x2f\x64\x65\
\x76\0\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x9c\0\0\
\0\xb0\0\0\0\0\0\0\0\x08\0\0\0\x9f\x01\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x10\0\0\
\0\x9f\x01\0\0\x09\0\0\0\0\0\0\0\x73\0\0\0\xf3\0\0\0\0\x34\0\0\x08\0\0\0\x73\0\
\0\0\x21\x01\0\0\x0b\xbc\0\0\x10\0\0\0\x73\0\0\0\x21\x01\0\0\x16\xbc\0\0\x18\0\
\0\0\x73\0\0\0\x55\x01\0\0\x14\x3c\0\0\x20\0\0\0\x73\0\0\0\0\0\0\0\0\0\0\0\x28\
\0\0\0\x73\0\0\0\x21\x01\0\0\x06\xbc\0\0\x30\0\0\0\x73\0\0\0\x7e\x01\0\0\x0f\
\xc8\0\0\x48\0\0\0\x73\0\0\0\x7e\x01\0\0\x02\xc8\0\0\x70\0\0\0\x73\0\0\0\x95\
\x01\0\0\x01\xe4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x67\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xe0\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x59\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x01\0\0\0\
\0\0\0\xaa\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x5e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x04\0\0\0\0\0\0\xd0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __DEV_CGROUP_SKEL_H__ */
