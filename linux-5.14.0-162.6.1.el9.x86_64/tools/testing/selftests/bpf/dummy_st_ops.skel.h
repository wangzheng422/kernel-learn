/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __DUMMY_ST_OPS_SKEL_H__
#define __DUMMY_ST_OPS_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct dummy_st_ops {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
		struct bpf_map *dummy_1;
	} maps;
	struct {
		struct bpf_program *test_1;
		struct bpf_program *test_2;
	} progs;
	struct {
		struct bpf_link *test_1;
		struct bpf_link *test_2;
	} links;
	struct dummy_st_ops__bss {
		__u64 test_2_args[5];
	} *bss;
};

static void
dummy_st_ops__destroy(struct dummy_st_ops *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
dummy_st_ops__create_skeleton(struct dummy_st_ops *obj);

static inline struct dummy_st_ops *
dummy_st_ops__open_opts(const struct bpf_object_open_opts *opts)
{
	struct dummy_st_ops *obj;
	int err;

	obj = (struct dummy_st_ops *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = dummy_st_ops__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	dummy_st_ops__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct dummy_st_ops *
dummy_st_ops__open(void)
{
	return dummy_st_ops__open_opts(NULL);
}

static inline int
dummy_st_ops__load(struct dummy_st_ops *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct dummy_st_ops *
dummy_st_ops__open_and_load(void)
{
	struct dummy_st_ops *obj;
	int err;

	obj = dummy_st_ops__open();
	if (!obj)
		return NULL;
	err = dummy_st_ops__load(obj);
	if (err) {
		dummy_st_ops__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
dummy_st_ops__attach(struct dummy_st_ops *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
dummy_st_ops__detach(struct dummy_st_ops *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *dummy_st_ops__elf_bytes(size_t *sz);

static inline int
dummy_st_ops__create_skeleton(struct dummy_st_ops *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "dummy_st_ops";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "dummy_st.bss";
	s->maps[0].map = &obj->maps.bss;
	s->maps[0].mmaped = (void **)&obj->bss;

	s->maps[1].name = "dummy_1";
	s->maps[1].map = &obj->maps.dummy_1;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "test_1";
	s->progs[0].prog = &obj->progs.test_1;
	s->progs[0].link = &obj->links.test_1;

	s->progs[1].name = "test_2";
	s->progs[1].prog = &obj->progs.test_2;
	s->progs[1].link = &obj->links.test_2;

	s->data = (void *)dummy_st_ops__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *dummy_st_ops__elf_bytes(size_t *sz)
{
	*sz = 3168;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x60\x09\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0c\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x73\x74\
\x72\x75\x63\x74\x5f\x6f\x70\x73\x2f\x74\x65\x73\x74\x5f\x31\0\x73\x74\x72\x75\
\x63\x74\x5f\x6f\x70\x73\x2f\x74\x65\x73\x74\x5f\x32\0\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x73\x74\x72\x75\x63\x74\x5f\x6f\x70\x73\0\x2e\x62\x73\x73\0\x64\x75\
\x6d\x6d\x79\x5f\x73\x74\x5f\x6f\x70\x73\x2e\x63\0\x4c\x42\x42\x30\x5f\x32\0\
\x74\x65\x73\x74\x5f\x31\0\x74\x65\x73\x74\x5f\x32\0\x74\x65\x73\x74\x5f\x32\
\x5f\x61\x72\x67\x73\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x64\x75\x6d\x6d\x79\
\x5f\x31\0\x2e\x72\x65\x6c\x73\x74\x72\x75\x63\x74\x5f\x6f\x70\x73\x2f\x74\x65\
\x73\x74\x5f\x32\0\x2e\x72\x65\x6c\x2e\x73\x74\x72\x75\x63\x74\x5f\x6f\x70\x73\
\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4e\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5d\0\0\0\0\0\
\x03\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x64\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\x6b\0\0\
\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\x72\0\0\0\x11\0\x07\0\0\0\0\0\
\0\0\0\0\x28\0\0\0\0\0\0\0\x7e\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\
\0\0\x87\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb4\0\0\0\xf5\xf4\
\xf3\xf2\x79\x11\0\0\0\0\0\0\x15\x01\x03\0\0\0\0\0\x61\x10\0\0\0\0\0\0\xb4\x02\
\0\0\x5a\0\0\0\x63\x21\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x12\x08\0\0\0\0\0\x79\
\x13\x18\0\0\0\0\0\x79\x14\x10\0\0\0\0\0\x79\x15\0\0\0\0\0\0\x79\x11\x20\0\0\0\
\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\x10\x20\0\0\0\0\0\x7b\x50\0\0\0\0\0\
\0\x57\x04\0\0\xff\xff\0\0\x7b\x40\x10\0\0\0\0\0\x67\x03\0\0\x38\0\0\0\xc7\x03\
\0\0\x38\0\0\0\x7b\x30\x18\0\0\0\0\0\x67\x02\0\0\x20\0\0\0\xc7\x02\0\0\x20\0\0\
\0\x7b\x20\x08\0\0\0\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\0\0\
\0\0\0\0\0\0\x02\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\x06\0\0\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\xf4\x01\0\0\xf4\x01\0\0\xab\x02\0\0\0\0\0\0\0\0\0\x02\
\x02\0\0\0\x01\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\
\0\x14\0\0\0\x01\0\0\0\x18\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x1c\0\0\0\x01\
\0\0\x0c\x03\0\0\0\x23\0\0\0\x01\0\0\x04\x04\0\0\0\x37\0\0\0\x04\0\0\0\0\0\0\0\
\x3b\0\0\0\x01\0\0\x0c\x03\0\0\0\x42\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\
\0\0\0\0\0\x03\0\0\0\0\x08\0\0\0\x0a\0\0\0\x04\0\0\0\x47\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\x5b\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\0\x64\0\0\0\x02\0\0\x04\
\x10\0\0\0\x1c\0\0\0\x0d\0\0\0\0\0\0\0\x3b\0\0\0\x10\0\0\0\x40\0\0\0\0\0\0\0\0\
\0\0\x02\x0e\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\
\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x02\x11\0\0\0\0\0\0\0\x05\0\0\x0d\x04\0\0\0\0\0\
\0\0\x0f\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x12\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\x13\0\0\0\x72\0\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\x81\0\0\0\0\0\0\x01\x08\0\0\
\0\x40\0\0\0\x8f\0\0\0\0\0\0\x0e\x0c\0\0\0\x01\0\0\0\x97\0\0\0\0\0\0\x08\x02\0\
\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x0a\0\0\0\x05\0\0\0\x9d\0\0\0\0\0\0\
\x0e\x16\0\0\0\x01\0\0\0\x6e\x02\0\0\x01\0\0\x0f\x04\0\0\0\x0b\0\0\0\0\0\0\0\
\x04\0\0\0\x76\x02\0\0\x01\0\0\x0f\x10\0\0\0\x14\0\0\0\0\0\0\0\x10\0\0\0\x82\
\x02\0\0\x01\0\0\x0f\x28\0\0\0\x17\0\0\0\0\0\0\0\x28\0\0\0\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x69\
\x6e\x74\0\x74\x65\x73\x74\x5f\x31\0\x62\x70\x66\x5f\x64\x75\x6d\x6d\x79\x5f\
\x6f\x70\x73\x5f\x73\x74\x61\x74\x65\0\x76\x61\x6c\0\x74\x65\x73\x74\x5f\x32\0\
\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\
\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x62\x70\x66\x5f\x64\x75\
\x6d\x6d\x79\x5f\x6f\x70\x73\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\
\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x64\x75\x6d\
\x6d\x79\x5f\x31\0\x5f\x5f\x75\x36\x34\0\x74\x65\x73\x74\x5f\x32\x5f\x61\x72\
\x67\x73\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\
\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\
\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\
\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\
\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\
\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\
\x67\x73\x2f\x64\x75\x6d\x6d\x79\x5f\x73\x74\x5f\x6f\x70\x73\x2e\x63\0\x69\x6e\
\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x74\x65\x73\x74\x5f\x31\x2c\x20\
\x73\x74\x72\x75\x63\x74\x20\x62\x70\x66\x5f\x64\x75\x6d\x6d\x79\x5f\x6f\x70\
\x73\x5f\x73\x74\x61\x74\x65\x20\x2a\x73\x74\x61\x74\x65\x29\0\x09\x69\x66\x20\
\x28\x21\x73\x74\x61\x74\x65\x29\0\x09\x72\x65\x74\x20\x3d\x20\x73\x74\x61\x74\
\x65\x2d\x3e\x76\x61\x6c\x3b\0\x09\x73\x74\x61\x74\x65\x2d\x3e\x76\x61\x6c\x20\
\x3d\x20\x30\x78\x35\x61\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\
\x28\x74\x65\x73\x74\x5f\x32\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x62\x70\x66\
\x5f\x64\x75\x6d\x6d\x79\x5f\x6f\x70\x73\x5f\x73\x74\x61\x74\x65\x20\x2a\x73\
\x74\x61\x74\x65\x2c\x20\x69\x6e\x74\x20\x61\x31\x2c\x20\x75\x6e\x73\x69\x67\
\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\x20\x61\x32\x2c\0\x09\x74\x65\x73\x74\x5f\
\x32\x5f\x61\x72\x67\x73\x5b\x30\x5d\x20\x3d\x20\x28\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x6c\x6f\x6e\x67\x29\x73\x74\x61\x74\x65\x3b\0\x09\x74\x65\x73\x74\
\x5f\x32\x5f\x61\x72\x67\x73\x5b\x34\x5d\x20\x3d\x20\x61\x34\x3b\0\x09\x74\x65\
\x73\x74\x5f\x32\x5f\x61\x72\x67\x73\x5b\x32\x5d\x20\x3d\x20\x61\x32\x3b\0\x09\
\x74\x65\x73\x74\x5f\x32\x5f\x61\x72\x67\x73\x5b\x33\x5d\x20\x3d\x20\x61\x33\
\x3b\0\x09\x74\x65\x73\x74\x5f\x32\x5f\x61\x72\x67\x73\x5b\x31\x5d\x20\x3d\x20\
\x61\x31\x3b\0\x30\x3a\x30\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x75\
\x63\x74\x5f\x6f\x70\x73\0\x2e\x62\x73\x73\0\x73\x74\x72\x75\x63\x74\x5f\x6f\
\x70\x73\x2f\x74\x65\x73\x74\x5f\x31\0\x73\x74\x72\x75\x63\x74\x5f\x6f\x70\x73\
\x2f\x74\x65\x73\x74\x5f\x32\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\
\0\0\0\x24\x01\0\0\x48\x01\0\0\x2c\0\0\0\x08\0\0\0\x87\x02\0\0\x01\0\0\0\0\0\0\
\0\x05\0\0\0\x99\x02\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\x10\0\0\0\x87\x02\0\0\x06\
\0\0\0\0\0\0\0\xa9\0\0\0\x2b\x01\0\0\0\x50\0\0\x08\0\0\0\xa9\0\0\0\x2b\x01\0\0\
\x05\x50\0\0\x10\0\0\0\xa9\0\0\0\x63\x01\0\0\x06\x60\0\0\x18\0\0\0\xa9\0\0\0\
\x70\x01\0\0\x0f\x6c\0\0\x28\0\0\0\xa9\0\0\0\x83\x01\0\0\x0d\x70\0\0\x30\0\0\0\
\xa9\0\0\0\x2b\x01\0\0\x05\x50\0\0\x99\x02\0\0\x0b\0\0\0\0\0\0\0\xa9\0\0\0\x97\
\x01\0\0\x05\x8c\0\0\x28\0\0\0\xa9\0\0\0\xea\x01\0\0\x11\x98\0\0\x38\0\0\0\xa9\
\0\0\0\x12\x02\0\0\x11\xa8\0\0\x40\0\0\0\xa9\0\0\0\xea\x01\0\0\x11\x98\0\0\x48\
\0\0\0\xa9\0\0\0\x97\x01\0\0\x05\x8c\0\0\x50\0\0\0\xa9\0\0\0\x28\x02\0\0\x11\
\xa0\0\0\x58\0\0\0\xa9\0\0\0\x3e\x02\0\0\x13\xa4\0\0\x68\0\0\0\xa9\0\0\0\x3e\
\x02\0\0\x11\xa4\0\0\x70\0\0\0\xa9\0\0\0\x54\x02\0\0\x13\x9c\0\0\x80\0\0\0\xa9\
\0\0\0\x54\x02\0\0\x11\x9c\0\0\x88\0\0\0\xa9\0\0\0\x97\x01\0\0\x05\x8c\0\0\x10\
\0\0\0\x87\x02\0\0\x02\0\0\0\x18\0\0\0\x06\0\0\0\x6a\x02\0\0\0\0\0\0\x28\0\0\0\
\x06\0\0\0\x6a\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\
\0\0\xc3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\
\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\xf0\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x01\0\0\0\0\0\0\x38\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\0\0\0\x01\0\0\0\x06\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x30\x02\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x35\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xc8\x02\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x3d\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\
\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x49\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x02\0\0\0\0\0\
\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8f\0\0\
\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x02\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xa5\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x02\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\
\x02\0\0\0\x06\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb5\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x03\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xba\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xc8\x07\0\0\0\0\0\0\x94\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __DUMMY_ST_OPS_SKEL_H__ */
