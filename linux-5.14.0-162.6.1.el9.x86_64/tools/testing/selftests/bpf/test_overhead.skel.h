/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_OVERHEAD_SKEL_H__
#define __TEST_OVERHEAD_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_overhead {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *prog1;
		struct bpf_program *prog2;
		struct bpf_program *prog3;
		struct bpf_program *prog4;
		struct bpf_program *prog5;
	} progs;
	struct {
		struct bpf_link *prog1;
		struct bpf_link *prog2;
		struct bpf_link *prog3;
		struct bpf_link *prog4;
		struct bpf_link *prog5;
	} links;
};

static void
test_overhead__destroy(struct test_overhead *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_overhead__create_skeleton(struct test_overhead *obj);

static inline struct test_overhead *
test_overhead__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_overhead *obj;
	int err;

	obj = (struct test_overhead *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_overhead__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_overhead__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_overhead *
test_overhead__open(void)
{
	return test_overhead__open_opts(NULL);
}

static inline int
test_overhead__load(struct test_overhead *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_overhead *
test_overhead__open_and_load(void)
{
	struct test_overhead *obj;
	int err;

	obj = test_overhead__open();
	if (!obj)
		return NULL;
	err = test_overhead__load(obj);
	if (err) {
		test_overhead__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_overhead__attach(struct test_overhead *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_overhead__detach(struct test_overhead *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_overhead__elf_bytes(size_t *sz);

static inline int
test_overhead__create_skeleton(struct test_overhead *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "test_overhead";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 5;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "prog1";
	s->progs[0].prog = &obj->progs.prog1;
	s->progs[0].link = &obj->links.prog1;

	s->progs[1].name = "prog2";
	s->progs[1].prog = &obj->progs.prog2;
	s->progs[1].link = &obj->links.prog2;

	s->progs[2].name = "prog3";
	s->progs[2].prog = &obj->progs.prog3;
	s->progs[2].link = &obj->links.prog3;

	s->progs[3].name = "prog4";
	s->progs[3].prog = &obj->progs.prog4;
	s->progs[3].link = &obj->links.prog4;

	s->progs[4].name = "prog5";
	s->progs[4].prog = &obj->progs.prog5;
	s->progs[4].link = &obj->links.prog5;

	s->data = (void *)test_overhead__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *test_overhead__elf_bytes(size_t *sz)
{
	*sz = 3224;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xd8\x09\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x5f\x5f\x73\x65\x74\x5f\x74\x61\x73\x6b\x5f\x63\x6f\x6d\
\x6d\0\x6b\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x5f\x5f\x73\x65\x74\x5f\x74\x61\
\x73\x6b\x5f\x63\x6f\x6d\x6d\0\x72\x61\x77\x5f\x74\x70\x2f\x74\x61\x73\x6b\x5f\
\x72\x65\x6e\x61\x6d\x65\0\x66\x65\x6e\x74\x72\x79\x2f\x5f\x5f\x73\x65\x74\x5f\
\x74\x61\x73\x6b\x5f\x63\x6f\x6d\x6d\0\x66\x65\x78\x69\x74\x2f\x5f\x5f\x73\x65\
\x74\x5f\x74\x61\x73\x6b\x5f\x63\x6f\x6d\x6d\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\x74\x65\x73\x74\x5f\x6f\x76\x65\x72\x68\x65\x61\x64\x2e\x63\0\x4c\x42\x42\x30\
\x5f\x32\0\x4c\x42\x42\x32\x5f\x32\0\x70\x72\x6f\x67\x31\0\x70\x72\x6f\x67\x32\
\0\x70\x72\x6f\x67\x33\0\x70\x72\x6f\x67\x34\0\x70\x72\x6f\x67\x35\0\x5f\x6c\
\x69\x63\x65\x6e\x73\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8a\0\0\0\x04\0\xf1\xff\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x9a\0\0\0\0\0\x03\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xa1\0\0\0\0\0\x05\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x07\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xa8\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\xae\0\0\0\
\x12\0\x04\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb4\0\0\0\x12\0\x05\0\0\0\0\0\0\
\0\0\0\x28\0\0\0\0\0\0\0\xba\0\0\0\x12\0\x06\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\xc0\0\0\0\x12\0\x07\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xc6\0\0\0\x11\0\x08\
\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x79\x11\x70\0\0\0\0\0\xb4\0\0\0\x01\0\0\0\
\x15\x01\x01\0\0\0\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x10\x50\0\0\0\0\
\0\x95\0\0\0\0\0\0\0\x79\x11\0\0\0\0\0\0\xb4\0\0\0\x01\0\0\0\x15\x01\x01\0\0\0\
\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\
\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\x9f\xeb\x01\0\x18\0\
\0\0\0\0\0\0\x70\x02\0\0\x70\x02\0\0\x0d\x03\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\
\x01\0\0\0\x15\0\0\x04\xa8\0\0\0\x09\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\
\0\x40\0\0\0\x11\0\0\0\x03\0\0\0\x80\0\0\0\x15\0\0\0\x03\0\0\0\xc0\0\0\0\x19\0\
\0\0\x03\0\0\0\0\x01\0\0\x1d\0\0\0\x03\0\0\0\x40\x01\0\0\x21\0\0\0\x03\0\0\0\
\x80\x01\0\0\x25\0\0\0\x03\0\0\0\xc0\x01\0\0\x29\0\0\0\x03\0\0\0\0\x02\0\0\x2c\
\0\0\0\x03\0\0\0\x40\x02\0\0\x2f\0\0\0\x03\0\0\0\x80\x02\0\0\x33\0\0\0\x03\0\0\
\0\xc0\x02\0\0\x37\0\0\0\x03\0\0\0\0\x03\0\0\x3b\0\0\0\x03\0\0\0\x40\x03\0\0\
\x3f\0\0\0\x03\0\0\0\x80\x03\0\0\x43\0\0\0\x03\0\0\0\xc0\x03\0\0\x4c\0\0\0\x03\
\0\0\0\0\x04\0\0\x50\0\0\0\x03\0\0\0\x40\x04\0\0\x53\0\0\0\x03\0\0\0\x80\x04\0\
\0\x5a\0\0\0\x03\0\0\0\xc0\x04\0\0\x5e\0\0\0\x03\0\0\0\0\x05\0\0\x61\0\0\0\0\0\
\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x05\0\0\0\x6f\0\0\0\x01\0\0\0\
\x73\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x77\0\0\0\x01\0\0\x0c\x04\0\0\0\x7d\
\0\0\0\x01\0\0\x0c\x04\0\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x83\0\0\0\x01\0\0\x04\
\0\0\0\0\x9b\0\0\0\x0c\0\0\0\0\0\0\0\xa0\0\0\0\0\0\0\x08\x0b\0\0\0\xa6\0\0\0\0\
\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0a\0\0\0\x0d\0\0\0\0\0\
\0\0\xb9\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x05\0\0\0\x6f\
\0\0\0\x08\0\0\0\xcd\0\0\0\x01\0\0\x0c\x0e\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\0\0\
\0\0\0\x01\0\0\x0d\x05\0\0\0\x6f\0\0\0\x10\0\0\0\xd3\0\0\0\x01\0\0\x0c\x11\0\0\
\0\xd9\0\0\0\x01\0\0\x0c\x11\0\0\0\xdf\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\
\0\0\0\0\0\0\x03\0\0\0\0\x14\0\0\0\x0d\0\0\0\x04\0\0\0\xe4\0\0\0\0\0\0\x0e\x15\
\0\0\0\x01\0\0\0\x94\x02\0\0\x01\0\0\x0f\x04\0\0\0\x16\0\0\0\0\0\0\0\x04\0\0\0\
\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\x33\0\x72\
\x31\x32\0\x72\x62\x70\0\x72\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\
\x72\x38\0\x72\x61\x78\0\x72\x63\x78\0\x72\x64\x78\0\x72\x73\x69\0\x72\x64\x69\
\0\x6f\x72\x69\x67\x5f\x72\x61\x78\0\x72\x69\x70\0\x63\x73\0\x65\x66\x6c\x61\
\x67\x73\0\x72\x73\x70\0\x73\x73\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\
\x6e\x67\0\x63\x74\x78\0\x69\x6e\x74\0\x70\x72\x6f\x67\x31\0\x70\x72\x6f\x67\
\x32\0\x62\x70\x66\x5f\x72\x61\x77\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\
\x5f\x61\x72\x67\x73\0\x61\x72\x67\x73\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x70\x72\x6f\x67\x33\
\0\x70\x72\x6f\x67\x34\0\x70\x72\x6f\x67\x35\0\x63\x68\x61\x72\0\x5f\x6c\x69\
\x63\x65\x6e\x73\x65\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\
\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\
\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\
\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\
\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\
\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\
\x70\x72\x6f\x67\x73\x2f\x74\x65\x73\x74\x5f\x6f\x76\x65\x72\x68\x65\x61\x64\
\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x70\x72\
\x6f\x67\x31\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x74\x61\x73\x6b\x5f\x73\x74\
\x72\x75\x63\x74\x20\x2a\x74\x73\x6b\x2c\x20\x63\x6f\x6e\x73\x74\x20\x63\x68\
\x61\x72\x20\x2a\x62\x75\x66\x2c\x20\x62\x6f\x6f\x6c\x20\x65\x78\x65\x63\x29\0\
\x09\x72\x65\x74\x75\x72\x6e\x20\x21\x74\x73\x6b\x3b\0\x69\x6e\x74\x20\x42\x50\
\x46\x5f\x4b\x52\x45\x54\x50\x52\x4f\x42\x45\x28\x70\x72\x6f\x67\x32\x2c\x20\
\x69\x6e\x74\x20\x72\x65\x74\x29\0\x09\x72\x65\x74\x75\x72\x6e\x20\x21\x63\x74\
\x78\x2d\x3e\x61\x72\x67\x73\x5b\x30\x5d\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\
\x50\x52\x4f\x47\x28\x70\x72\x6f\x67\x34\x2c\x20\x73\x74\x72\x75\x63\x74\x20\
\x74\x61\x73\x6b\x5f\x73\x74\x72\x75\x63\x74\x20\x2a\x74\x73\x6b\x2c\x20\x63\
\x6f\x6e\x73\x74\x20\x63\x68\x61\x72\x20\x2a\x62\x75\x66\x2c\x20\x62\x6f\x6f\
\x6c\x20\x65\x78\x65\x63\x29\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\
\x28\x70\x72\x6f\x67\x35\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x74\x61\x73\x6b\
\x5f\x73\x74\x72\x75\x63\x74\x20\x2a\x74\x73\x6b\x2c\x20\x63\x6f\x6e\x73\x74\
\x20\x63\x68\x61\x72\x20\x2a\x62\x75\x66\x2c\x20\x62\x6f\x6f\x6c\x20\x65\x78\
\x65\x63\x29\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\x5f\
\x5f\x73\x65\x74\x5f\x74\x61\x73\x6b\x5f\x63\x6f\x6d\x6d\0\x6b\x72\x65\x74\x70\
\x72\x6f\x62\x65\x2f\x5f\x5f\x73\x65\x74\x5f\x74\x61\x73\x6b\x5f\x63\x6f\x6d\
\x6d\0\x72\x61\x77\x5f\x74\x70\x2f\x74\x61\x73\x6b\x5f\x72\x65\x6e\x61\x6d\x65\
\0\x66\x65\x6e\x74\x72\x79\x2f\x5f\x5f\x73\x65\x74\x5f\x74\x61\x73\x6b\x5f\x63\
\x6f\x6d\x6d\0\x66\x65\x78\x69\x74\x2f\x5f\x5f\x73\x65\x74\x5f\x74\x61\x73\x6b\
\x5f\x63\x6f\x6d\x6d\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x54\0\0\0\x54\0\0\
\0\xbc\0\0\0\x10\x01\0\0\0\0\0\0\x08\0\0\0\x9c\x02\0\0\x01\0\0\0\0\0\0\0\x06\0\
\0\0\xb3\x02\0\0\x01\0\0\0\0\0\0\0\x07\0\0\0\xcd\x02\0\0\x01\0\0\0\0\0\0\0\x0f\
\0\0\0\xe0\x02\0\0\x01\0\0\0\0\0\0\0\x12\0\0\0\xf7\x02\0\0\x01\0\0\0\0\0\0\0\
\x13\0\0\0\x10\0\0\0\x9c\x02\0\0\x03\0\0\0\0\0\0\0\xed\0\0\0\x70\x01\0\0\x05\
\x34\0\0\x10\0\0\0\xed\0\0\0\xbb\x01\0\0\x09\x3c\0\0\x20\0\0\0\xed\0\0\0\x70\
\x01\0\0\x05\x34\0\0\xb3\x02\0\0\x01\0\0\0\0\0\0\0\xed\0\0\0\xc9\x01\0\0\x05\
\x4c\0\0\xcd\x02\0\0\x03\0\0\0\0\0\0\0\xed\0\0\0\xeb\x01\0\0\x0a\x6c\0\0\x10\0\
\0\0\xed\0\0\0\xeb\x01\0\0\x09\x6c\0\0\x20\0\0\0\xed\0\0\0\xeb\x01\0\0\x02\x6c\
\0\0\xe0\x02\0\0\x01\0\0\0\0\0\0\0\xed\0\0\0\x02\x02\0\0\x05\x7c\0\0\xf7\x02\0\
\0\x01\0\0\0\0\0\0\0\xed\0\0\0\x4b\x02\0\0\x05\x94\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\xdd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x01\0\0\0\0\
\0\0\x68\x01\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\
\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x02\0\0\0\0\0\0\x28\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\x01\
\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x42\0\0\0\x01\0\0\0\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xc0\x02\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x55\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xe8\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x6c\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xf8\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x82\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x03\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcf\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x03\0\0\0\0\0\0\x95\x05\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd4\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x08\0\0\0\0\0\0\x30\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __TEST_OVERHEAD_SKEL_H__ */
