/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __BPF_TCP_NOGPL_SKEL_H__
#define __BPF_TCP_NOGPL_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct bpf_tcp_nogpl {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bpf_nogpltcp;
	} maps;
	struct {
		struct bpf_program *nogpltcp_init;
	} progs;
	struct {
		struct bpf_link *nogpltcp_init;
	} links;
};

static void
bpf_tcp_nogpl__destroy(struct bpf_tcp_nogpl *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
bpf_tcp_nogpl__create_skeleton(struct bpf_tcp_nogpl *obj);

static inline struct bpf_tcp_nogpl *
bpf_tcp_nogpl__open_opts(const struct bpf_object_open_opts *opts)
{
	struct bpf_tcp_nogpl *obj;
	int err;

	obj = (struct bpf_tcp_nogpl *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = bpf_tcp_nogpl__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	bpf_tcp_nogpl__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct bpf_tcp_nogpl *
bpf_tcp_nogpl__open(void)
{
	return bpf_tcp_nogpl__open_opts(NULL);
}

static inline int
bpf_tcp_nogpl__load(struct bpf_tcp_nogpl *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct bpf_tcp_nogpl *
bpf_tcp_nogpl__open_and_load(void)
{
	struct bpf_tcp_nogpl *obj;
	int err;

	obj = bpf_tcp_nogpl__open();
	if (!obj)
		return NULL;
	err = bpf_tcp_nogpl__load(obj);
	if (err) {
		bpf_tcp_nogpl__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
bpf_tcp_nogpl__attach(struct bpf_tcp_nogpl *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
bpf_tcp_nogpl__detach(struct bpf_tcp_nogpl *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *bpf_tcp_nogpl__elf_bytes(size_t *sz);

static inline int
bpf_tcp_nogpl__create_skeleton(struct bpf_tcp_nogpl *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "bpf_tcp_nogpl";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "bpf_nogpltcp";
	s->maps[0].map = &obj->maps.bpf_nogpltcp;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "nogpltcp_init";
	s->progs[0].prog = &obj->progs.nogpltcp_init;
	s->progs[0].link = &obj->links.nogpltcp_init;

	s->data = (void *)bpf_tcp_nogpl__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *bpf_tcp_nogpl__elf_bytes(size_t *sz)
{
	*sz = 3504;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x70\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x73\x74\
\x72\x75\x63\x74\x5f\x6f\x70\x73\x2f\x6e\x6f\x67\x70\x6c\x74\x63\x70\x5f\x69\
\x6e\x69\x74\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x75\x63\x74\x5f\
\x6f\x70\x73\0\x62\x70\x66\x5f\x74\x63\x70\x5f\x6e\x6f\x67\x70\x6c\x2e\x63\0\
\x6e\x6f\x67\x70\x6c\x74\x63\x70\x5f\x69\x6e\x69\x74\0\x5f\x6c\x69\x63\x65\x6e\
\x73\x65\0\x62\x70\x66\x5f\x6e\x6f\x67\x70\x6c\x74\x63\x70\0\x2e\x72\x65\x6c\
\x2e\x73\x74\x72\x75\x63\x74\x5f\x6f\x70\x73\0\x2e\x42\x54\x46\0\x2e\x42\x54\
\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3e\0\0\
\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x4e\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\x5c\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x65\0\0\0\x11\0\x05\0\
\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\0\x62\x70\
\x66\x5f\x6e\x6f\x67\x70\x6c\x74\x63\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\
\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x30\x05\0\0\x30\x05\0\0\xd7\x03\0\0\0\0\0\0\0\
\0\0\x02\x02\0\0\0\x01\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\
\0\0\0\0\x14\0\0\0\x01\0\0\0\x18\0\0\0\x01\0\0\x0c\x03\0\0\0\x26\0\0\0\0\0\0\
\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x05\0\0\0\x07\0\0\0\x02\0\
\0\0\x2b\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x3f\0\0\0\0\0\0\x0e\x06\0\0\0\x01\
\0\0\0\x48\0\0\0\x0f\0\0\x04\x80\0\0\0\x5b\0\0\0\x0a\0\0\0\0\0\0\0\x60\0\0\0\
\x0b\0\0\0\x80\0\0\0\x66\0\0\0\x0d\0\0\0\xc0\0\0\0\x6b\0\0\0\x0d\0\0\0\0\x01\0\
\0\x73\0\0\0\x16\0\0\0\x40\x01\0\0\x7c\0\0\0\x18\0\0\0\x80\x01\0\0\x87\0\0\0\
\x1a\0\0\0\xc0\x01\0\0\x91\0\0\0\x1d\0\0\0\0\x02\0\0\x9c\0\0\0\x20\0\0\0\x40\
\x02\0\0\xa9\0\0\0\x16\0\0\0\x80\x02\0\0\xb3\0\0\0\x22\0\0\0\xc0\x02\0\0\xbe\0\
\0\0\x16\0\0\0\0\x03\0\0\xcb\0\0\0\x16\0\0\0\x40\x03\0\0\xd9\0\0\0\x29\0\0\0\
\x80\x03\0\0\xe6\0\0\0\x31\0\0\0\xc0\x03\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x05\0\0\
\0\x07\0\0\0\x10\0\0\0\xec\0\0\0\0\0\0\x08\x0c\0\0\0\xf2\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0e\0\0\0\0\0\0\0\x01\0\0\x0d\0\0\0\0\0\0\0\0\
\x0f\0\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\xff\0\0\0\x03\0\0\x04\x18\0\0\0\x04\x01\
\0\0\x11\0\0\0\0\0\0\0\x10\x01\0\0\x15\0\0\0\x40\0\0\0\x1f\x01\0\0\x0b\0\0\0\
\x80\0\0\0\x30\x01\0\0\x02\0\0\x04\x04\0\0\0\x3c\x01\0\0\x12\0\0\0\0\0\0\0\x46\
\x01\0\0\x13\0\0\0\x10\0\0\0\x4e\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\x5c\x01\
\0\0\0\0\0\x08\x14\0\0\0\x62\x01\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\x71\x01\0\0\
\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x02\x17\0\0\0\0\0\0\0\x01\0\0\x0d\
\x0b\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\x02\x19\0\0\0\0\0\0\0\x03\0\0\x0d\0\
\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\x02\
\x1b\0\0\0\0\0\0\0\x02\0\0\x0d\0\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\x1c\0\0\0\x7f\
\x01\0\0\0\0\0\x08\x12\0\0\0\0\0\0\0\0\0\0\x02\x1e\0\0\0\0\0\0\0\x02\0\0\x0d\0\
\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\x1f\0\0\0\x84\x01\0\0\x06\0\0\x06\x04\0\0\0\
\x91\x01\0\0\0\0\0\0\xa3\x01\0\0\x01\0\0\0\xb9\x01\0\0\x02\0\0\0\xcf\x01\0\0\
\x03\0\0\0\xdd\x01\0\0\x04\0\0\0\xf0\x01\0\0\x05\0\0\0\0\0\0\0\0\0\0\x02\x21\0\
\0\0\0\0\0\0\x02\0\0\x0d\0\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\0\0\
\0\0\x02\x23\0\0\0\0\0\0\0\x02\0\0\x0d\0\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\x24\0\
\0\0\0\0\0\0\0\0\0\x02\x25\0\0\0\0\0\0\0\0\0\0\x0a\x26\0\0\0\x03\x02\0\0\x03\0\
\0\x04\x0c\0\0\0\xb3\0\0\0\x0b\0\0\0\0\0\0\0\x0e\x02\0\0\x27\0\0\0\x20\0\0\0\
\x15\x02\0\0\x0b\0\0\0\x40\0\0\0\x1f\x02\0\0\0\0\0\x08\x28\0\0\0\x25\x02\0\0\0\
\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x02\x2a\0\0\0\0\0\0\0\x02\0\0\x0d\
\0\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\x2b\0\0\0\0\0\0\0\0\0\0\x02\x2c\0\0\0\0\0\0\
\0\0\0\0\x0a\x2d\0\0\0\x29\x02\0\0\x0d\0\0\x04\x38\0\0\0\x35\x02\0\0\x2e\0\0\0\
\0\0\0\0\x42\x02\0\0\x0b\0\0\0\x40\0\0\0\x52\x02\0\0\x27\0\0\0\x60\0\0\0\x5c\
\x02\0\0\x2f\0\0\0\x80\0\0\0\x68\x02\0\0\x0b\0\0\0\xc0\0\0\0\x78\x02\0\0\x0b\0\
\0\0\xe0\0\0\0\x0e\x02\0\0\x2f\0\0\0\0\x01\0\0\x88\x02\0\0\x28\0\0\0\x40\x01\0\
\0\x8f\x02\0\0\x0b\0\0\0\x60\x01\0\0\x9c\x02\0\0\x0b\0\0\0\x80\x01\0\0\xac\x02\
\0\0\x30\0\0\0\xa0\x01\0\0\xbb\x02\0\0\x30\0\0\0\xa8\x01\0\0\xc6\x02\0\0\x30\0\
\0\0\xb0\x01\0\0\xd5\x02\0\0\0\0\0\x08\x02\0\0\0\xdb\x02\0\0\0\0\0\x01\x08\0\0\
\0\x40\0\0\x01\xe0\x02\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x04\0\0\0\0\0\0\0\x02\0\
\0\0\0\xe6\x02\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\0\xaa\x03\0\0\x01\0\0\x0f\x02\0\
\0\0\x08\0\0\0\0\0\0\0\x02\0\0\0\xb2\x03\0\0\x01\0\0\x0f\x80\0\0\0\x32\0\0\0\0\
\0\0\0\x80\0\0\0\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\
\x6f\x6e\x67\0\x63\x74\x78\0\x6e\x6f\x67\x70\x6c\x74\x63\x70\x5f\x69\x6e\x69\
\x74\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\
\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x74\x63\x70\x5f\
\x63\x6f\x6e\x67\x65\x73\x74\x69\x6f\x6e\x5f\x6f\x70\x73\0\x6e\x61\x6d\x65\0\
\x66\x6c\x61\x67\x73\0\x69\x6e\x69\x74\0\x72\x65\x6c\x65\x61\x73\x65\0\x73\x73\
\x74\x68\x72\x65\x73\x68\0\x63\x6f\x6e\x67\x5f\x61\x76\x6f\x69\x64\0\x73\x65\
\x74\x5f\x73\x74\x61\x74\x65\0\x63\x77\x6e\x64\x5f\x65\x76\x65\x6e\x74\0\x69\
\x6e\x5f\x61\x63\x6b\x5f\x65\x76\x65\x6e\x74\0\x75\x6e\x64\x6f\x5f\x63\x77\x6e\
\x64\0\x70\x6b\x74\x73\x5f\x61\x63\x6b\x65\x64\0\x6d\x69\x6e\x5f\x74\x73\x6f\
\x5f\x73\x65\x67\x73\0\x73\x6e\x64\x62\x75\x66\x5f\x65\x78\x70\x61\x6e\x64\0\
\x63\x6f\x6e\x67\x5f\x63\x6f\x6e\x74\x72\x6f\x6c\0\x6f\x77\x6e\x65\x72\0\x5f\
\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x73\x6f\
\x63\x6b\0\x5f\x5f\x73\x6b\x5f\x63\x6f\x6d\x6d\x6f\x6e\0\x73\x6b\x5f\x70\x61\
\x63\x69\x6e\x67\x5f\x72\x61\x74\x65\0\x73\x6b\x5f\x70\x61\x63\x69\x6e\x67\x5f\
\x73\x74\x61\x74\x75\x73\0\x73\x6f\x63\x6b\x5f\x63\x6f\x6d\x6d\x6f\x6e\0\x73\
\x6b\x63\x5f\x73\x74\x61\x74\x65\0\x73\x6b\x63\x5f\x6e\x75\x6d\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x5f\x5f\x75\x31\x36\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\
\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x75\x38\0\x74\x63\x70\x5f\x63\x61\x5f\x65\x76\
\x65\x6e\x74\0\x43\x41\x5f\x45\x56\x45\x4e\x54\x5f\x54\x58\x5f\x53\x54\x41\x52\
\x54\0\x43\x41\x5f\x45\x56\x45\x4e\x54\x5f\x43\x57\x4e\x44\x5f\x52\x45\x53\x54\
\x41\x52\x54\0\x43\x41\x5f\x45\x56\x45\x4e\x54\x5f\x43\x4f\x4d\x50\x4c\x45\x54\
\x45\x5f\x43\x57\x52\0\x43\x41\x5f\x45\x56\x45\x4e\x54\x5f\x4c\x4f\x53\x53\0\
\x43\x41\x5f\x45\x56\x45\x4e\x54\x5f\x45\x43\x4e\x5f\x4e\x4f\x5f\x43\x45\0\x43\
\x41\x5f\x45\x56\x45\x4e\x54\x5f\x45\x43\x4e\x5f\x49\x53\x5f\x43\x45\0\x61\x63\
\x6b\x5f\x73\x61\x6d\x70\x6c\x65\0\x72\x74\x74\x5f\x75\x73\0\x69\x6e\x5f\x66\
\x6c\x69\x67\x68\x74\0\x5f\x5f\x73\x33\x32\0\x69\x6e\x74\0\x72\x61\x74\x65\x5f\
\x73\x61\x6d\x70\x6c\x65\0\x70\x72\x69\x6f\x72\x5f\x6d\x73\x74\x61\x6d\x70\0\
\x70\x72\x69\x6f\x72\x5f\x64\x65\x6c\x69\x76\x65\x72\x65\x64\0\x64\x65\x6c\x69\
\x76\x65\x72\x65\x64\0\x69\x6e\x74\x65\x72\x76\x61\x6c\x5f\x75\x73\0\x73\x6e\
\x64\x5f\x69\x6e\x74\x65\x72\x76\x61\x6c\x5f\x75\x73\0\x72\x63\x76\x5f\x69\x6e\
\x74\x65\x72\x76\x61\x6c\x5f\x75\x73\0\x6c\x6f\x73\x73\x65\x73\0\x61\x63\x6b\
\x65\x64\x5f\x73\x61\x63\x6b\x65\x64\0\x70\x72\x69\x6f\x72\x5f\x69\x6e\x5f\x66\
\x6c\x69\x67\x68\x74\0\x69\x73\x5f\x61\x70\x70\x5f\x6c\x69\x6d\x69\x74\x65\x64\
\0\x69\x73\x5f\x72\x65\x74\x72\x61\x6e\x73\0\x69\x73\x5f\x61\x63\x6b\x5f\x64\
\x65\x6c\x61\x79\x65\x64\0\x5f\x5f\x75\x36\x34\0\x6c\x6f\x6e\x67\0\x5f\x42\x6f\
\x6f\x6c\0\x62\x70\x66\x5f\x6e\x6f\x67\x70\x6c\x74\x63\x70\0\x2f\x72\x6f\x6f\
\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\
\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\
\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\
\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\
\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\
\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\x2f\x62\x70\x66\
\x5f\x74\x63\x70\x5f\x6e\x6f\x67\x70\x6c\x2e\x63\0\x76\x6f\x69\x64\x20\x42\x50\
\x46\x5f\x53\x54\x52\x55\x43\x54\x5f\x4f\x50\x53\x28\x6e\x6f\x67\x70\x6c\x74\
\x63\x70\x5f\x69\x6e\x69\x74\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x73\x6f\x63\
\x6b\x20\x2a\x73\x6b\x29\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x73\x74\x72\x75\
\x63\x74\x5f\x6f\x70\x73\0\x73\x74\x72\x75\x63\x74\x5f\x6f\x70\x73\x2f\x6e\x6f\
\x67\x70\x6c\x74\x63\x70\x5f\x69\x6e\x69\x74\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\
\0\x14\0\0\0\x14\0\0\0\x1c\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\0\xbe\x03\0\0\x01\0\
\0\0\0\0\0\0\x04\0\0\0\x10\0\0\0\xbe\x03\0\0\x01\0\0\0\0\0\0\0\xf3\x02\0\0\x76\
\x03\0\0\x06\x2c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x90\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x2a\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x68\x01\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x32\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x01\0\0\
\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x72\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x01\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\x02\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x82\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\x1f\x09\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x0b\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __BPF_TCP_NOGPL_SKEL_H__ */
