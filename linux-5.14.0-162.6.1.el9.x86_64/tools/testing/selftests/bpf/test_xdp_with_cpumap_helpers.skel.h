/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_XDP_WITH_CPUMAP_HELPERS_SKEL_H__
#define __TEST_XDP_WITH_CPUMAP_HELPERS_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_xdp_with_cpumap_helpers {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *cpu_map;
	} maps;
	struct {
		struct bpf_program *xdp_redir_prog;
		struct bpf_program *xdp_dummy_prog;
		struct bpf_program *xdp_dummy_cm;
	} progs;
	struct {
		struct bpf_link *xdp_redir_prog;
		struct bpf_link *xdp_dummy_prog;
		struct bpf_link *xdp_dummy_cm;
	} links;
};

static void
test_xdp_with_cpumap_helpers__destroy(struct test_xdp_with_cpumap_helpers *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_xdp_with_cpumap_helpers__create_skeleton(struct test_xdp_with_cpumap_helpers *obj);

static inline struct test_xdp_with_cpumap_helpers *
test_xdp_with_cpumap_helpers__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_xdp_with_cpumap_helpers *obj;
	int err;

	obj = (struct test_xdp_with_cpumap_helpers *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_xdp_with_cpumap_helpers__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_xdp_with_cpumap_helpers__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_xdp_with_cpumap_helpers *
test_xdp_with_cpumap_helpers__open(void)
{
	return test_xdp_with_cpumap_helpers__open_opts(NULL);
}

static inline int
test_xdp_with_cpumap_helpers__load(struct test_xdp_with_cpumap_helpers *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_xdp_with_cpumap_helpers *
test_xdp_with_cpumap_helpers__open_and_load(void)
{
	struct test_xdp_with_cpumap_helpers *obj;
	int err;

	obj = test_xdp_with_cpumap_helpers__open();
	if (!obj)
		return NULL;
	err = test_xdp_with_cpumap_helpers__load(obj);
	if (err) {
		test_xdp_with_cpumap_helpers__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_xdp_with_cpumap_helpers__attach(struct test_xdp_with_cpumap_helpers *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_xdp_with_cpumap_helpers__detach(struct test_xdp_with_cpumap_helpers *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_xdp_with_cpumap_helpers__elf_bytes(size_t *sz);

static inline int
test_xdp_with_cpumap_helpers__create_skeleton(struct test_xdp_with_cpumap_helpers *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "test_xdp_with_cpumap_helpers";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "cpu_map";
	s->maps[0].map = &obj->maps.cpu_map;

	/* programs */
	s->prog_cnt = 3;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "xdp_redir_prog";
	s->progs[0].prog = &obj->progs.xdp_redir_prog;
	s->progs[0].link = &obj->links.xdp_redir_prog;

	s->progs[1].name = "xdp_dummy_prog";
	s->progs[1].prog = &obj->progs.xdp_dummy_prog;
	s->progs[1].link = &obj->links.xdp_dummy_prog;

	s->progs[2].name = "xdp_dummy_cm";
	s->progs[2].prog = &obj->progs.xdp_dummy_cm;
	s->progs[2].link = &obj->links.xdp_dummy_cm;

	s->data = (void *)test_xdp_with_cpumap_helpers__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *test_xdp_with_cpumap_helpers__elf_bytes(size_t *sz)
{
	*sz = 2512;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x50\x07\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0a\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x78\x64\
\x70\0\x78\x64\x70\x5f\x63\x70\x75\x6d\x61\x70\x2f\x64\x75\x6d\x6d\x79\x5f\x63\
\x6d\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x74\x65\x73\x74\x5f\
\x78\x64\x70\x5f\x77\x69\x74\x68\x5f\x63\x70\x75\x6d\x61\x70\x5f\x68\x65\x6c\
\x70\x65\x72\x73\x2e\x63\0\x4c\x42\x42\x32\x5f\x32\0\x78\x64\x70\x5f\x72\x65\
\x64\x69\x72\x5f\x70\x72\x6f\x67\0\x63\x70\x75\x5f\x6d\x61\x70\0\x78\x64\x70\
\x5f\x64\x75\x6d\x6d\x79\x5f\x70\x72\x6f\x67\0\x78\x64\x70\x5f\x64\x75\x6d\x6d\
\x79\x5f\x63\x6d\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x78\x64\
\x70\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x37\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x56\0\0\0\0\0\x04\0\x20\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x5d\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x6c\0\0\0\
\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x74\0\0\0\x12\0\x03\0\x30\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\x83\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\
\0\0\x90\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xb4\x02\0\0\x01\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x33\0\0\
\0\x95\0\0\0\0\0\0\0\xb4\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\x61\x11\x0c\0\0\0\0\
\0\xb4\0\0\0\x01\0\0\0\x16\x01\x01\0\x01\0\0\0\xb4\0\0\0\x02\0\0\0\x95\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\
\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\
\0\0\xf4\x01\0\0\xf4\x01\0\0\x02\x02\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\
\x10\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\x02\x08\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x04\0\0\
\x04\x20\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x27\0\
\0\0\x07\0\0\0\x80\0\0\0\x32\0\0\0\x05\0\0\0\xc0\0\0\0\x3e\0\0\0\0\0\0\x0e\x09\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x46\0\0\0\x06\0\0\x04\x18\0\0\0\
\x4d\0\0\0\x0d\0\0\0\0\0\0\0\x52\0\0\0\x0d\0\0\0\x20\0\0\0\x5b\0\0\0\x0d\0\0\0\
\x40\0\0\0\x65\0\0\0\x0d\0\0\0\x60\0\0\0\x75\0\0\0\x0d\0\0\0\x80\0\0\0\x84\0\0\
\0\x0d\0\0\0\xa0\0\0\0\x93\0\0\0\0\0\0\x08\x0e\0\0\0\x99\0\0\0\0\0\0\x01\x04\0\
\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xa6\0\0\0\x0b\0\0\0\xaa\0\0\0\x01\
\0\0\x0c\x0f\0\0\0\xb9\0\0\0\x01\0\0\x0c\x0f\0\0\0\xc8\0\0\0\x01\0\0\x0c\x0f\0\
\0\0\xd5\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x13\0\
\0\0\x04\0\0\0\x04\0\0\0\xda\0\0\0\0\0\0\x0e\x14\0\0\0\x01\0\0\0\xdc\x01\0\0\
\x01\0\0\x0f\x20\0\0\0\x0a\0\0\0\0\0\0\0\x20\0\0\0\xe2\x01\0\0\x01\0\0\x0f\x04\
\0\0\0\x15\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6b\x65\
\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\x7a\x65\0\x6d\x61\
\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x63\x70\x75\x5f\x6d\x61\x70\0\x78\x64\
\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\
\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\
\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x65\
\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\x32\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x78\x64\x70\
\x5f\x72\x65\x64\x69\x72\x5f\x70\x72\x6f\x67\0\x78\x64\x70\x5f\x64\x75\x6d\x6d\
\x79\x5f\x70\x72\x6f\x67\0\x78\x64\x70\x5f\x64\x75\x6d\x6d\x79\x5f\x63\x6d\0\
\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2f\x72\x6f\x6f\x74\x2f\
\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\
\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\
\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\
\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\
\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\
\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\x2f\x74\x65\x73\x74\x5f\
\x78\x64\x70\x5f\x77\x69\x74\x68\x5f\x63\x70\x75\x6d\x61\x70\x5f\x68\x65\x6c\
\x70\x65\x72\x73\x2e\x63\0\x09\x72\x65\x74\x75\x72\x6e\x20\x62\x70\x66\x5f\x72\
\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x61\x70\x28\x26\x63\x70\x75\x5f\x6d\x61\
\x70\x2c\x20\x31\x2c\x20\x30\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x58\x44\
\x50\x5f\x50\x41\x53\x53\x3b\0\x09\x69\x66\x20\x28\x63\x74\x78\x2d\x3e\x69\x6e\
\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\x20\x3d\x3d\x20\x49\x46\
\x49\x4e\x44\x45\x58\x5f\x4c\x4f\x29\0\x7d\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x78\x64\x70\0\x78\x64\x70\x5f\x63\x70\x75\x6d\x61\x70\x2f\
\x64\x75\x6d\x6d\x79\x5f\x63\x6d\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x2c\0\0\
\0\x2c\0\0\0\x74\0\0\0\xa0\0\0\0\0\0\0\0\x08\0\0\0\xea\x01\0\0\x02\0\0\0\0\0\0\
\0\x10\0\0\0\x30\0\0\0\x11\0\0\0\xee\x01\0\0\x01\0\0\0\0\0\0\0\x12\0\0\0\x10\0\
\0\0\xea\x01\0\0\x03\0\0\0\0\0\0\0\xe3\0\0\0\x75\x01\0\0\x09\x48\0\0\x28\0\0\0\
\xe3\0\0\0\x75\x01\0\0\x02\x48\0\0\x30\0\0\0\xe3\0\0\0\x9f\x01\0\0\x02\x60\0\0\
\xee\x01\0\0\x03\0\0\0\0\0\0\0\xe3\0\0\0\xb1\x01\0\0\x0b\x78\0\0\x10\0\0\0\xe3\
\0\0\0\0\0\0\0\0\0\0\0\x20\0\0\0\xe3\0\0\0\xda\x01\0\0\x01\x88\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xaf\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\
\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\
\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x01\0\0\0\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\
\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x02\0\0\0\0\0\0\x28\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x29\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x02\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\0\0\0\x01\0\0\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x68\x02\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x99\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x70\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\xa1\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\
\x02\0\0\0\0\0\0\x0e\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xa6\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x06\0\0\0\0\0\
\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __TEST_XDP_WITH_CPUMAP_HELPERS_SKEL_H__ */
