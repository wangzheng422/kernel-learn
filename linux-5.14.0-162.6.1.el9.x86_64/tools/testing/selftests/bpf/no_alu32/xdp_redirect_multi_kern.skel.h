/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __XDP_REDIRECT_MULTI_KERN_SKEL_H__
#define __XDP_REDIRECT_MULTI_KERN_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct xdp_redirect_multi_kern {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *map_all;
		struct bpf_map *map_egress;
		struct bpf_map *mac_map;
	} maps;
	struct {
		struct bpf_program *xdp_redirect_map_multi_prog;
		struct bpf_program *xdp_redirect_map_all_prog;
		struct bpf_program *xdp_devmap_prog;
	} progs;
	struct {
		struct bpf_link *xdp_redirect_map_multi_prog;
		struct bpf_link *xdp_redirect_map_all_prog;
		struct bpf_link *xdp_devmap_prog;
	} links;
};

static void
xdp_redirect_multi_kern__destroy(struct xdp_redirect_multi_kern *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_redirect_multi_kern__create_skeleton(struct xdp_redirect_multi_kern *obj);

static inline struct xdp_redirect_multi_kern *
xdp_redirect_multi_kern__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_redirect_multi_kern *obj;
	int err;

	obj = (struct xdp_redirect_multi_kern *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_redirect_multi_kern__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_redirect_multi_kern__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_redirect_multi_kern *
xdp_redirect_multi_kern__open(void)
{
	return xdp_redirect_multi_kern__open_opts(NULL);
}

static inline int
xdp_redirect_multi_kern__load(struct xdp_redirect_multi_kern *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_redirect_multi_kern *
xdp_redirect_multi_kern__open_and_load(void)
{
	struct xdp_redirect_multi_kern *obj;
	int err;

	obj = xdp_redirect_multi_kern__open();
	if (!obj)
		return NULL;
	err = xdp_redirect_multi_kern__load(obj);
	if (err) {
		xdp_redirect_multi_kern__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_redirect_multi_kern__attach(struct xdp_redirect_multi_kern *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_redirect_multi_kern__detach(struct xdp_redirect_multi_kern *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_redirect_multi_kern__elf_bytes(size_t *sz);

static inline int
xdp_redirect_multi_kern__create_skeleton(struct xdp_redirect_multi_kern *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "xdp_redirect_multi_kern";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "map_all";
	s->maps[0].map = &obj->maps.map_all;

	s->maps[1].name = "map_egress";
	s->maps[1].map = &obj->maps.map_egress;

	s->maps[2].name = "mac_map";
	s->maps[2].map = &obj->maps.mac_map;

	/* programs */
	s->prog_cnt = 3;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "xdp_redirect_map_multi_prog";
	s->progs[0].prog = &obj->progs.xdp_redirect_map_multi_prog;
	s->progs[0].link = &obj->links.xdp_redirect_map_multi_prog;

	s->progs[1].name = "xdp_redirect_map_all_prog";
	s->progs[1].prog = &obj->progs.xdp_redirect_map_all_prog;
	s->progs[1].link = &obj->links.xdp_redirect_map_all_prog;

	s->progs[2].name = "xdp_devmap_prog";
	s->progs[2].prog = &obj->progs.xdp_devmap_prog;
	s->progs[2].link = &obj->links.xdp_devmap_prog;

	s->data = (void *)xdp_redirect_multi_kern__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *xdp_redirect_multi_kern__elf_bytes(size_t *sz)
{
	*sz = 4584;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x28\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x78\x64\
\x70\0\x78\x64\x70\x5f\x64\x65\x76\x6d\x61\x70\x2f\x6d\x61\x70\x5f\x70\x72\x6f\
\x67\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x78\x64\x70\x5f\x72\
\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x75\x6c\x74\x69\x5f\x6b\x65\x72\x6e\x2e\
\x63\0\x4c\x42\x42\x30\x5f\x37\0\x4c\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\
\x35\0\x4c\x42\x42\x30\x5f\x36\0\x4c\x42\x42\x32\x5f\x33\0\x78\x64\x70\x5f\x72\
\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x61\x70\x5f\x6d\x75\x6c\x74\x69\x5f\x70\
\x72\x6f\x67\0\x6d\x61\x70\x5f\x61\x6c\x6c\0\x78\x64\x70\x5f\x72\x65\x64\x69\
\x72\x65\x63\x74\x5f\x6d\x61\x70\x5f\x61\x6c\x6c\x5f\x70\x72\x6f\x67\0\x6d\x61\
\x70\x5f\x65\x67\x72\x65\x73\x73\0\x78\x64\x70\x5f\x64\x65\x76\x6d\x61\x70\x5f\
\x70\x72\x6f\x67\0\x6d\x61\x63\x5f\x6d\x61\x70\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x72\x65\x6c\x78\x64\x70\0\x2e\x72\x65\x6c\x78\x64\x70\x5f\x64\x65\
\x76\x6d\x61\x70\x2f\x6d\x61\x70\x5f\x70\x72\x6f\x67\0\x2e\x42\x54\x46\0\x2e\
\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x37\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x51\0\0\0\0\0\x03\0\xd8\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x58\0\0\0\0\0\x03\0\x88\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\0\0\0\
\0\0\x03\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x66\0\0\0\0\0\x03\0\xd0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6d\0\
\0\0\0\0\x04\0\xe0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\0\0\0\x12\0\x03\0\0\0\0\0\
\0\0\0\0\xe0\0\0\0\0\0\0\0\x90\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\
\0\0\x98\0\0\0\x12\0\x03\0\xe0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\xb2\0\0\0\x11\0\
\x05\0\x20\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xbd\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\
\0\xe8\0\0\0\0\0\0\0\xcd\0\0\0\x11\0\x05\0\x40\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\
\xd5\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xb7\0\0\0\x01\0\0\0\
\x61\x13\x04\0\0\0\0\0\x61\x12\0\0\0\0\0\0\xbf\x24\0\0\0\0\0\0\x07\x04\0\0\x0e\
\0\0\0\x2d\x34\x15\0\0\0\0\0\x71\x23\x0c\0\0\0\0\0\x71\x22\x0d\0\0\0\0\0\x67\
\x02\0\0\x08\0\0\0\x4f\x32\0\0\0\0\0\0\x15\x02\x06\0\x86\xdd\0\0\x55\x02\x0a\0\
\x08\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\xb7\x03\0\0\
\x18\0\0\0\x05\0\x09\0\0\0\0\0\x61\x12\x0c\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xb7\x03\0\0\0\0\0\0\x05\0\x04\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\xb7\x02\0\0\0\0\0\0\xb7\x03\0\0\x08\0\0\0\x85\0\0\0\x33\0\0\0\x95\0\0\
\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\xb7\x03\0\0\
\x18\0\0\0\x85\0\0\0\x33\0\0\0\x95\0\0\0\0\0\0\0\x61\x12\x04\0\0\0\0\0\x61\x16\
\0\0\0\0\0\0\x61\x11\x14\0\0\0\0\0\x63\x1a\xfc\xff\0\0\0\0\xb7\0\0\0\x01\0\0\0\
\xbf\x61\0\0\0\0\0\0\x07\x01\0\0\x0e\0\0\0\x2d\x21\x14\0\0\0\0\0\xbf\xa2\0\0\0\
\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\
\0\x01\0\0\0\xbf\x01\0\0\0\0\0\0\xb7\0\0\0\x02\0\0\0\x15\x01\x0c\0\0\0\0\0\x71\
\x12\x05\0\0\0\0\0\x73\x26\x0b\0\0\0\0\0\x71\x12\x04\0\0\0\0\0\x73\x26\x0a\0\0\
\0\0\0\x71\x12\x03\0\0\0\0\0\x73\x26\x09\0\0\0\0\0\x71\x12\x02\0\0\0\0\0\x73\
\x26\x08\0\0\0\0\0\x71\x12\x01\0\0\0\0\0\x73\x26\x07\0\0\0\0\0\x71\x11\0\0\0\0\
\0\0\x73\x16\x06\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x47\x50\x4c\0\0\0\0\0\x60\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x90\0\0\0\0\0\0\
\0\x01\0\0\0\x0a\0\0\0\xb0\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\xe0\0\0\0\0\0\0\0\
\x01\0\0\0\x0c\0\0\0\x50\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x9f\xeb\x01\0\x18\0\
\0\0\0\0\0\0\x74\x03\0\0\x74\x03\0\0\x1c\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\
\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\
\x04\0\0\0\x0e\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\
\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\0\0\0\0\0\0\
\0\x02\x08\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x04\0\0\0\0\0\
\0\x04\0\0\x04\x20\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\
\0\0\x27\0\0\0\x05\0\0\0\x80\0\0\0\x32\0\0\0\x07\0\0\0\xc0\0\0\0\x3e\0\0\0\0\0\
\0\x0e\x09\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\
\0\x02\0\0\0\x04\0\0\0\x19\0\0\0\0\0\0\0\0\0\0\x02\x0e\0\0\0\0\0\0\0\0\0\0\x03\
\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\0\0\0\0\0\0\
\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x80\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x19\
\0\0\0\x0b\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x27\0\0\0\x0d\0\0\0\x80\
\0\0\0\x32\0\0\0\x0f\0\0\0\xc0\0\0\0\x46\0\0\0\0\0\0\x0e\x11\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\x02\x14\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\x02\x16\0\0\0\x51\0\0\0\0\0\0\x08\x17\0\0\0\x57\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x19\0\0\0\x64\0\0\0\0\0\0\x08\x1a\0\
\0\0\x6b\0\0\0\0\0\0\x08\x1b\0\0\0\x71\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\
\0\0\x04\0\0\x04\x20\0\0\0\x19\0\0\0\x13\0\0\0\0\0\0\0\x84\0\0\0\x15\0\0\0\x40\
\0\0\0\x88\0\0\0\x18\0\0\0\x80\0\0\0\x32\0\0\0\x0f\0\0\0\xc0\0\0\0\x8e\0\0\0\0\
\0\0\x0e\x1c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x1f\0\0\0\x96\0\0\0\x06\0\0\x04\
\x18\0\0\0\x9d\0\0\0\x16\0\0\0\0\0\0\0\xa2\0\0\0\x16\0\0\0\x20\0\0\0\xab\0\0\0\
\x16\0\0\0\x40\0\0\0\xb5\0\0\0\x16\0\0\0\x60\0\0\0\xc5\0\0\0\x16\0\0\0\x80\0\0\
\0\xd4\0\0\0\x16\0\0\0\xa0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xe3\0\0\0\x1e\0\
\0\0\xe7\0\0\0\x01\0\0\x0c\x20\0\0\0\x03\x01\0\0\x01\0\0\x0c\x20\0\0\0\x1d\x01\
\0\0\x01\0\0\x0c\x20\0\0\0\x2d\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\0\0\x24\0\0\0\x04\0\0\0\x04\0\0\0\x32\x01\0\0\0\0\0\x0e\x25\0\0\
\0\x01\0\0\0\xf6\x03\0\0\x03\0\0\x0f\x60\0\0\0\x0a\0\0\0\0\0\0\0\x20\0\0\0\x12\
\0\0\0\x20\0\0\0\x20\0\0\0\x1d\0\0\0\x40\0\0\0\x20\0\0\0\xfc\x03\0\0\x01\0\0\
\x0f\x04\0\0\0\x26\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\
\x6b\x65\x79\x5f\x73\x69\x7a\x65\0\x76\x61\x6c\x75\x65\x5f\x73\x69\x7a\x65\0\
\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6d\x61\x70\x5f\x61\x6c\x6c\0\
\x6d\x61\x70\x5f\x65\x67\x72\x65\x73\x73\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x62\x65\x36\x34\0\x5f\x5f\x75\
\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\
\x67\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x6d\x61\x63\x5f\x6d\x61\x70\0\x78\
\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\
\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\x73\x73\x5f\x69\x66\x69\
\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\
\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x63\x74\x78\0\x78\
\x64\x70\x5f\x72\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x61\x70\x5f\x6d\x75\x6c\
\x74\x69\x5f\x70\x72\x6f\x67\0\x78\x64\x70\x5f\x72\x65\x64\x69\x72\x65\x63\x74\
\x5f\x6d\x61\x70\x5f\x61\x6c\x6c\x5f\x70\x72\x6f\x67\0\x78\x64\x70\x5f\x64\x65\
\x76\x6d\x61\x70\x5f\x70\x72\x6f\x67\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\
\x6e\x73\x65\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\
\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\
\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\
\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\
\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\
\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\
\x6f\x67\x73\x2f\x78\x64\x70\x5f\x72\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x75\
\x6c\x74\x69\x5f\x6b\x65\x72\x6e\x2e\x63\0\x69\x6e\x74\x20\x78\x64\x70\x5f\x72\
\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x61\x70\x5f\x6d\x75\x6c\x74\x69\x5f\x70\
\x72\x6f\x67\x28\x73\x74\x72\x75\x63\x74\x20\x78\x64\x70\x5f\x6d\x64\x20\x2a\
\x63\x74\x78\x29\0\x09\x76\x6f\x69\x64\x20\x2a\x64\x61\x74\x61\x5f\x65\x6e\x64\
\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\x67\x29\x63\x74\
\x78\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\x64\x3b\0\x09\x76\x6f\x69\x64\x20\x2a\
\x64\x61\x74\x61\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\x6e\
\x67\x29\x63\x74\x78\x2d\x3e\x64\x61\x74\x61\x3b\0\x09\x69\x66\x20\x28\x64\x61\
\x74\x61\x20\x2b\x20\x6e\x68\x5f\x6f\x66\x66\x20\x3e\x20\x64\x61\x74\x61\x5f\
\x65\x6e\x64\x29\0\x09\x68\x5f\x70\x72\x6f\x74\x6f\x20\x3d\x20\x65\x74\x68\x2d\
\x3e\x68\x5f\x70\x72\x6f\x74\x6f\x3b\0\x09\x69\x66\x20\x28\x68\x5f\x70\x72\x6f\
\x74\x6f\x20\x3d\x3d\x20\x62\x70\x66\x5f\x68\x74\x6f\x6e\x73\x28\x45\x54\x48\
\x5f\x50\x5f\x49\x50\x29\x29\0\x09\x09\x72\x65\x74\x75\x72\x6e\x20\x62\x70\x66\
\x5f\x72\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x61\x70\x28\x26\x6d\x61\x70\x5f\
\x61\x6c\x6c\x2c\x20\x30\x2c\0\x09\x09\x72\x65\x74\x75\x72\x6e\x20\x62\x70\x66\
\x5f\x72\x65\x64\x69\x72\x65\x63\x74\x5f\x6d\x61\x70\x28\x26\x6d\x61\x70\x5f\
\x61\x6c\x6c\x2c\x20\x69\x66\x5f\x69\x6e\x64\x65\x78\x2c\x20\x30\x29\x3b\0\x09\
\x09\x72\x65\x74\x75\x72\x6e\x20\x62\x70\x66\x5f\x72\x65\x64\x69\x72\x65\x63\
\x74\x5f\x6d\x61\x70\x28\x26\x6d\x61\x70\x5f\x61\x6c\x6c\x2c\x20\x30\x2c\x20\
\x42\x50\x46\x5f\x46\x5f\x42\x52\x4f\x41\x44\x43\x41\x53\x54\x29\x3b\0\x7d\0\
\x09\x72\x65\x74\x75\x72\x6e\x20\x62\x70\x66\x5f\x72\x65\x64\x69\x72\x65\x63\
\x74\x5f\x6d\x61\x70\x28\x26\x6d\x61\x70\x5f\x65\x67\x72\x65\x73\x73\x2c\x20\
\x30\x2c\0\x09\x5f\x5f\x75\x33\x32\x20\x6b\x65\x79\x20\x3d\x20\x63\x74\x78\x2d\
\x3e\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\x3b\0\x09\x6d\x61\
\x63\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\
\x65\x6c\x65\x6d\x28\x26\x6d\x61\x63\x5f\x6d\x61\x70\x2c\x20\x26\x6b\x65\x79\
\x29\x3b\0\x09\x69\x66\x20\x28\x6d\x61\x63\x29\0\x09\x09\x5f\x5f\x62\x75\x69\
\x6c\x74\x69\x6e\x5f\x6d\x65\x6d\x63\x70\x79\x28\x65\x74\x68\x2d\x3e\x68\x5f\
\x73\x6f\x75\x72\x63\x65\x2c\x20\x6d\x61\x63\x2c\x20\x45\x54\x48\x5f\x41\x4c\
\x45\x4e\x29\x3b\0\x2e\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x78\x64\
\x70\0\x78\x64\x70\x5f\x64\x65\x76\x6d\x61\x70\x2f\x6d\x61\x70\x5f\x70\x72\x6f\
\x67\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x2c\0\0\0\x2c\0\0\0\xb4\x01\0\0\xe0\x01\
\0\0\0\0\0\0\x08\0\0\0\x04\x04\0\0\x02\0\0\0\0\0\0\0\x21\0\0\0\xe0\0\0\0\x22\0\
\0\0\x08\x04\0\0\x01\0\0\0\0\0\0\0\x23\0\0\0\x10\0\0\0\x04\x04\0\0\x0f\0\0\0\0\
\0\0\0\x3b\x01\0\0\xc8\x01\0\0\0\x98\0\0\x08\0\0\0\x3b\x01\0\0\xfc\x01\0\0\x26\
\xa0\0\0\x10\0\0\0\x3b\x01\0\0\x2b\x02\0\0\x22\xa4\0\0\x18\0\0\0\x3b\x01\0\0\
\x52\x02\0\0\x0b\xc0\0\0\x28\0\0\0\x3b\x01\0\0\x52\x02\0\0\x06\xc0\0\0\x30\0\0\
\0\x3b\x01\0\0\x71\x02\0\0\x11\xcc\0\0\x50\0\0\0\x3b\x01\0\0\x8a\x02\0\0\x06\
\xd8\0\0\x60\0\0\0\x3b\x01\0\0\xaf\x02\0\0\x0a\xdc\0\0\x88\0\0\0\x3b\x01\0\0\0\
\0\0\0\0\0\0\0\x90\0\0\0\x3b\x01\0\0\xd6\x02\0\0\x0a\xec\0\0\xb0\0\0\0\x3b\x01\
\0\0\x08\x03\0\0\x0a\xf8\0\0\xd0\0\0\0\x3b\x01\0\0\0\0\0\0\0\0\0\0\xd8\0\0\0\
\x3b\x01\0\0\x41\x03\0\0\x01\xfc\0\0\xe0\0\0\0\x3b\x01\0\0\x43\x03\0\0\x09\x14\
\x01\0\x08\x01\0\0\x3b\x01\0\0\x43\x03\0\0\x02\x14\x01\0\x08\x04\0\0\x0b\0\0\0\
\0\0\0\0\x3b\x01\0\0\xfc\x01\0\0\x26\x30\x01\0\x08\0\0\0\x3b\x01\0\0\x2b\x02\0\
\0\x22\x34\x01\0\x10\0\0\0\x3b\x01\0\0\x6c\x03\0\0\x13\x38\x01\0\x18\0\0\0\x3b\
\x01\0\0\x6c\x03\0\0\x08\x38\x01\0\x28\0\0\0\x3b\x01\0\0\x52\x02\0\0\x0b\x50\
\x01\0\x38\0\0\0\x3b\x01\0\0\x52\x02\0\0\x06\x50\x01\0\x48\0\0\0\x3b\x01\0\0\0\
\0\0\0\0\0\0\0\x50\0\0\0\x3b\x01\0\0\x8e\x03\0\0\x08\x5c\x01\0\x78\0\0\0\x3b\
\x01\0\0\xba\x03\0\0\x06\x60\x01\0\x80\0\0\0\x3b\x01\0\0\xc4\x03\0\0\x03\x64\
\x01\0\xe0\0\0\0\x3b\x01\0\0\x41\x03\0\0\x01\x70\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x0c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x01\0\0\0\
\0\0\0\x80\x01\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\
\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x02\0\0\0\0\0\0\
\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\
\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x03\0\0\0\0\0\0\xe8\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x29\0\0\0\x01\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x04\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\0\0\0\x01\0\0\0\x03\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x28\x05\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xde\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x30\x05\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\xe6\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x70\x05\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xfe\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x05\
\0\0\0\0\0\0\xa8\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x03\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0d\0\0\0\0\0\0\
\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __XDP_REDIRECT_MULTI_KERN_SKEL_H__ */
