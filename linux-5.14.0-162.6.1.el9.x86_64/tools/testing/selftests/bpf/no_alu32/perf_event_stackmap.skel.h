/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __PERF_EVENT_STACKMAP_SKEL_H__
#define __PERF_EVENT_STACKMAP_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct perf_event_stackmap {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *stackmap;
		struct bpf_map *stackdata_map;
		struct bpf_map *data;
	} maps;
	struct {
		struct bpf_program *oncpu;
	} progs;
	struct {
		struct bpf_link *oncpu;
	} links;
	struct perf_event_stackmap__data {
		long stackid_kernel;
		long stackid_user;
		long stack_kernel;
		long stack_user;
	} *data;
};

static void
perf_event_stackmap__destroy(struct perf_event_stackmap *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
perf_event_stackmap__create_skeleton(struct perf_event_stackmap *obj);

static inline struct perf_event_stackmap *
perf_event_stackmap__open_opts(const struct bpf_object_open_opts *opts)
{
	struct perf_event_stackmap *obj;
	int err;

	obj = (struct perf_event_stackmap *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = perf_event_stackmap__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	perf_event_stackmap__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct perf_event_stackmap *
perf_event_stackmap__open(void)
{
	return perf_event_stackmap__open_opts(NULL);
}

static inline int
perf_event_stackmap__load(struct perf_event_stackmap *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct perf_event_stackmap *
perf_event_stackmap__open_and_load(void)
{
	struct perf_event_stackmap *obj;
	int err;

	obj = perf_event_stackmap__open();
	if (!obj)
		return NULL;
	err = perf_event_stackmap__load(obj);
	if (err) {
		perf_event_stackmap__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
perf_event_stackmap__attach(struct perf_event_stackmap *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
perf_event_stackmap__detach(struct perf_event_stackmap *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *perf_event_stackmap__elf_bytes(size_t *sz);

static inline int
perf_event_stackmap__create_skeleton(struct perf_event_stackmap *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "perf_event_stackmap";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "stackmap";
	s->maps[0].map = &obj->maps.stackmap;

	s->maps[1].name = "stackdata_map";
	s->maps[1].map = &obj->maps.stackdata_map;

	s->maps[2].name = "perf_eve.data";
	s->maps[2].map = &obj->maps.data;
	s->maps[2].mmaped = (void **)&obj->data;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "oncpu";
	s->progs[0].prog = &obj->progs.oncpu;
	s->progs[0].link = &obj->links.oncpu;

	s->data = (void *)perf_event_stackmap__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *perf_event_stackmap__elf_bytes(size_t *sz)
{
	*sz = 3848;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x88\x0c\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0a\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x70\x65\
\x72\x66\x5f\x65\x76\x65\x6e\x74\0\x2e\x64\x61\x74\x61\0\x2e\x6d\x61\x70\x73\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\x5f\x73\
\x74\x61\x63\x6b\x6d\x61\x70\x2e\x63\0\x4c\x42\x42\x30\x5f\x32\0\x4c\x42\x42\
\x30\x5f\x34\0\x4c\x42\x42\x30\x5f\x39\0\x4c\x42\x42\x30\x5f\x37\0\x6f\x6e\x63\
\x70\x75\0\x73\x74\x61\x63\x6b\x6d\x61\x70\0\x73\x74\x61\x63\x6b\x69\x64\x5f\
\x6b\x65\x72\x6e\x65\x6c\0\x73\x74\x61\x63\x6b\x69\x64\x5f\x75\x73\x65\x72\0\
\x73\x74\x61\x63\x6b\x64\x61\x74\x61\x5f\x6d\x61\x70\0\x73\x74\x61\x63\x6b\x5f\
\x6b\x65\x72\x6e\x65\x6c\0\x73\x74\x61\x63\x6b\x5f\x75\x73\x65\x72\0\x4c\x49\
\x43\x45\x4e\x53\x45\0\x2e\x72\x65\x6c\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\
\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\0\0\x03\0\x68\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4d\0\0\0\0\0\x03\0\xb8\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x54\0\0\0\0\0\x03\0\x90\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5b\0\0\0\0\0\
\x03\0\x40\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x62\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\
\0\xa0\x01\0\0\0\0\0\0\x68\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\
\x71\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x80\0\0\0\x11\0\x04\0\
\x08\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x8d\0\0\0\x11\0\x05\0\x20\0\0\0\0\0\0\0\
\x20\0\0\0\0\0\0\0\x9b\0\0\0\x11\0\x04\0\x10\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\xa8\0\0\0\x11\0\x04\0\x18\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\xb3\0\0\0\x11\0\x06\
\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xbf\x16\0\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\
\x63\x1a\xfc\xff\0\0\0\0\xbf\x61\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x1b\0\0\0\xc5\0\x04\0\x01\0\0\0\x18\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x02\0\0\0\x7b\x21\0\0\0\0\0\0\xbf\x61\0\0\0\
\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x03\0\0\0\x01\0\0\x85\0\0\0\x1b\
\0\0\0\xc5\0\x04\0\x01\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\
\x02\0\0\0\x7b\x21\0\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\xbf\x07\0\0\0\0\0\0\
\x15\x07\x14\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\xbf\x72\0\0\0\0\0\0\xb7\x03\0\0\xf8\
\x03\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x43\0\0\0\xc5\0\x04\0\x01\0\0\0\x18\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x02\0\0\0\x7b\x21\0\0\0\0\0\0\xbf\x61\
\0\0\0\0\0\0\xbf\x72\0\0\0\0\0\0\xb7\x03\0\0\xf8\x03\0\0\xb7\x04\0\0\0\x01\0\0\
\x85\0\0\0\x43\0\0\0\xc5\0\x04\0\x01\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x02\0\0\0\x7b\x21\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\x20\0\0\0\0\
\0\0\0\x01\0\0\0\x08\0\0\0\x48\0\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x70\0\0\0\0\0\
\0\0\x01\0\0\0\x08\0\0\0\x98\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\xc8\0\0\0\0\0\0\
\0\x01\0\0\0\x0b\0\0\0\x20\x01\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\x70\x01\0\0\0\0\
\0\0\x01\0\0\0\x0d\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xe8\x02\0\0\xe8\x02\0\
\0\x2f\x03\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x07\0\0\0\x05\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\x02\0\0\0\x04\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\x19\0\0\0\0\0\0\x08\
\x09\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\0\
\x2c\0\0\0\0\0\0\x08\x0e\0\0\0\x3a\0\0\0\0\0\0\x08\x0d\0\0\0\x40\0\0\0\0\0\0\
\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0c\0\0\0\x04\0\0\0\x7f\0\0\
\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x53\0\0\0\x01\0\0\0\0\0\0\0\x58\0\0\0\x05\0\0\
\0\x40\0\0\0\x64\0\0\0\x07\0\0\0\x80\0\0\0\x68\0\0\0\x0a\0\0\0\xc0\0\0\0\x6e\0\
\0\0\0\0\0\x0e\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x12\0\0\0\0\0\0\0\0\0\0\
\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\x02\x14\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\
\x53\0\0\0\x11\0\0\0\0\0\0\0\x58\0\0\0\x13\0\0\0\x40\0\0\0\x64\0\0\0\x07\0\0\0\
\x80\0\0\0\x68\0\0\0\x0a\0\0\0\xc0\0\0\0\x77\0\0\0\0\0\0\x0e\x15\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x85\0\0\0\x17\0\0\0\
\x89\0\0\0\x01\0\0\x0c\x18\0\0\0\x8f\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\x94\
\0\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\0\xa3\0\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\0\
\xb0\0\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\0\xbd\0\0\0\0\0\0\x0e\x1a\0\0\0\x01\0\0\
\0\xc8\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x1f\0\0\
\0\x04\0\0\0\x04\0\0\0\xcd\0\0\0\0\0\0\x0e\x20\0\0\0\x01\0\0\0\x10\x03\0\0\x04\
\0\0\x0f\x20\0\0\0\x1b\0\0\0\0\0\0\0\x08\0\0\0\x1c\0\0\0\x08\0\0\0\x08\0\0\0\
\x1d\0\0\0\x10\0\0\0\x08\0\0\0\x1e\0\0\0\x18\0\0\0\x08\0\0\0\x16\x03\0\0\x02\0\
\0\x0f\x40\0\0\0\x10\0\0\0\0\0\0\0\x20\0\0\0\x16\0\0\0\x20\0\0\0\x20\0\0\0\x1c\
\x03\0\0\x01\0\0\x0f\x04\0\0\0\x21\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\
\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\
\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x73\x74\
\x61\x63\x6b\x5f\x74\x72\x61\x63\x65\x5f\x74\0\x5f\x5f\x75\x36\x34\0\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x74\x79\x70\
\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\
\x75\x65\0\x73\x74\x61\x63\x6b\x6d\x61\x70\0\x73\x74\x61\x63\x6b\x64\x61\x74\
\x61\x5f\x6d\x61\x70\0\x63\x74\x78\0\x6f\x6e\x63\x70\x75\0\x6c\x6f\x6e\x67\0\
\x73\x74\x61\x63\x6b\x69\x64\x5f\x6b\x65\x72\x6e\x65\x6c\0\x73\x74\x61\x63\x6b\
\x69\x64\x5f\x75\x73\x65\x72\0\x73\x74\x61\x63\x6b\x5f\x6b\x65\x72\x6e\x65\x6c\
\0\x73\x74\x61\x63\x6b\x5f\x75\x73\x65\x72\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\
\x4e\x53\x45\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\
\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\
\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\
\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\
\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\
\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\
\x6f\x67\x73\x2f\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\x5f\x73\x74\x61\x63\
\x6b\x6d\x61\x70\x2e\x63\0\x69\x6e\x74\x20\x6f\x6e\x63\x70\x75\x28\x76\x6f\x69\
\x64\x20\x2a\x63\x74\x78\x29\0\x09\x5f\x5f\x75\x33\x32\x20\x6b\x65\x79\x20\x3d\
\x20\x30\x3b\0\x09\x76\x61\x6c\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x73\
\x74\x61\x63\x6b\x69\x64\x28\x63\x74\x78\x2c\x20\x26\x73\x74\x61\x63\x6b\x6d\
\x61\x70\x2c\x20\x30\x29\x3b\0\x09\x69\x66\x20\x28\x76\x61\x6c\x20\x3e\x20\x30\
\x29\0\x09\x09\x73\x74\x61\x63\x6b\x69\x64\x5f\x6b\x65\x72\x6e\x65\x6c\x20\x3d\
\x20\x32\x3b\0\x09\x76\x61\x6c\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x73\
\x74\x61\x63\x6b\x69\x64\x28\x63\x74\x78\x2c\x20\x26\x73\x74\x61\x63\x6b\x6d\
\x61\x70\x2c\x20\x42\x50\x46\x5f\x46\x5f\x55\x53\x45\x52\x5f\x53\x54\x41\x43\
\x4b\x29\x3b\0\x09\x09\x73\x74\x61\x63\x6b\x69\x64\x5f\x75\x73\x65\x72\x20\x3d\
\x20\x32\x3b\0\x09\x74\x72\x61\x63\x65\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\
\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x73\x74\x61\x63\x6b\
\x64\x61\x74\x61\x5f\x6d\x61\x70\x2c\x20\x26\x6b\x65\x79\x29\x3b\0\x09\x69\x66\
\x20\x28\x21\x74\x72\x61\x63\x65\x29\0\x09\x76\x61\x6c\x20\x3d\x20\x62\x70\x66\
\x5f\x67\x65\x74\x5f\x73\x74\x61\x63\x6b\x28\x63\x74\x78\x2c\x20\x74\x72\x61\
\x63\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x74\x61\x63\x6b\x5f\x74\x72\
\x61\x63\x65\x5f\x74\x29\x2c\x20\x30\x29\x3b\0\x09\x09\x73\x74\x61\x63\x6b\x5f\
\x6b\x65\x72\x6e\x65\x6c\x20\x3d\x20\x32\x3b\0\x09\x76\x61\x6c\x20\x3d\x20\x62\
\x70\x66\x5f\x67\x65\x74\x5f\x73\x74\x61\x63\x6b\x28\x63\x74\x78\x2c\x20\x74\
\x72\x61\x63\x65\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x74\x61\x63\x6b\x5f\
\x74\x72\x61\x63\x65\x5f\x74\x29\x2c\x20\x42\x50\x46\x5f\x46\x5f\x55\x53\x45\
\x52\x5f\x53\x54\x41\x43\x4b\x29\x3b\0\x09\x09\x73\x74\x61\x63\x6b\x5f\x75\x73\
\x65\x72\x20\x3d\x20\x32\x3b\0\x7d\0\x2e\x64\x61\x74\x61\0\x2e\x6d\x61\x70\x73\
\0\x6c\x69\x63\x65\x6e\x73\x65\0\x70\x65\x72\x66\x5f\x65\x76\x65\x6e\x74\0\0\
\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x2c\x01\0\0\x40\x01\0\0\0\
\0\0\0\x08\0\0\0\x24\x03\0\0\x01\0\0\0\0\0\0\0\x19\0\0\0\x10\0\0\0\x24\x03\0\0\
\x12\0\0\0\0\0\0\0\xd5\0\0\0\x5e\x01\0\0\0\x7c\0\0\x10\0\0\0\xd5\0\0\0\x73\x01\
\0\0\x08\x88\0\0\x18\0\0\0\xd5\0\0\0\x83\x01\0\0\x08\x94\0\0\x40\0\0\0\xd5\0\0\
\0\xae\x01\0\0\x06\x98\0\0\x48\0\0\0\xd5\0\0\0\xbc\x01\0\0\x12\x9c\0\0\x68\0\0\
\0\xd5\0\0\0\xd2\x01\0\0\x08\xa0\0\0\x90\0\0\0\xd5\0\0\0\xae\x01\0\0\x06\xa4\0\
\0\x98\0\0\0\xd5\0\0\0\x0c\x02\0\0\x10\xa8\0\0\xc0\0\0\0\xd5\0\0\0\0\0\0\0\0\0\
\0\0\xc8\0\0\0\xd5\0\0\0\x20\x02\0\0\x0a\xb0\0\0\xe8\0\0\0\xd5\0\0\0\x54\x02\0\
\0\x06\xb4\0\0\xf0\0\0\0\xd5\0\0\0\x61\x02\0\0\x08\xc0\0\0\x18\x01\0\0\xd5\0\0\
\0\xae\x01\0\0\x06\xc4\0\0\x20\x01\0\0\xd5\0\0\0\x9d\x02\0\0\x10\xc8\0\0\x40\
\x01\0\0\xd5\0\0\0\xb1\x02\0\0\x08\xd0\0\0\x68\x01\0\0\xd5\0\0\0\xae\x01\0\0\
\x06\xd4\0\0\x70\x01\0\0\xd5\0\0\0\xfc\x02\0\0\x0e\xd8\0\0\x90\x01\0\0\xd5\0\0\
\0\x0e\x03\0\0\x01\xe4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xd8\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\x68\x01\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x02\0\0\0\0\0\0\xa0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x20\x04\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x40\x04\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x28\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x04\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xbb\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x04\0\0\0\0\0\0\x70\
\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xca\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x04\0\0\0\0\0\0\x2f\x06\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcf\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x0b\0\0\0\0\0\0\x60\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __PERF_EVENT_STACKMAP_SKEL_H__ */
