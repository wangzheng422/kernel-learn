/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_XDP_BPF2BPF_SKEL_H__
#define __TEST_XDP_BPF2BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_xdp_bpf2bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *perf_buf_map;
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *trace_on_entry;
		struct bpf_program *trace_on_exit;
	} progs;
	struct {
		struct bpf_link *trace_on_entry;
		struct bpf_link *trace_on_exit;
	} links;
	struct test_xdp_bpf2bpf__bss {
		__u64 test_result_fentry;
		__u64 test_result_fexit;
	} *bss;
};

static void
test_xdp_bpf2bpf__destroy(struct test_xdp_bpf2bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_xdp_bpf2bpf__create_skeleton(struct test_xdp_bpf2bpf *obj);

static inline struct test_xdp_bpf2bpf *
test_xdp_bpf2bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_xdp_bpf2bpf *obj;
	int err;

	obj = (struct test_xdp_bpf2bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_xdp_bpf2bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_xdp_bpf2bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_xdp_bpf2bpf *
test_xdp_bpf2bpf__open(void)
{
	return test_xdp_bpf2bpf__open_opts(NULL);
}

static inline int
test_xdp_bpf2bpf__load(struct test_xdp_bpf2bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_xdp_bpf2bpf *
test_xdp_bpf2bpf__open_and_load(void)
{
	struct test_xdp_bpf2bpf *obj;
	int err;

	obj = test_xdp_bpf2bpf__open();
	if (!obj)
		return NULL;
	err = test_xdp_bpf2bpf__load(obj);
	if (err) {
		test_xdp_bpf2bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_xdp_bpf2bpf__attach(struct test_xdp_bpf2bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_xdp_bpf2bpf__detach(struct test_xdp_bpf2bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_xdp_bpf2bpf__elf_bytes(size_t *sz);

static inline int
test_xdp_bpf2bpf__create_skeleton(struct test_xdp_bpf2bpf *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "test_xdp_bpf2bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "perf_buf_map";
	s->maps[0].map = &obj->maps.perf_buf_map;

	s->maps[1].name = "test_xdp.bss";
	s->maps[1].map = &obj->maps.bss;
	s->maps[1].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "trace_on_entry";
	s->progs[0].prog = &obj->progs.trace_on_entry;
	s->progs[0].link = &obj->links.trace_on_entry;

	s->progs[1].name = "trace_on_exit";
	s->progs[1].prog = &obj->progs.trace_on_exit;
	s->progs[1].link = &obj->links.trace_on_exit;

	s->data = (void *)test_xdp_bpf2bpf__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *test_xdp_bpf2bpf__elf_bytes(size_t *sz)
{
	*sz = 3816;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe8\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0c\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x66\x65\
\x6e\x74\x72\x79\x2f\x46\x55\x4e\x43\0\x66\x65\x78\x69\x74\x2f\x46\x55\x4e\x43\
\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\x74\
\x65\x73\x74\x5f\x78\x64\x70\x5f\x62\x70\x66\x32\x62\x70\x66\x2e\x63\0\x74\x72\
\x61\x63\x65\x5f\x6f\x6e\x5f\x65\x6e\x74\x72\x79\0\x70\x65\x72\x66\x5f\x62\x75\
\x66\x5f\x6d\x61\x70\0\x74\x65\x73\x74\x5f\x72\x65\x73\x75\x6c\x74\x5f\x66\x65\
\x6e\x74\x72\x79\0\x74\x72\x61\x63\x65\x5f\x6f\x6e\x5f\x65\x78\x69\x74\0\x74\
\x65\x73\x74\x5f\x72\x65\x73\x75\x6c\x74\x5f\x66\x65\x78\x69\x74\0\x5f\x6c\x69\
\x63\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x66\x65\x6e\x74\x72\x79\x2f\x46\x55\x4e\
\x43\0\x2e\x72\x65\x6c\x66\x65\x78\x69\x74\x2f\x46\x55\x4e\x43\0\x2e\x42\x54\
\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x3b\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x4e\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\
\0\x5d\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x6a\0\0\0\x11\0\x06\
\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x7d\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x40\
\0\0\0\0\0\0\0\x8b\0\0\0\x11\0\x06\0\x08\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x9d\0\
\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x79\x16\0\0\0\0\0\0\x79\x61\
\x28\0\0\0\0\0\x79\x11\0\0\0\0\0\0\x79\x62\0\0\0\0\0\0\x79\x63\x08\0\0\0\0\0\
\x61\x11\0\0\0\0\0\0\x63\x1a\xf8\xff\0\0\0\0\x1f\x23\0\0\0\0\0\0\x63\x3a\xfc\
\xff\0\0\0\0\x67\x03\0\0\x20\0\0\0\x18\x01\0\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\
\x4f\x13\0\0\0\0\0\0\xbf\xa4\0\0\0\0\0\0\x07\x04\0\0\xf8\xff\xff\xff\xbf\x61\0\
\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x05\0\0\x08\0\0\0\x85\0\0\0\
\x79\0\0\0\x79\x61\x28\0\0\0\0\0\x79\x11\0\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x67\
\x01\0\0\x20\0\0\0\xc7\x01\0\0\x20\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x7b\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x79\x11\x08\0\0\0\0\0\
\x67\x01\0\0\x20\0\0\0\xc7\x01\0\0\x20\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x7b\x12\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\x01\0\0\0\
\x05\0\0\0\xc8\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\x18\0\0\0\0\0\0\0\x01\0\0\0\
\x08\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x70\x02\0\0\x70\x02\0\0\x8c\x03\0\0\
\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\
\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x04\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\0\0\0\0\x03\0\0\x04\x18\0\0\0\x19\0\0\0\
\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x22\0\0\0\x05\0\0\0\x80\0\0\0\
\x28\0\0\0\0\0\0\x0e\x06\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x09\0\0\0\x35\0\0\0\
\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x48\0\0\0\x08\0\0\
\0\x4c\0\0\0\x01\0\0\x0c\x0a\0\0\0\x5b\0\0\0\x06\0\0\x04\x30\0\0\0\x64\0\0\0\
\x0d\0\0\0\0\0\0\0\x69\0\0\0\x0d\0\0\0\x40\0\0\0\x72\0\0\0\x0d\0\0\0\x80\0\0\0\
\x7c\0\0\0\x0d\0\0\0\xc0\0\0\0\x8c\0\0\0\x0e\0\0\0\0\x01\0\0\x93\0\0\0\x0f\0\0\
\0\x40\x01\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\x97\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\
\0\0\0\0\0\0\0\0\x02\x10\0\0\0\xa5\0\0\0\x02\0\0\x04\x10\0\0\0\xb2\0\0\0\x11\0\
\0\0\0\0\0\0\xb6\0\0\0\x12\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x02\x14\0\0\0\xc2\0\0\
\0\0\0\0\x08\x13\0\0\0\xc8\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xd5\0\0\0\x01\0\
\0\x04\x04\0\0\0\xe0\0\0\0\x02\0\0\0\0\0\0\0\xe8\0\0\0\x01\0\0\x0c\x0a\0\0\0\
\xf6\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x16\0\0\0\
\x04\0\0\0\x04\0\0\0\xfb\0\0\0\0\0\0\x0e\x17\0\0\0\x01\0\0\0\x04\x01\0\0\0\0\0\
\x08\x09\0\0\0\x0a\x01\0\0\0\0\0\x0e\x19\0\0\0\x01\0\0\0\x1d\x01\0\0\0\0\0\x0e\
\x19\0\0\0\x01\0\0\0\x62\x03\0\0\x01\0\0\x0f\x04\0\0\0\x18\0\0\0\0\0\0\0\x04\0\
\0\0\x6a\x03\0\0\x02\0\0\x0f\x10\0\0\0\x1a\0\0\0\0\0\0\0\x08\0\0\0\x1b\0\0\0\
\x08\0\0\0\x08\0\0\0\x6f\x03\0\0\x01\0\0\x0f\x18\0\0\0\x07\0\0\0\0\0\0\0\x18\0\
\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\
\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\
\x70\x65\x72\x66\x5f\x62\x75\x66\x5f\x6d\x61\x70\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x74\x72\x61\x63\
\x65\x5f\x6f\x6e\x5f\x65\x6e\x74\x72\x79\0\x78\x64\x70\x5f\x62\x75\x66\x66\0\
\x64\x61\x74\x61\0\x64\x61\x74\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\
\x65\x74\x61\0\x64\x61\x74\x61\x5f\x68\x61\x72\x64\x5f\x73\x74\x61\x72\x74\0\
\x68\x61\x6e\x64\x6c\x65\0\x72\x78\x71\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x6c\x6f\x6e\x67\0\x78\x64\x70\x5f\x72\x78\x71\x5f\x69\x6e\x66\x6f\0\x64\x65\
\x76\0\x71\x75\x65\x75\x65\x5f\x69\x6e\x64\x65\x78\0\x5f\x5f\x75\x33\x32\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x6e\x65\x74\x5f\x64\x65\x76\x69\
\x63\x65\0\x69\x66\x69\x6e\x64\x65\x78\0\x74\x72\x61\x63\x65\x5f\x6f\x6e\x5f\
\x65\x78\x69\x74\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x5f\x5f\
\x75\x36\x34\0\x74\x65\x73\x74\x5f\x72\x65\x73\x75\x6c\x74\x5f\x66\x65\x6e\x74\
\x72\x79\0\x74\x65\x73\x74\x5f\x72\x65\x73\x75\x6c\x74\x5f\x66\x65\x78\x69\x74\
\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\
\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\
\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\
\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\
\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\
\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\
\x2f\x74\x65\x73\x74\x5f\x78\x64\x70\x5f\x62\x70\x66\x32\x62\x70\x66\x2e\x63\0\
\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x74\x72\x61\x63\x65\x5f\
\x6f\x6e\x5f\x65\x6e\x74\x72\x79\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x78\x64\
\x70\x5f\x62\x75\x66\x66\x20\x2a\x78\x64\x70\x29\0\x09\x6d\x65\x74\x61\x2e\x69\
\x66\x69\x6e\x64\x65\x78\x20\x3d\x20\x78\x64\x70\x2d\x3e\x72\x78\x71\x2d\x3e\
\x64\x65\x76\x2d\x3e\x69\x66\x69\x6e\x64\x65\x78\x3b\0\x09\x76\x6f\x69\x64\x20\
\x2a\x64\x61\x74\x61\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x28\x6c\x6f\
\x6e\x67\x29\x78\x64\x70\x2d\x3e\x64\x61\x74\x61\x3b\0\x09\x76\x6f\x69\x64\x20\
\x2a\x64\x61\x74\x61\x5f\x65\x6e\x64\x20\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\
\x29\x28\x6c\x6f\x6e\x67\x29\x78\x64\x70\x2d\x3e\x64\x61\x74\x61\x5f\x65\x6e\
\x64\x3b\0\x09\x6d\x65\x74\x61\x2e\x70\x6b\x74\x5f\x6c\x65\x6e\x20\x3d\x20\x64\
\x61\x74\x61\x5f\x65\x6e\x64\x20\x2d\x20\x64\x61\x74\x61\x3b\0\x09\x09\x20\x20\
\x20\x20\x20\x20\x20\x28\x28\x5f\x5f\x75\x36\x34\x29\x20\x6d\x65\x74\x61\x2e\
\x70\x6b\x74\x5f\x6c\x65\x6e\x20\x3c\x3c\x20\x33\x32\x29\x20\x7c\0\x09\x62\x70\
\x66\x5f\x78\x64\x70\x5f\x6f\x75\x74\x70\x75\x74\x28\x78\x64\x70\x2c\x20\x26\
\x70\x65\x72\x66\x5f\x62\x75\x66\x5f\x6d\x61\x70\x2c\0\x09\x74\x65\x73\x74\x5f\
\x72\x65\x73\x75\x6c\x74\x5f\x66\x65\x6e\x74\x72\x79\x20\x3d\x20\x78\x64\x70\
\x2d\x3e\x72\x78\x71\x2d\x3e\x64\x65\x76\x2d\x3e\x69\x66\x69\x6e\x64\x65\x78\
\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x74\x72\x61\x63\x65\
\x5f\x6f\x6e\x5f\x65\x78\x69\x74\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x78\x64\
\x70\x5f\x62\x75\x66\x66\x20\x2a\x78\x64\x70\x2c\x20\x69\x6e\x74\x20\x72\x65\
\x74\x29\0\x09\x74\x65\x73\x74\x5f\x72\x65\x73\x75\x6c\x74\x5f\x66\x65\x78\x69\
\x74\x20\x3d\x20\x72\x65\x74\x3b\0\x30\x3a\x35\0\x30\x3a\x30\0\x30\x3a\x31\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\x66\x65\
\x6e\x74\x72\x79\x2f\x46\x55\x4e\x43\0\x66\x65\x78\x69\x74\x2f\x46\x55\x4e\x43\
\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\x74\x01\0\0\x98\
\x01\0\0\x8c\0\0\0\x08\0\0\0\x75\x03\0\0\x01\0\0\0\0\0\0\0\x0b\0\0\0\x81\x03\0\
\0\x01\0\0\0\0\0\0\0\x15\0\0\0\x10\0\0\0\x75\x03\0\0\x12\0\0\0\0\0\0\0\x2f\x01\
\0\0\xb5\x01\0\0\x05\xb4\0\0\x08\0\0\0\x2f\x01\0\0\xe8\x01\0\0\x16\xcc\0\0\x10\
\0\0\0\x2f\x01\0\0\xe8\x01\0\0\x1b\xcc\0\0\x18\0\0\0\x2f\x01\0\0\x10\x02\0\0\
\x22\xc4\0\0\x20\0\0\0\x2f\x01\0\0\x37\x02\0\0\x26\xc0\0\0\x28\0\0\0\x2f\x01\0\
\0\xe8\x01\0\0\x20\xcc\0\0\x30\0\0\0\x2f\x01\0\0\xe8\x01\0\0\x0f\xcc\0\0\x38\0\
\0\0\x2f\x01\0\0\x66\x02\0\0\x1a\xd0\0\0\x40\0\0\0\x2f\x01\0\0\x66\x02\0\0\x0f\
\xd0\0\0\x48\0\0\0\x2f\x01\0\0\x87\x02\0\0\x0b\xd8\0\0\x60\0\0\0\x2f\x01\0\0\
\x87\x02\0\0\x27\xd8\0\0\x70\0\0\0\x2f\x01\0\0\0\0\0\0\0\0\0\0\x78\0\0\0\x2f\
\x01\0\0\xaf\x02\0\0\x02\xd4\0\0\xa0\0\0\0\x2f\x01\0\0\xd3\x02\0\0\x1c\xe8\0\0\
\xa8\0\0\0\x2f\x01\0\0\xd3\x02\0\0\x21\xe8\0\0\xb0\0\0\0\x2f\x01\0\0\xd3\x02\0\
\0\x26\xe8\0\0\xc8\0\0\0\x2f\x01\0\0\xd3\x02\0\0\x15\xe8\0\0\xe0\0\0\0\x2f\x01\
\0\0\xb5\x01\0\0\x05\xb4\0\0\x81\x03\0\0\x04\0\0\0\0\0\0\0\x2f\x01\0\0\x01\x03\
\0\0\x05\0\x01\0\x08\0\0\0\x2f\x01\0\0\x3c\x03\0\0\x16\x08\x01\0\x18\0\0\0\x2f\
\x01\0\0\x3c\x03\0\0\x14\x08\x01\0\x30\0\0\0\x2f\x01\0\0\x01\x03\0\0\x05\0\x01\
\0\x10\0\0\0\x75\x03\0\0\x08\0\0\0\x08\0\0\0\x0c\0\0\0\x56\x03\0\0\0\0\0\0\x10\
\0\0\0\x10\0\0\0\x5a\x03\0\0\0\0\0\0\x18\0\0\0\x0c\0\0\0\x5a\x03\0\0\0\0\0\0\
\x20\0\0\0\x0c\0\0\0\x5e\x03\0\0\0\0\0\0\x28\0\0\0\x14\0\0\0\x5a\x03\0\0\0\0\0\
\0\xa0\0\0\0\x0c\0\0\0\x56\x03\0\0\0\0\0\0\xa8\0\0\0\x10\0\0\0\x5a\x03\0\0\0\0\
\0\0\xb0\0\0\0\x14\0\0\0\x5a\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\xd3\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\
\0\xf0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\
\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x02\0\0\0\0\0\0\xf0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1d\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x02\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\x01\0\0\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x38\x03\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x40\x03\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x35\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\
\x03\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xa6\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\x03\0\0\0\0\0\
\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\xb6\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\x03\0\0\0\0\0\0\x10\
\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xc5\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x03\0\0\0\0\0\0\x14\x06\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xca\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x09\0\0\0\0\0\0\x44\x02\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __TEST_XDP_BPF2BPF_SKEL_H__ */
