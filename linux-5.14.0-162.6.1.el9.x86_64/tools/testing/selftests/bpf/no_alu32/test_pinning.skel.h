/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_PINNING_SKEL_H__
#define __TEST_PINNING_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_pinning {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *pinmap;
		struct bpf_map *nopinmap;
		struct bpf_map *nopinmap2;
	} maps;
};

static void
test_pinning__destroy(struct test_pinning *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_pinning__create_skeleton(struct test_pinning *obj);

static inline struct test_pinning *
test_pinning__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_pinning *obj;
	int err;

	obj = (struct test_pinning *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_pinning__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_pinning__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_pinning *
test_pinning__open(void)
{
	return test_pinning__open_opts(NULL);
}

static inline int
test_pinning__load(struct test_pinning *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_pinning *
test_pinning__open_and_load(void)
{
	struct test_pinning *obj;
	int err;

	obj = test_pinning__open();
	if (!obj)
		return NULL;
	err = test_pinning__load(obj);
	if (err) {
		test_pinning__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_pinning__attach(struct test_pinning *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_pinning__detach(struct test_pinning *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_pinning__elf_bytes(size_t *sz);

static inline int
test_pinning__create_skeleton(struct test_pinning *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "test_pinning";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "pinmap";
	s->maps[0].map = &obj->maps.pinmap;

	s->maps[1].name = "nopinmap";
	s->maps[1].map = &obj->maps.nopinmap;

	s->maps[2].name = "nopinmap2";
	s->maps[2].map = &obj->maps.nopinmap2;

	s->data = (void *)test_pinning__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *test_pinning__elf_bytes(size_t *sz)
{
	*sz = 1584;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x04\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x06\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6c\x69\
\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x74\x65\x73\x74\x5f\x70\x69\x6e\
\x6e\x69\x6e\x67\x2e\x63\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x70\x69\x6e\x6d\
\x61\x70\0\x6e\x6f\x70\x69\x6e\x6d\x61\x70\0\x6e\x6f\x70\x69\x6e\x6d\x61\x70\
\x32\0\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x1f\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2e\0\0\0\x11\0\x03\0\
\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x37\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x28\0\
\0\0\0\0\0\0\x3e\0\0\0\x11\0\x04\0\x28\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x47\0\0\
\0\x11\0\x04\0\x48\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x58\x02\0\0\x58\x02\0\0\x9e\0\0\0\0\0\0\0\0\0\0\x02\x03\0\0\
\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\
\0\x04\0\0\0\x02\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\
\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\x02\x08\0\0\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1f\0\0\0\0\0\0\x01\x04\0\0\
\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\0\0\x2c\0\0\0\0\0\0\x08\x0c\0\0\0\x32\0\0\
\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x05\0\0\x04\x28\0\0\0\x45\0\0\0\x01\0\
\0\0\0\0\0\0\x4a\0\0\0\x05\0\0\0\x40\0\0\0\x56\0\0\0\x07\0\0\0\x80\0\0\0\x5a\0\
\0\0\x0a\0\0\0\xc0\0\0\0\x60\0\0\0\x05\0\0\0\0\x01\0\0\x68\0\0\0\0\0\0\x0e\x0d\
\0\0\0\x01\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x45\0\0\0\x05\0\0\0\0\0\0\0\x4a\
\0\0\0\x05\0\0\0\x40\0\0\0\x56\0\0\0\x07\0\0\0\x80\0\0\0\x5a\0\0\0\x0a\0\0\0\
\xc0\0\0\0\x6f\0\0\0\0\0\0\x0e\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x12\0\0\0\
\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\x04\x28\
\0\0\0\x45\0\0\0\x05\0\0\0\0\0\0\0\x4a\0\0\0\x05\0\0\0\x40\0\0\0\x56\0\0\0\x07\
\0\0\0\x80\0\0\0\x5a\0\0\0\x0a\0\0\0\xc0\0\0\0\x60\0\0\0\x11\0\0\0\0\x01\0\0\
\x78\0\0\0\0\0\0\x0e\x13\0\0\0\x01\0\0\0\x82\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\
\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x15\0\0\0\x04\0\0\0\x04\0\0\0\x87\0\0\0\0\0\0\
\x0e\x16\0\0\0\x01\0\0\0\x90\0\0\0\x01\0\0\x0f\x04\0\0\0\x17\0\0\0\0\0\0\0\x04\
\0\0\0\x98\0\0\0\x03\0\0\x0f\x70\0\0\0\x0e\0\0\0\0\0\0\0\x28\0\0\0\x10\0\0\0\
\x28\0\0\0\x20\0\0\0\x14\0\0\0\x48\0\0\0\x28\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\
\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x75\x36\
\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\
\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\
\0\x76\x61\x6c\x75\x65\0\x70\x69\x6e\x6e\x69\x6e\x67\0\x70\x69\x6e\x6d\x61\x70\
\0\x6e\x6f\x70\x69\x6e\x6d\x61\x70\0\x6e\x6f\x70\x69\x6e\x6d\x61\x70\x32\0\x63\
\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\x2e\x6d\x61\x70\x73\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x56\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x03\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x28\x01\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x30\x01\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x51\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\
\x01\0\0\0\0\0\0\x0e\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0";
}

#endif /* __TEST_PINNING_SKEL_H__ */
