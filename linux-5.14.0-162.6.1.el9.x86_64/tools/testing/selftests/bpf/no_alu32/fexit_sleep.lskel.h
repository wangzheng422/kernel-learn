/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
/* THIS FILE IS AUTOGENERATED! */
#ifndef __FEXIT_SLEEP_LSKEL_SKEL_H__
#define __FEXIT_SLEEP_LSKEL_SKEL_H__

#include <stdlib.h>
#include <bpf/bpf.h>
#include <bpf/skel_internal.h>

struct fexit_sleep_lskel {
	struct bpf_loader_ctx ctx;
	struct {
		struct bpf_map_desc bss;
	} maps;
	struct {
		struct bpf_prog_desc nanosleep_fentry;
		struct bpf_prog_desc nanosleep_fexit;
	} progs;
	struct {
		int nanosleep_fentry_fd;
		int nanosleep_fexit_fd;
	} links;
	struct fexit_sleep_lskel__bss {
		int pid;
		int fentry_cnt;
		int fexit_cnt;
	} *bss;
};

static inline int
fexit_sleep_lskel__nanosleep_fentry__attach(struct fexit_sleep_lskel *skel)
{
	int prog_fd = skel->progs.nanosleep_fentry.prog_fd;
	int fd = bpf_raw_tracepoint_open(NULL, prog_fd);

	if (fd > 0)
		skel->links.nanosleep_fentry_fd = fd;
	return fd;
}

static inline int
fexit_sleep_lskel__nanosleep_fexit__attach(struct fexit_sleep_lskel *skel)
{
	int prog_fd = skel->progs.nanosleep_fexit.prog_fd;
	int fd = bpf_raw_tracepoint_open(NULL, prog_fd);

	if (fd > 0)
		skel->links.nanosleep_fexit_fd = fd;
	return fd;
}

static inline int
fexit_sleep_lskel__attach(struct fexit_sleep_lskel *skel)
{
	int ret = 0;

	ret = ret < 0 ? ret : fexit_sleep_lskel__nanosleep_fentry__attach(skel);
	ret = ret < 0 ? ret : fexit_sleep_lskel__nanosleep_fexit__attach(skel);
	return ret < 0 ? ret : 0;
}

static inline void
fexit_sleep_lskel__detach(struct fexit_sleep_lskel *skel)
{
	skel_closenz(skel->links.nanosleep_fentry_fd);
	skel_closenz(skel->links.nanosleep_fexit_fd);
}
static void
fexit_sleep_lskel__destroy(struct fexit_sleep_lskel *skel)
{
	if (!skel)
		return;
	fexit_sleep_lskel__detach(skel);
	skel_closenz(skel->progs.nanosleep_fentry.prog_fd);
	skel_closenz(skel->progs.nanosleep_fexit.prog_fd);
	munmap(skel->bss, 4096);
	skel_closenz(skel->maps.bss.map_fd);
	free(skel);
}
static inline struct fexit_sleep_lskel *
fexit_sleep_lskel__open(void)
{
	struct fexit_sleep_lskel *skel;

	skel = calloc(sizeof(*skel), 1);
	if (!skel)
		goto cleanup;
	skel->ctx.sz = (void *)&skel->links - (void *)skel;
	skel->bss =
		mmap(NULL, 4096, PROT_READ | PROT_WRITE,
		     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
	if (skel->bss == (void *) -1)
		goto cleanup;
	memcpy(skel->bss, (void *)"\
\0\0\0\0\0\0\0\0\0\0\0\0", 12);
	skel->maps.bss.initial_value = (__u64)(long)skel->bss;
	return skel;
cleanup:
	fexit_sleep_lskel__destroy(skel);
	return NULL;
}

static inline int
fexit_sleep_lskel__load(struct fexit_sleep_lskel *skel)
{
	struct bpf_load_and_run_opts opts = {};
	int err;

	opts.ctx = (struct bpf_loader_ctx *)skel;
	opts.data_sz = 3024;
	opts.data = (void *)"\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x18\x01\0\0\x18\x01\0\0\x03\x02\0\0\0\0\0\0\0\0\0\x02\x02\0\
\0\0\x01\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\x14\
\0\0\0\x01\0\0\0\x18\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x1c\0\0\0\x01\0\0\
\x0c\x03\0\0\0\x2d\0\0\0\x01\0\0\x0c\x03\0\0\0\x3d\0\0\0\0\0\0\x01\x01\0\0\0\
\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x07\0\0\0\x09\0\0\0\x04\0\0\0\x42\0\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\0\x56\0\0\0\0\0\0\x0e\x08\0\0\0\x01\0\0\0\x5e\0\0\
\0\0\0\0\x0e\x04\0\0\0\x01\0\0\0\x62\0\0\0\0\0\0\x0e\x04\0\0\0\x01\0\0\0\x6d\0\
\0\0\0\0\0\x0e\x04\0\0\0\x01\0\0\0\xc1\x01\0\0\x01\0\0\x0f\x04\0\0\0\x0a\0\0\0\
\0\0\0\0\x04\0\0\0\xc9\x01\0\0\x03\0\0\x0f\x0c\0\0\0\x0b\0\0\0\0\0\0\0\x04\0\0\
\0\x0c\0\0\0\x04\0\0\0\x04\0\0\0\x0d\0\0\0\x08\0\0\0\x04\0\0\0\0\x75\x6e\x73\
\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\
\x69\x6e\x74\0\x6e\x61\x6e\x6f\x73\x6c\x65\x65\x70\x5f\x66\x65\x6e\x74\x72\x79\
\0\x6e\x61\x6e\x6f\x73\x6c\x65\x65\x70\x5f\x66\x65\x78\x69\x74\0\x63\x68\x61\
\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\
\x5f\0\x4c\x49\x43\x45\x4e\x53\x45\0\x70\x69\x64\0\x66\x65\x6e\x74\x72\x79\x5f\
\x63\x6e\x74\0\x66\x65\x78\x69\x74\x5f\x63\x6e\x74\0\x2f\x72\x6f\x6f\x74\x2f\
\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\
\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\
\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\
\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\
\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\
\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\x2f\x66\x65\x78\x69\x74\
\x5f\x73\x6c\x65\x65\x70\x2e\x63\0\x09\x69\x66\x20\x28\x62\x70\x66\x5f\x67\x65\
\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\
\x29\x20\x3e\x3e\x20\x33\x32\x20\x21\x3d\x20\x70\x69\x64\x29\0\x09\x66\x65\x6e\
\x74\x72\x79\x5f\x63\x6e\x74\x2b\x2b\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\
\x52\x4f\x47\x28\x6e\x61\x6e\x6f\x73\x6c\x65\x65\x70\x5f\x66\x65\x6e\x74\x72\
\x79\x2c\x20\x63\x6f\x6e\x73\x74\x20\x73\x74\x72\x75\x63\x74\x20\x70\x74\x5f\
\x72\x65\x67\x73\x20\x2a\x72\x65\x67\x73\x29\0\x09\x66\x65\x78\x69\x74\x5f\x63\
\x6e\x74\x2b\x2b\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\x6e\
\x61\x6e\x6f\x73\x6c\x65\x65\x70\x5f\x66\x65\x78\x69\x74\x2c\x20\x63\x6f\x6e\
\x73\x74\x20\x73\x74\x72\x75\x63\x74\x20\x70\x74\x5f\x72\x65\x67\x73\x20\x2a\
\x72\x65\x67\x73\x2c\x20\x69\x6e\x74\x20\x72\x65\x74\x29\0\x6c\x69\x63\x65\x6e\
\x73\x65\0\x2e\x62\x73\x73\0\x66\x65\x6e\x74\x72\x79\x2f\x5f\x5f\x78\x36\x34\
\x5f\x73\x79\x73\x5f\x6e\x61\x6e\x6f\x73\x6c\x65\x65\x70\0\x66\x65\x78\x69\x74\
\x2f\x5f\x5f\x78\x36\x34\x5f\x73\x79\x73\x5f\x6e\x61\x6e\x6f\x73\x6c\x65\x65\
\x70\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x33\x03\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x02\0\0\0\x04\0\0\0\x0c\0\0\0\x01\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\x66\
\x65\x78\x69\x74\x5f\x73\x6c\x2e\x62\x73\x73\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\x85\
\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\
\x11\0\0\0\0\0\0\x67\x01\0\0\x20\0\0\0\xc7\x01\0\0\x20\0\0\0\x5d\x10\x05\0\0\0\
\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x61\x12\0\0\0\0\0\0\x07\x02\0\0\x01\
\0\0\0\x63\x21\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\
\0\0\0\0\0\x77\0\0\0\xf8\0\0\0\x06\x40\0\0\x01\0\0\0\x77\0\0\0\xf8\0\0\0\x21\
\x40\0\0\x02\0\0\0\x77\0\0\0\xf8\0\0\0\x2a\x40\0\0\x07\0\0\0\x77\0\0\0\xf8\0\0\
\0\x06\x40\0\0\x08\0\0\0\x77\0\0\0\x26\x01\0\0\x0c\x4c\0\0\x0d\0\0\0\x77\0\0\0\
\x35\x01\0\0\x05\x38\0\0\x1a\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6e\x61\x6e\x6f\x73\x6c\x65\x65\
\x70\x5f\x66\x65\x6e\x74\x72\0\0\0\0\0\x18\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\x01\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x5f\x5f\x78\x36\x34\x5f\x73\x79\x73\x5f\x6e\x61\x6e\x6f\x73\x6c\
\x65\x65\x70\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\
\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x67\x01\0\0\x20\
\0\0\0\xc7\x01\0\0\x20\0\0\0\x5d\x10\x05\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\x61\x12\0\0\0\0\0\0\x07\x02\0\0\x01\0\0\0\x63\x21\0\0\0\0\0\0\xb7\0\
\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\x77\0\0\0\xf8\0\0\0\
\x06\x68\0\0\x01\0\0\0\x77\0\0\0\xf8\0\0\0\x21\x68\0\0\x02\0\0\0\x77\0\0\0\xf8\
\0\0\0\x2a\x68\0\0\x07\0\0\0\x77\0\0\0\xf8\0\0\0\x06\x68\0\0\x08\0\0\0\x77\0\0\
\0\x70\x01\0\0\x0b\x74\0\0\x0d\0\0\0\x77\0\0\0\x7e\x01\0\0\x05\x60\0\0\x1a\0\0\
\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x6e\x61\x6e\x6f\x73\x6c\x65\x65\x70\x5f\x66\x65\x78\x69\x74\0\0\
\0\0\0\x19\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\0\0\0\0\
\0\0\0\0\x06\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\x5f\x78\x36\
\x34\x5f\x73\x79\x73\x5f\x6e\x61\x6e\x6f\x73\x6c\x65\x65\x70\0\0\0\0\0";
	opts.insns_sz = 2000;
	opts.insns = (void *)"\
\xbf\x16\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\x78\xff\xff\xff\xb7\x02\0\
\0\x88\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\x05\0\x14\0\0\0\0\0\x61\
\xa1\x78\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x7c\xff\
\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x80\xff\0\0\0\0\xd5\
\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x84\xff\0\0\0\0\xd5\x01\x01\0\0\
\0\0\0\x85\0\0\0\xa8\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x01\0\0\0\0\
\0\0\xd5\x01\x02\0\0\0\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\xbf\x70\0\0\
\0\0\0\0\x95\0\0\0\0\0\0\0\x61\x60\x08\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\x50\x08\0\0\x63\x01\0\0\0\0\0\0\x61\x60\x0c\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\
\0\0\x4c\x08\0\0\x63\x01\0\0\0\0\0\0\x79\x60\x10\0\0\0\0\0\x18\x61\0\0\0\0\0\0\
\0\0\0\0\x40\x08\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\
\x18\x61\0\0\0\0\0\0\0\0\0\0\x38\x08\0\0\x7b\x01\0\0\0\0\0\0\xb7\x01\0\0\x12\0\
\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\x38\x08\0\0\xb7\x03\0\0\x1c\0\0\0\x85\0\0\0\
\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\xd4\xff\0\0\0\0\x63\x7a\x78\xff\0\0\0\0\
\x61\xa0\x78\xff\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x88\x08\0\0\x63\x01\0\0\0\
\0\0\0\x61\x60\x20\0\0\0\0\0\x15\0\x03\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\x64\x08\0\0\x63\x01\0\0\0\0\0\0\xb7\x01\0\0\0\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\
\0\x58\x08\0\0\xb7\x03\0\0\x40\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\
\xc5\x07\xc3\xff\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\x71\0\0\0\0\0\
\0\x79\x63\x18\0\0\0\0\0\x15\x03\x04\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x98\
\x08\0\0\xb7\x02\0\0\x0c\0\0\0\x85\0\0\0\x94\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x61\x20\0\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xb0\x08\0\0\x63\x01\0\
\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xa8\x08\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\xb8\x08\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x98\x08\0\0\x18\
\x61\0\0\0\0\0\0\0\0\0\0\xc0\x08\0\0\x7b\x01\0\0\0\0\0\0\xb7\x01\0\0\x02\0\0\0\
\x18\x62\0\0\0\0\0\0\0\0\0\0\xb0\x08\0\0\xb7\x03\0\0\x20\0\0\0\x85\0\0\0\xa6\0\
\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\xa3\xff\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\
\xd0\x08\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xc8\x09\0\0\x7b\x01\0\0\0\0\0\0\x18\
\x60\0\0\0\0\0\0\0\0\0\0\xd8\x08\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xc0\x09\0\0\
\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x50\x09\0\0\x18\x61\0\0\0\0\0\
\0\0\0\0\0\x08\x0a\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x58\x09\
\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x18\x0a\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x30\x0a\0\0\x7b\x01\0\0\0\0\
\0\0\x61\x60\x08\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xd0\x09\0\0\x63\x01\0\0\
\0\0\0\0\x61\x60\x0c\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xd4\x09\0\0\x63\x01\
\0\0\0\0\0\0\x79\x60\x10\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xd8\x09\0\0\x7b\
\x01\0\0\0\0\0\0\x61\xa0\x78\xff\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\0\x0a\0\0\
\x63\x01\0\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x38\x0a\0\0\xb7\x02\0\0\x14\0\
\0\0\xb7\x03\0\0\x0c\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\xa7\0\0\0\xbf\x07\0\0\
\0\0\0\0\xc5\x07\x72\xff\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xb8\x09\0\0\x63\
\x70\x6c\0\0\0\0\0\x77\x07\0\0\x20\0\0\0\x63\x70\x70\0\0\0\0\0\xb7\x01\0\0\x05\
\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\xb8\x09\0\0\xb7\x03\0\0\x80\0\0\0\x85\0\0\0\
\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x28\x0a\0\0\x61\x01\
\0\0\0\0\0\0\xd5\x01\x02\0\0\0\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\xc5\
\x07\x60\xff\0\0\0\0\x63\x7a\x80\xff\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x50\
\x0a\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x48\x0b\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\
\0\0\0\0\0\0\0\0\0\x58\x0a\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x40\x0b\0\0\x7b\x01\
\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xd0\x0a\0\0\x18\x61\0\0\0\0\0\0\0\0\0\
\0\x88\x0b\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xd8\x0a\0\0\x18\
\x61\0\0\0\0\0\0\0\0\0\0\x98\x0b\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xb0\x0b\0\0\x7b\x01\0\0\0\0\0\0\x61\
\x60\x08\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x50\x0b\0\0\x63\x01\0\0\0\0\0\0\
\x61\x60\x0c\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x54\x0b\0\0\x63\x01\0\0\0\0\
\0\0\x79\x60\x10\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x58\x0b\0\0\x7b\x01\0\0\
\0\0\0\0\x61\xa0\x78\xff\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x80\x0b\0\0\x63\
\x01\0\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xb8\x0b\0\0\xb7\x02\0\0\x14\0\0\0\
\xb7\x03\0\0\x0c\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\xa7\0\0\0\xbf\x07\0\0\0\0\
\0\0\xc5\x07\x2e\xff\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x38\x0b\0\0\x63\x70\
\x6c\0\0\0\0\0\x77\x07\0\0\x20\0\0\0\x63\x70\x70\0\0\0\0\0\xb7\x01\0\0\x05\0\0\
\0\x18\x62\0\0\0\0\0\0\0\0\0\0\x38\x0b\0\0\xb7\x03\0\0\x80\0\0\0\x85\0\0\0\xa6\
\0\0\0\xbf\x07\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xa8\x0b\0\0\x61\x01\0\0\
\0\0\0\0\xd5\x01\x02\0\0\0\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\xc5\x07\
\x1c\xff\0\0\0\0\x63\x7a\x84\xff\0\0\0\0\x61\xa1\x78\xff\0\0\0\0\xd5\x01\x02\0\
\0\0\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa0\x80\xff\0\0\0\0\x63\
\x06\x28\0\0\0\0\0\x61\xa0\x84\xff\0\0\0\0\x63\x06\x2c\0\0\0\0\0\x18\x61\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x61\x10\0\0\0\0\0\0\x63\x06\x18\0\0\0\0\0\xb7\0\0\0\0\0\
\0\0\x95\0\0\0\0\0\0\0";
	err = bpf_load_and_run(&opts);
	if (err < 0)
		return err;
	skel->bss =
		mmap(skel->bss, 4096, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_FIXED,
			skel->maps.bss.map_fd, 0);
	return 0;
}

static inline struct fexit_sleep_lskel *
fexit_sleep_lskel__open_and_load(void)
{
	struct fexit_sleep_lskel *skel;

	skel = fexit_sleep_lskel__open();
	if (!skel)
		return NULL;
	if (fexit_sleep_lskel__load(skel)) {
		fexit_sleep_lskel__destroy(skel);
		return NULL;
	}
	return skel;
}

#endif /* __FEXIT_SLEEP_LSKEL_SKEL_H__ */
