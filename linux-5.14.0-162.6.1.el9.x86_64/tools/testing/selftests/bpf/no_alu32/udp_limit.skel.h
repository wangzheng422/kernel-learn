/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __UDP_LIMIT_SKEL_H__
#define __UDP_LIMIT_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct udp_limit {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *sk_map;
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *sock;
		struct bpf_program *sock_release;
	} progs;
	struct {
		struct bpf_link *sock;
		struct bpf_link *sock_release;
	} links;
	struct udp_limit__bss {
		int invocations;
		int in_use;
	} *bss;
};

static void
udp_limit__destroy(struct udp_limit *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
udp_limit__create_skeleton(struct udp_limit *obj);

static inline struct udp_limit *
udp_limit__open_opts(const struct bpf_object_open_opts *opts)
{
	struct udp_limit *obj;
	int err;

	obj = (struct udp_limit *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = udp_limit__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	udp_limit__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct udp_limit *
udp_limit__open(void)
{
	return udp_limit__open_opts(NULL);
}

static inline int
udp_limit__load(struct udp_limit *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct udp_limit *
udp_limit__open_and_load(void)
{
	struct udp_limit *obj;
	int err;

	obj = udp_limit__open();
	if (!obj)
		return NULL;
	err = udp_limit__load(obj);
	if (err) {
		udp_limit__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
udp_limit__attach(struct udp_limit *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
udp_limit__detach(struct udp_limit *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *udp_limit__elf_bytes(size_t *sz);

static inline int
udp_limit__create_skeleton(struct udp_limit *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "udp_limit";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "sk_map";
	s->maps[0].map = &obj->maps.sk_map;

	s->maps[1].name = "udp_limi.bss";
	s->maps[1].map = &obj->maps.bss;
	s->maps[1].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "sock";
	s->progs[0].prog = &obj->progs.sock;
	s->progs[0].link = &obj->links.sock;

	s->progs[1].name = "sock_release";
	s->progs[1].prog = &obj->progs.sock_release;
	s->progs[1].link = &obj->links.sock_release;

	s->data = (void *)udp_limit__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *udp_limit__elf_bytes(size_t *sz)
{
	*sz = 3688;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xa8\x0b\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x63\x67\
\x72\x6f\x75\x70\x2f\x73\x6f\x63\x6b\x5f\x63\x72\x65\x61\x74\x65\0\x63\x67\x72\
\x6f\x75\x70\x2f\x73\x6f\x63\x6b\x5f\x72\x65\x6c\x65\x61\x73\x65\0\x2e\x62\x73\
\x73\0\x2e\x6d\x61\x70\x73\0\x75\x64\x70\x5f\x6c\x69\x6d\x69\x74\x2e\x63\0\x4c\
\x42\x42\x30\x5f\x34\0\x4c\x42\x42\x31\x5f\x34\0\x73\x6f\x63\x6b\0\x73\x6b\x5f\
\x6d\x61\x70\0\x69\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x73\0\x69\x6e\x5f\x75\
\x73\x65\0\x73\x6f\x63\x6b\x5f\x72\x65\x6c\x65\x61\x73\x65\0\x2e\x72\x65\x6c\
\x63\x67\x72\x6f\x75\x70\x2f\x73\x6f\x63\x6b\x5f\x63\x72\x65\x61\x74\x65\0\x2e\
\x72\x65\x6c\x63\x67\x72\x6f\x75\x70\x2f\x73\x6f\x63\x6b\x5f\x72\x65\x6c\x65\
\x61\x73\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x43\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4f\0\0\
\0\0\0\x03\0\xd8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x56\0\0\0\0\0\x04\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5d\
\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xe8\0\0\0\0\0\0\0\x62\0\0\0\x11\0\x06\0\0\0\
\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x69\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\x75\0\0\0\x11\0\x05\0\x04\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x7c\0\0\0\
\x12\0\x04\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\xbf\x12\0\0\0\0\0\0\xb7\x06\0\0\
\x01\0\0\0\x61\x21\x08\0\0\0\0\0\x55\x01\x17\0\x02\0\0\0\xb7\x06\0\0\0\0\0\0\
\xb7\x07\0\0\x01\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x03\0\0\0\0\0\0\
\xb7\x04\0\0\x01\0\0\0\x85\0\0\0\x6b\0\0\0\x15\0\x0f\0\0\0\0\0\x18\x01\0\0\xef\
\xbe\xad\xde\0\0\0\0\0\0\0\0\x63\x10\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xc3\x71\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x12\0\0\0\0\
\0\0\x67\x02\0\0\x20\0\0\0\xc7\x02\0\0\x20\0\0\0\x65\x02\x03\0\0\0\0\0\xb7\x06\
\0\0\x01\0\0\0\xb7\x02\0\0\x01\0\0\0\xc3\x21\0\0\0\0\0\0\xbf\x60\0\0\0\0\0\0\
\x95\0\0\0\0\0\0\0\xbf\x12\0\0\0\0\0\0\xb7\x06\0\0\x01\0\0\0\x61\x21\x08\0\0\0\
\0\0\x55\x01\x14\0\x02\0\0\0\xb7\x06\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xb7\x03\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x6b\0\0\0\x15\0\x0d\0\
\0\0\0\0\x61\x01\0\0\0\0\0\0\x18\x02\0\0\xef\xbe\xad\xde\0\0\0\0\0\0\0\0\x5d\
\x21\x09\0\0\0\0\0\xb7\x06\0\0\x01\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x01\0\0\0\xc3\x21\0\0\0\0\0\0\xb7\x01\0\0\xff\xff\xff\xff\x18\x02\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc3\x12\0\0\0\0\0\0\xbf\x60\0\0\0\0\0\0\x95\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\
\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x78\0\0\0\0\0\0\0\x01\0\0\0\x08\0\0\0\x90\0\0\
\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x80\0\0\0\
\0\0\0\0\x01\0\0\0\x08\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x9f\xeb\x01\
\0\x18\0\0\0\0\0\0\0\x48\x02\0\0\x48\x02\0\0\x55\x03\0\0\0\0\0\0\0\0\0\x02\x03\
\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\
\0\0\0\x04\0\0\0\x18\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\
\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\x02\x02\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\
\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x28\0\0\0\x07\0\0\0\x80\0\0\0\x2c\0\0\0\x07\0\
\0\0\xc0\0\0\0\x32\0\0\0\0\0\0\x0e\x08\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0b\0\
\0\0\x39\0\0\0\x0e\0\0\x04\x50\0\0\0\x42\0\0\0\x0c\0\0\0\0\0\0\0\x4f\0\0\0\x0c\
\0\0\0\x20\0\0\0\x19\0\0\0\x0c\0\0\0\x40\0\0\0\x56\0\0\0\x0c\0\0\0\x60\0\0\0\
\x5f\0\0\0\x0c\0\0\0\x80\0\0\0\x64\0\0\0\x0c\0\0\0\xa0\0\0\0\x6d\0\0\0\x0c\0\0\
\0\xc0\0\0\0\x75\0\0\0\x0e\0\0\0\xe0\0\0\0\x7d\0\0\0\x0c\0\0\0\x60\x01\0\0\x86\
\0\0\0\x0c\0\0\0\x80\x01\0\0\x8f\0\0\0\x0c\0\0\0\xa0\x01\0\0\x97\0\0\0\x0e\0\0\
\0\xc0\x01\0\0\x9f\0\0\0\x0c\0\0\0\x40\x02\0\0\xa5\0\0\0\x0f\0\0\0\x60\x02\0\0\
\xb6\0\0\0\0\0\0\x08\x0d\0\0\0\xbc\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x0c\0\0\0\x04\0\0\0\x04\0\0\0\xc9\0\0\0\0\0\0\x08\x02\0\0\0\
\0\0\0\0\x01\0\0\x0d\x02\0\0\0\xcf\0\0\0\x0a\0\0\0\xd3\0\0\0\x01\0\0\x0c\x10\0\
\0\0\xd8\0\0\0\x01\0\0\x0c\x10\0\0\0\xe5\0\0\0\0\0\0\x0e\x02\0\0\0\x01\0\0\0\
\xf1\0\0\0\0\0\0\x0e\x02\0\0\0\x01\0\0\0\x23\x03\0\0\x02\0\0\x0f\x08\0\0\0\x13\
\0\0\0\0\0\0\0\x04\0\0\0\x14\0\0\0\x04\0\0\0\x04\0\0\0\x28\x03\0\0\x01\0\0\x0f\
\x20\0\0\0\x09\0\0\0\0\0\0\0\x20\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\x41\
\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\x65\0\x6d\
\x61\x70\x5f\x66\x6c\x61\x67\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x73\x6b\
\x5f\x6d\x61\x70\0\x62\x70\x66\x5f\x73\x6f\x63\x6b\0\x62\x6f\x75\x6e\x64\x5f\
\x64\x65\x76\x5f\x69\x66\0\x66\x61\x6d\x69\x6c\x79\0\x70\x72\x6f\x74\x6f\x63\
\x6f\x6c\0\x6d\x61\x72\x6b\0\x70\x72\x69\x6f\x72\x69\x74\x79\0\x73\x72\x63\x5f\
\x69\x70\x34\0\x73\x72\x63\x5f\x69\x70\x36\0\x73\x72\x63\x5f\x70\x6f\x72\x74\0\
\x64\x73\x74\x5f\x70\x6f\x72\x74\0\x64\x73\x74\x5f\x69\x70\x34\0\x64\x73\x74\
\x5f\x69\x70\x36\0\x73\x74\x61\x74\x65\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\
\x6d\x61\x70\x70\x69\x6e\x67\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x5f\x5f\x73\x33\x32\0\x63\x74\x78\0\x73\x6f\x63\x6b\
\0\x73\x6f\x63\x6b\x5f\x72\x65\x6c\x65\x61\x73\x65\0\x69\x6e\x76\x6f\x63\x61\
\x74\x69\x6f\x6e\x73\0\x69\x6e\x5f\x75\x73\x65\0\x2f\x72\x6f\x6f\x74\x2f\x72\
\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\
\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\
\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\
\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\
\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\
\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\x2f\x75\x64\x70\x5f\x6c\x69\
\x6d\x69\x74\x2e\x63\0\x69\x6e\x74\x20\x73\x6f\x63\x6b\x28\x73\x74\x72\x75\x63\
\x74\x20\x62\x70\x66\x5f\x73\x6f\x63\x6b\x20\x2a\x63\x74\x78\x29\0\x09\x69\x66\
\x20\x28\x63\x74\x78\x2d\x3e\x74\x79\x70\x65\x20\x21\x3d\x20\x53\x4f\x43\x4b\
\x5f\x44\x47\x52\x41\x4d\x29\0\x09\x73\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x20\
\x3d\x20\x62\x70\x66\x5f\x73\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x5f\x67\x65\
\x74\x28\x26\x73\x6b\x5f\x6d\x61\x70\x2c\x20\x63\x74\x78\x2c\x20\x30\x2c\0\x09\
\x69\x66\x20\x28\x21\x73\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x29\0\x09\x2a\x73\
\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x20\x3d\x20\x30\x78\x64\x65\x61\x64\x62\
\x65\x65\x66\x3b\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\
\x6e\x64\x5f\x61\x64\x64\x28\x26\x69\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x73\
\x2c\x20\x31\x29\x3b\0\x09\x69\x66\x20\x28\x69\x6e\x5f\x75\x73\x65\x20\x3e\x20\
\x30\x29\x20\x7b\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\
\x6e\x64\x5f\x61\x64\x64\x28\x26\x69\x6e\x5f\x75\x73\x65\x2c\x20\x31\x29\x3b\0\
\x7d\0\x69\x6e\x74\x20\x73\x6f\x63\x6b\x5f\x72\x65\x6c\x65\x61\x73\x65\x28\x73\
\x74\x72\x75\x63\x74\x20\x62\x70\x66\x5f\x73\x6f\x63\x6b\x20\x2a\x63\x74\x78\
\x29\0\x09\x73\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x20\x3d\x20\x62\x70\x66\x5f\
\x73\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x5f\x67\x65\x74\x28\x26\x73\x6b\x5f\
\x6d\x61\x70\x2c\x20\x63\x74\x78\x2c\x20\x30\x2c\x20\x30\x29\x3b\0\x09\x69\x66\
\x20\x28\x21\x73\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x20\x7c\x7c\x20\x2a\x73\
\x6b\x5f\x73\x74\x6f\x72\x61\x67\x65\x20\x21\x3d\x20\x30\x78\x64\x65\x61\x64\
\x62\x65\x65\x66\x29\0\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\
\x61\x6e\x64\x5f\x61\x64\x64\x28\x26\x69\x6e\x5f\x75\x73\x65\x2c\x20\x2d\x31\
\x29\x3b\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\x63\x67\x72\x6f\x75\x70\x2f\
\x73\x6f\x63\x6b\x5f\x63\x72\x65\x61\x74\x65\0\x63\x67\x72\x6f\x75\x70\x2f\x73\
\x6f\x63\x6b\x5f\x72\x65\x6c\x65\x61\x73\x65\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\
\0\0\0\x24\0\0\0\x24\0\0\0\x64\x01\0\0\x88\x01\0\0\0\0\0\0\x08\0\0\0\x2e\x03\0\
\0\x01\0\0\0\0\0\0\0\x11\0\0\0\x41\x03\0\0\x01\0\0\0\0\0\0\0\x12\0\0\0\x10\0\0\
\0\x2e\x03\0\0\x0b\0\0\0\0\0\0\0\xf8\0\0\0\x77\x01\0\0\0\x44\0\0\x10\0\0\0\xf8\
\0\0\0\x96\x01\0\0\x0b\x58\0\0\x18\0\0\0\xf8\0\0\0\x96\x01\0\0\x06\x58\0\0\x30\
\0\0\0\xf8\0\0\0\xb4\x01\0\0\x0f\x64\0\0\x58\0\0\0\xf8\0\0\0\xe6\x01\0\0\x06\
\x6c\0\0\x70\0\0\0\xf8\0\0\0\xf8\x01\0\0\x0e\x74\0\0\x78\0\0\0\xf8\0\0\0\x13\
\x02\0\0\x02\x7c\0\0\x90\0\0\0\xf8\0\0\0\x3b\x02\0\0\x06\x84\0\0\xb8\0\0\0\xf8\
\0\0\0\x3b\x02\0\0\x06\x84\0\0\xc8\0\0\0\xf8\0\0\0\x4e\x02\0\0\x02\xa4\0\0\xd8\
\0\0\0\xf8\0\0\0\x71\x02\0\0\x01\xac\0\0\x41\x03\0\0\x0a\0\0\0\0\0\0\0\xf8\0\0\
\0\x73\x02\0\0\0\xb8\0\0\x10\0\0\0\xf8\0\0\0\x96\x01\0\0\x0b\xcc\0\0\x18\0\0\0\
\xf8\0\0\0\x96\x01\0\0\x06\xcc\0\0\x28\0\0\0\xf8\0\0\0\x9a\x02\0\0\x0f\xd8\0\0\
\x50\0\0\0\xf8\0\0\0\xd0\x02\0\0\x12\xdc\0\0\x58\0\0\0\xf8\0\0\0\xd0\x02\0\0\
\x15\xdc\0\0\x70\0\0\0\xf8\0\0\0\xd0\x02\0\0\x06\xdc\0\0\x80\0\0\0\xf8\0\0\0\
\x13\x02\0\0\x02\xe8\0\0\xa8\0\0\0\xf8\0\0\0\xff\x02\0\0\x02\xec\0\0\xc0\0\0\0\
\xf8\0\0\0\x71\x02\0\0\x01\xf4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\
\xc6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\x08\x01\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x02\0\0\0\0\0\0\xe8\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x24\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xf8\x02\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xc8\x03\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x3d\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x03\
\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x89\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe8\x03\0\0\0\0\0\0\
\x30\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xa0\
\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x04\0\0\0\0\0\0\x30\0\0\
\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xb8\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x48\x04\0\0\0\0\0\0\xb5\x05\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbd\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\0\0\0\0\0\0\xa8\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __UDP_LIMIT_SKEL_H__ */
