/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __FREPLACE_GET_CONSTANT_SKEL_H__
#define __FREPLACE_GET_CONSTANT_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct freplace_get_constant {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *security_new_get_constant;
	} progs;
	struct {
		struct bpf_link *security_new_get_constant;
	} links;
	struct freplace_get_constant__bss {
		__u64 test_get_constant;
	} *bss;
};

static void
freplace_get_constant__destroy(struct freplace_get_constant *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
freplace_get_constant__create_skeleton(struct freplace_get_constant *obj);

static inline struct freplace_get_constant *
freplace_get_constant__open_opts(const struct bpf_object_open_opts *opts)
{
	struct freplace_get_constant *obj;
	int err;

	obj = (struct freplace_get_constant *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = freplace_get_constant__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	freplace_get_constant__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct freplace_get_constant *
freplace_get_constant__open(void)
{
	return freplace_get_constant__open_opts(NULL);
}

static inline int
freplace_get_constant__load(struct freplace_get_constant *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct freplace_get_constant *
freplace_get_constant__open_and_load(void)
{
	struct freplace_get_constant *obj;
	int err;

	obj = freplace_get_constant__open();
	if (!obj)
		return NULL;
	err = freplace_get_constant__load(obj);
	if (err) {
		freplace_get_constant__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
freplace_get_constant__attach(struct freplace_get_constant *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
freplace_get_constant__detach(struct freplace_get_constant *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *freplace_get_constant__elf_bytes(size_t *sz);

static inline int
freplace_get_constant__create_skeleton(struct freplace_get_constant *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "freplace_get_constant";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "freplace.bss";
	s->maps[0].map = &obj->maps.bss;
	s->maps[0].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "security_new_get_constant";
	s->progs[0].prog = &obj->progs.security_new_get_constant;
	s->progs[0].link = &obj->links.security_new_get_constant;

	s->data = (void *)freplace_get_constant__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *freplace_get_constant__elf_bytes(size_t *sz)
{
	*sz = 1936;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x50\x05\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x66\x72\
\x65\x70\x6c\x61\x63\x65\x2f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\x6e\x74\0\
\x2e\x62\x73\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x66\x72\x65\x70\x6c\x61\x63\
\x65\x5f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\x6e\x74\x2e\x63\0\x4c\x42\x42\
\x30\x5f\x32\0\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x6e\x65\x77\x5f\x67\x65\x74\
\x5f\x63\x6f\x6e\x73\x74\x61\x6e\x74\0\x74\x65\x73\x74\x5f\x67\x65\x74\x5f\x63\
\x6f\x6e\x73\x74\x61\x6e\x74\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\x65\
\x6c\x66\x72\x65\x70\x6c\x61\x63\x65\x2f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\
\x61\x6e\x74\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x34\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4c\0\0\0\0\
\0\x03\0\x38\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x53\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\
\0\x40\0\0\0\0\0\0\0\x6d\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\x7f\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x55\
\x01\x05\0\x7b\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x01\0\0\0\
\x7b\x21\0\0\0\0\0\0\x79\x10\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\
\0\x10\0\0\0\0\0\0\0\x01\0\0\0\x05\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\xf0\0\
\0\0\xf0\0\0\0\xc1\x01\0\0\x01\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\0\0\0\0\
\x01\0\0\x0d\x03\0\0\0\x06\0\0\0\x01\0\0\0\x0a\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\x01\x0e\0\0\0\x01\0\0\x0c\x02\0\0\0\0\0\0\0\0\0\0\x09\x06\0\0\0\x28\0\0\0\0\
\0\0\x08\x07\0\0\0\x2e\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\x41\0\0\0\0\0\0\x0e\
\x05\0\0\0\x01\0\0\0\x53\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\
\x03\0\0\0\0\x09\0\0\0\x0b\0\0\0\x04\0\0\0\x58\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\0\x6c\0\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\x9e\x01\0\0\x01\0\0\x0f\x08\0\0\0\
\x08\0\0\0\0\0\0\0\x08\0\0\0\xa3\x01\0\0\x01\0\0\x0f\x04\0\0\0\x0c\0\0\0\0\0\0\
\0\x04\0\0\0\0\x6c\x6f\x6e\x67\0\x76\x61\x6c\0\x69\x6e\x74\0\x73\x65\x63\x75\
\x72\x69\x74\x79\x5f\x6e\x65\x77\x5f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\
\x6e\x74\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\
\x6e\x67\x20\x6c\x6f\x6e\x67\0\x74\x65\x73\x74\x5f\x67\x65\x74\x5f\x63\x6f\x6e\
\x73\x74\x61\x6e\x74\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\
\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\
\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\
\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\
\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\
\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\
\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\
\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\
\x2f\x66\x72\x65\x70\x6c\x61\x63\x65\x5f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\
\x61\x6e\x74\x2e\x63\0\x69\x6e\x74\x20\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x6e\
\x65\x77\x5f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\x6e\x74\x28\x6c\x6f\x6e\
\x67\x20\x76\x61\x6c\x29\0\x09\x69\x66\x20\x28\x76\x61\x6c\x20\x21\x3d\x20\x31\
\x32\x33\x29\0\x09\x74\x65\x73\x74\x5f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\
\x6e\x74\x20\x3d\x20\x31\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x74\x65\x73\x74\
\x5f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\x6e\x74\x3b\x20\x2f\x2a\x20\x6f\
\x72\x69\x67\x69\x6e\x61\x6c\x20\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\x6e\
\x74\x28\x29\x20\x72\x65\x74\x75\x72\x6e\x73\x20\x76\x61\x6c\x20\x2d\x20\x31\
\x32\x32\x20\x2a\x2f\0\x7d\0\x2e\x62\x73\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\x66\x72\x65\x70\x6c\x61\x63\x65\x2f\x67\x65\x74\x5f\x63\x6f\x6e\x73\x74\x61\
\x6e\x74\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\
\x5c\0\0\0\x70\0\0\0\0\0\0\0\x08\0\0\0\xab\x01\0\0\x01\0\0\0\0\0\0\0\x04\0\0\0\
\x10\0\0\0\xab\x01\0\0\x05\0\0\0\0\0\0\0\x75\0\0\0\0\x01\0\0\0\x20\0\0\x08\0\0\
\0\x75\0\0\0\x28\x01\0\0\x06\x28\0\0\x10\0\0\0\x75\0\0\0\x39\x01\0\0\x14\x30\0\
\0\x30\0\0\0\x75\0\0\0\x51\x01\0\0\x09\x34\0\0\x38\0\0\0\x75\0\0\0\x9c\x01\0\0\
\x01\x38\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\
\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x98\x01\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x27\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\
\x01\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x2c\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd8\x01\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\0\0\
\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x01\0\0\0\0\0\0\x10\0\0\0\0\
\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xa2\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x01\0\0\0\0\0\0\xc9\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa7\0\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc0\x04\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __FREPLACE_GET_CONSTANT_SKEL_H__ */
