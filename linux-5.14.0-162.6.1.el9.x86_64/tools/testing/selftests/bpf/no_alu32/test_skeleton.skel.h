/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_SKELETON_SKEL_H__
#define __TEST_SKELETON_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_skeleton {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *data;
		struct bpf_map *bss;
		struct bpf_map *rodata;
		struct bpf_map *rodata_dyn;
		struct bpf_map *data_dyn;
		struct bpf_map *data_read_mostly;
		struct bpf_map *kconfig;
	} maps;
	struct {
		struct bpf_program *handler;
	} progs;
	struct {
		struct bpf_link *handler;
	} links;
	struct test_skeleton__data {
		int in1;
		char __pad0[4];
		long long in2;
		int out1;
		char __pad1[4];
		long long out2;
	} *data;
	struct test_skeleton__bss {
		char in3;
		char __pad0[63];
		long long in4;
		struct s in5;
		char out3;
		long long out4;
		int out6;
		_Bool bpf_syscall;
		int kern_ver;
		struct s out5;
		int out_mostly_var;
	} *bss;
	struct test_skeleton__rodata {
		struct {
			int in6;
		} in;
	} *rodata;
	struct test_skeleton__rodata_dyn {
		int in_dynarr[4];
		int in_dynarr_sz;
	} *rodata_dyn;
	struct test_skeleton__data_dyn {
		int out_dynarr[4];
	} *data_dyn;
	struct test_skeleton__data_read_mostly {
		int read_mostly_var;
	} *data_read_mostly;
	struct test_skeleton__kconfig {
		int LINUX_KERNEL_VERSION;
		_Bool CONFIG_BPF_SYSCALL;
	} *kconfig;
};

static void
test_skeleton__destroy(struct test_skeleton *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_skeleton__create_skeleton(struct test_skeleton *obj);

static inline struct test_skeleton *
test_skeleton__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_skeleton *obj;
	int err;

	obj = (struct test_skeleton *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_skeleton__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_skeleton__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_skeleton *
test_skeleton__open(void)
{
	return test_skeleton__open_opts(NULL);
}

static inline int
test_skeleton__load(struct test_skeleton *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_skeleton *
test_skeleton__open_and_load(void)
{
	struct test_skeleton *obj;
	int err;

	obj = test_skeleton__open();
	if (!obj)
		return NULL;
	err = test_skeleton__load(obj);
	if (err) {
		test_skeleton__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_skeleton__attach(struct test_skeleton *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_skeleton__detach(struct test_skeleton *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_skeleton__elf_bytes(size_t *sz);

static inline int
test_skeleton__create_skeleton(struct test_skeleton *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "test_skeleton";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 7;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "test_ske.data";
	s->maps[0].map = &obj->maps.data;
	s->maps[0].mmaped = (void **)&obj->data;

	s->maps[1].name = "test_ske.bss";
	s->maps[1].map = &obj->maps.bss;
	s->maps[1].mmaped = (void **)&obj->bss;

	s->maps[2].name = "test_ske.rodata";
	s->maps[2].map = &obj->maps.rodata;
	s->maps[2].mmaped = (void **)&obj->rodata;

	s->maps[3].name = ".rodata.dyn";
	s->maps[3].map = &obj->maps.rodata_dyn;
	s->maps[3].mmaped = (void **)&obj->rodata_dyn;

	s->maps[4].name = ".data.dyn";
	s->maps[4].map = &obj->maps.data_dyn;
	s->maps[4].mmaped = (void **)&obj->data_dyn;

	s->maps[5].name = ".data.read_mostly";
	s->maps[5].map = &obj->maps.data_read_mostly;
	s->maps[5].mmaped = (void **)&obj->data_read_mostly;

	s->maps[6].name = "test_sk.kconfig";
	s->maps[6].map = &obj->maps.kconfig;
	s->maps[6].mmaped = (void **)&obj->kconfig;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "handler";
	s->progs[0].prog = &obj->progs.handler;
	s->progs[0].link = &obj->links.handler;

	s->data = (void *)test_skeleton__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *test_skeleton__elf_bytes(size_t *sz)
{
	*sz = 5504;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x12\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0e\0\x01\
\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x72\x61\x77\
\x5f\x74\x70\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x2e\x64\x61\x74\x61\0\
\x2e\x62\x73\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x6f\x64\x61\x74\x61\
\x2e\x64\x79\x6e\0\x2e\x64\x61\x74\x61\x2e\x64\x79\x6e\0\x2e\x64\x61\x74\x61\
\x2e\x72\x65\x61\x64\x5f\x6d\x6f\x73\x74\x6c\x79\0\x6c\x69\x63\x65\x6e\x73\x65\
\0\x74\x65\x73\x74\x5f\x73\x6b\x65\x6c\x65\x74\x6f\x6e\x2e\x63\0\x4c\x42\x42\
\x30\x5f\x33\0\x4c\x42\x42\x30\x5f\x32\0\x68\x61\x6e\x64\x6c\x65\x72\0\x69\x6e\
\x35\0\x6f\x75\x74\x35\0\x69\x6e\x31\0\x6f\x75\x74\x31\0\x69\x6e\x32\0\x6f\x75\
\x74\x32\0\x69\x6e\x33\0\x6f\x75\x74\x33\0\x69\x6e\x34\0\x6f\x75\x74\x34\0\x69\
\x6e\0\x6f\x75\x74\x36\0\x43\x4f\x4e\x46\x49\x47\x5f\x42\x50\x46\x5f\x53\x59\
\x53\x43\x41\x4c\x4c\0\x62\x70\x66\x5f\x73\x79\x73\x63\x61\x6c\x6c\0\x4c\x49\
\x4e\x55\x58\x5f\x4b\x45\x52\x4e\x45\x4c\x5f\x56\x45\x52\x53\x49\x4f\x4e\0\x6b\
\x65\x72\x6e\x5f\x76\x65\x72\0\x69\x6e\x5f\x64\x79\x6e\x61\x72\x72\x5f\x73\x7a\
\0\x6f\x75\x74\x5f\x64\x79\x6e\x61\x72\x72\0\x69\x6e\x5f\x64\x79\x6e\x61\x72\
\x72\0\x72\x65\x61\x64\x5f\x6d\x6f\x73\x74\x6c\x79\x5f\x76\x61\x72\0\x6f\x75\
\x74\x5f\x6d\x6f\x73\x74\x6c\x79\x5f\x76\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x2e\x72\x65\x6c\x72\x61\x77\x5f\x74\x70\x2f\x73\x79\x73\x5f\x65\x6e\x74\
\x65\x72\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x65\0\0\0\x04\0\xf1\xff\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x75\
\0\0\0\0\0\x03\0\xd0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7c\0\0\0\0\0\x03\0\x88\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\x03\
\0\0\0\0\0\0\x8b\0\0\0\x11\0\x05\0\x48\0\0\0\0\0\0\0\x0c\0\0\0\0\0\0\0\x8f\0\0\
\0\x11\0\x05\0\x6c\0\0\0\0\0\0\0\x0c\0\0\0\0\0\0\0\x94\0\0\0\x11\0\x04\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\x98\0\0\0\x11\0\x04\0\x10\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\x9d\0\0\0\x11\0\x04\0\x08\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\xa1\0\0\0\
\x11\0\x04\0\x18\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\xa6\0\0\0\x11\0\x05\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\xaa\0\0\0\x11\0\x05\0\x54\0\0\0\0\0\0\0\x01\0\0\0\0\
\0\0\0\xaf\0\0\0\x11\0\x05\0\x40\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\xb3\0\0\0\x11\
\0\x05\0\x58\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\xb8\0\0\0\x11\0\x06\0\0\0\0\0\0\0\
\0\0\x04\0\0\0\0\0\0\0\xbb\0\0\0\x11\0\x05\0\x60\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\xc0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd3\0\0\0\x11\0\x05\0\
\x64\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\xdf\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xf4\0\0\0\x11\0\x05\0\x68\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xfd\0\0\0\
\x11\0\x07\0\x10\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x0a\x01\0\0\x11\0\x08\0\0\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x15\x01\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x1f\x01\0\0\x11\0\x09\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x2f\x01\0\0\
\x11\0\x05\0\x78\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x3e\x01\0\0\x11\0\x0a\0\0\0\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x71\x13\x07\0\
\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x73\x32\x07\0\0\0\0\0\x71\x13\x06\
\0\0\0\0\0\x73\x32\x06\0\0\0\0\0\x71\x13\x05\0\0\0\0\0\x73\x32\x05\0\0\0\0\0\
\x71\x13\x04\0\0\0\0\0\x73\x32\x04\0\0\0\0\0\x71\x13\x03\0\0\0\0\0\x73\x32\x03\
\0\0\0\0\0\x71\x13\x02\0\0\0\0\0\x73\x32\x02\0\0\0\0\0\x71\x13\x01\0\0\0\0\0\
\x73\x32\x01\0\0\0\0\0\x71\x13\0\0\0\0\0\0\x73\x32\0\0\0\0\0\0\x71\x13\x0b\0\0\
\0\0\0\x73\x32\x0b\0\0\0\0\0\x71\x13\x0a\0\0\0\0\0\x73\x32\x0a\0\0\0\0\0\x71\
\x13\x09\0\0\0\0\0\x73\x32\x09\0\0\0\0\0\x71\x11\x08\0\0\0\0\0\x73\x12\x08\0\0\
\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x18\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x63\x12\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x79\x11\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\x12\0\0\0\0\0\0\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x71\x11\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x73\x12\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x79\x11\
\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7b\x12\0\0\0\0\0\0\x18\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x63\x12\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x71\x11\0\0\0\0\0\
\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x73\x12\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\
\x12\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x12\0\0\0\0\0\0\x67\
\x02\0\0\x20\0\0\0\xc7\x02\0\0\x20\0\0\0\xc5\x02\x0e\0\x01\0\0\0\xb7\x02\0\0\0\
\0\0\0\x18\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x61\x45\0\0\0\0\0\0\x63\x53\0\0\0\0\0\0\x07\x04\0\0\x04\0\0\0\x07\x03\0\0\x04\
\0\0\0\x07\x02\0\0\x01\0\0\0\x61\x15\0\0\0\0\0\0\x67\x05\0\0\x20\0\0\0\xc7\x05\
\0\0\x20\0\0\0\xcd\x52\xf7\xff\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\
\x11\0\0\0\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\x12\0\0\0\0\0\0\xb7\0\
\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\
\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\
\xff\xff\xff\xfe\xff\xff\xff\xfd\xff\xff\xff\xfc\xff\xff\xff\0\0\0\0\x01\0\0\0\
\x02\0\0\0\x03\0\0\0\x04\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\x06\0\0\0\x18\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\xe0\0\0\0\0\0\0\0\x01\0\0\0\
\x08\0\0\0\xf8\0\0\0\0\0\0\0\x01\0\0\0\x09\0\0\0\x10\x01\0\0\0\0\0\0\x01\0\0\0\
\x0a\0\0\0\x28\x01\0\0\0\0\0\0\x01\0\0\0\x0b\0\0\0\x40\x01\0\0\0\0\0\0\x01\0\0\
\0\x0c\0\0\0\x58\x01\0\0\0\0\0\0\x01\0\0\0\x0d\0\0\0\x70\x01\0\0\0\0\0\0\x01\0\
\0\0\x0e\0\0\0\x88\x01\0\0\0\0\0\0\x01\0\0\0\x0f\0\0\0\xa0\x01\0\0\0\0\0\0\x01\
\0\0\0\x10\0\0\0\xb8\x01\0\0\0\0\0\0\x01\0\0\0\x11\0\0\0\xd0\x01\0\0\0\0\0\0\
\x01\0\0\0\x12\0\0\0\xe8\x01\0\0\0\0\0\0\x01\0\0\0\x13\0\0\0\0\x02\0\0\0\0\0\0\
\x01\0\0\0\x14\0\0\0\x18\x02\0\0\0\0\0\0\x01\0\0\0\x15\0\0\0\x30\x02\0\0\0\0\0\
\0\x01\0\0\0\x16\0\0\0\x68\x02\0\0\0\0\0\0\x01\0\0\0\x17\0\0\0\x78\x02\0\0\0\0\
\0\0\x01\0\0\0\x18\0\0\0\xd0\x02\0\0\0\0\0\0\x01\0\0\0\x19\0\0\0\xe8\x02\0\0\0\
\0\0\0\x01\0\0\0\x1a\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x10\x04\0\0\x10\x04\
\0\0\xe8\x02\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\0\0\0\0\0\0\0\x0a\0\0\0\0\0\0\0\0\
\x01\0\0\x0d\x04\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\
\0\x01\x09\0\0\0\x01\0\0\x0c\x03\0\0\0\x11\0\0\0\0\0\0\x0e\x04\0\0\0\x01\0\0\0\
\x15\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\x1f\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\
\0\0\x23\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\x28\0\0\0\0\0\0\x0e\x09\0\0\0\
\x01\0\0\0\x2c\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\x30\0\0\0\x02\0\0\x04\x0c\0\
\0\0\x32\0\0\0\x04\0\0\0\0\0\0\0\x34\0\0\0\x07\0\0\0\x20\0\0\0\x36\0\0\0\0\0\0\
\x0e\x0c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0f\0\0\0\0\0\0\0\0\0\0\x09\x10\0\0\
\0\0\0\0\0\x01\0\0\x04\x04\0\0\0\x3a\0\0\0\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a\
\x04\0\0\0\x3e\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x41\0\0\0\0\0\0\x0e\x04\0\0\
\0\x01\0\0\0\x46\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\x4b\0\0\0\0\0\0\x0e\x09\0\
\0\0\x01\0\0\0\x50\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\x55\0\0\0\0\0\0\x0e\x04\
\0\0\0\x01\0\0\0\x5a\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x04\x60\0\0\0\0\0\0\x0e\
\x18\0\0\0\x01\0\0\0\x6c\0\0\0\0\0\0\x0e\x04\0\0\0\x01\0\0\0\x75\0\0\0\0\0\0\
\x0e\x0c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x1d\0\0\0\0\0\0\0\0\0\0\x09\x04\0\0\
\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1c\0\0\0\x1f\0\0\0\x04\0\0\0\x7a\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\0\x8e\0\0\0\0\0\0\x0e\x1e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\
\0\0\0\0\x04\0\0\0\x1f\0\0\0\x04\0\0\0\x98\0\0\0\0\0\0\x0e\x21\0\0\0\x01\0\0\0\
\xa3\0\0\0\0\0\0\x0e\x18\0\0\0\x02\0\0\0\xb6\0\0\0\0\0\0\x0e\x04\0\0\0\x02\0\0\
\0\xcb\0\0\0\0\0\0\x0e\x1c\0\0\0\x01\0\0\0\xd8\0\0\0\0\0\0\x0e\x04\0\0\0\x01\0\
\0\0\xe8\0\0\0\0\0\0\x0e\x04\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x09\0\0\
\0\x1f\0\0\0\x04\0\0\0\xf7\0\0\0\0\0\0\x0e\x28\0\0\0\x01\0\0\0\x8b\x02\0\0\x04\
\0\0\x0f\x20\0\0\0\x06\0\0\0\0\0\0\0\x04\0\0\0\x08\0\0\0\x08\0\0\0\x08\0\0\0\
\x13\0\0\0\x10\0\0\0\x04\0\0\0\x14\0\0\0\x18\0\0\0\x08\0\0\0\x91\x02\0\0\x0a\0\
\0\x0f\x7c\0\0\0\x0a\0\0\0\0\0\0\0\x01\0\0\0\x0b\0\0\0\x40\0\0\0\x08\0\0\0\x0d\
\0\0\0\x48\0\0\0\x0c\0\0\0\x15\0\0\0\x54\0\0\0\x01\0\0\0\x16\0\0\0\x58\0\0\0\
\x08\0\0\0\x17\0\0\0\x60\0\0\0\x04\0\0\0\x19\0\0\0\x64\0\0\0\x01\0\0\0\x1a\0\0\
\0\x68\0\0\0\x04\0\0\0\x1b\0\0\0\x6c\0\0\0\x0c\0\0\0\x27\0\0\0\x78\0\0\0\x04\0\
\0\0\x96\x02\0\0\x01\0\0\x0f\x04\0\0\0\x12\0\0\0\0\0\0\0\x04\0\0\0\x9e\x02\0\0\
\x02\0\0\x0f\x14\0\0\0\x20\0\0\0\0\0\0\0\x10\0\0\0\x25\0\0\0\x10\0\0\0\x04\0\0\
\0\xaa\x02\0\0\x01\0\0\x0f\x10\0\0\0\x22\0\0\0\0\0\0\0\x10\0\0\0\xb4\x02\0\0\
\x01\0\0\x0f\x04\0\0\0\x26\0\0\0\0\0\0\0\x04\0\0\0\xc6\x02\0\0\x01\0\0\x0f\x04\
\0\0\0\x29\0\0\0\0\0\0\0\x04\0\0\0\xce\x02\0\0\x02\0\0\x0f\0\0\0\0\x23\0\0\0\0\
\0\0\0\x01\0\0\0\x24\0\0\0\0\0\0\0\x04\0\0\0\0\x63\x74\x78\0\x69\x6e\x74\0\x68\
\x61\x6e\x64\x6c\x65\x72\0\x69\x6e\x31\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\
\x69\x6e\x32\0\x63\x68\x61\x72\0\x69\x6e\x33\0\x69\x6e\x34\0\x73\0\x61\0\x62\0\
\x69\x6e\x35\0\x69\x6e\x36\0\x69\x6e\0\x6f\x75\x74\x31\0\x6f\x75\x74\x32\0\x6f\
\x75\x74\x33\0\x6f\x75\x74\x34\0\x6f\x75\x74\x36\0\x5f\x42\x6f\x6f\x6c\0\x62\
\x70\x66\x5f\x73\x79\x73\x63\x61\x6c\x6c\0\x6b\x65\x72\x6e\x5f\x76\x65\x72\0\
\x6f\x75\x74\x35\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\
\x50\x45\x5f\x5f\0\x69\x6e\x5f\x64\x79\x6e\x61\x72\x72\0\x6f\x75\x74\x5f\x64\
\x79\x6e\x61\x72\x72\0\x43\x4f\x4e\x46\x49\x47\x5f\x42\x50\x46\x5f\x53\x59\x53\
\x43\x41\x4c\x4c\0\x4c\x49\x4e\x55\x58\x5f\x4b\x45\x52\x4e\x45\x4c\x5f\x56\x45\
\x52\x53\x49\x4f\x4e\0\x69\x6e\x5f\x64\x79\x6e\x61\x72\x72\x5f\x73\x7a\0\x72\
\x65\x61\x64\x5f\x6d\x6f\x73\x74\x6c\x79\x5f\x76\x61\x72\0\x6f\x75\x74\x5f\x6d\
\x6f\x73\x74\x6c\x79\x5f\x76\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2f\
\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\x44\
\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\
\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\x31\
\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\x36\
\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\x73\
\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\x2f\
\x74\x65\x73\x74\x5f\x73\x6b\x65\x6c\x65\x74\x6f\x6e\x2e\x63\0\x09\x6f\x75\x74\
\x35\x20\x3d\x20\x69\x6e\x35\x3b\0\x09\x6f\x75\x74\x31\x20\x3d\x20\x69\x6e\x31\
\x3b\0\x09\x6f\x75\x74\x32\x20\x3d\x20\x69\x6e\x32\x3b\0\x09\x6f\x75\x74\x33\
\x20\x3d\x20\x69\x6e\x33\x3b\0\x09\x6f\x75\x74\x34\x20\x3d\x20\x69\x6e\x34\x3b\
\0\x09\x6f\x75\x74\x36\x20\x3d\x20\x69\x6e\x2e\x69\x6e\x36\x3b\0\x09\x62\x70\
\x66\x5f\x73\x79\x73\x63\x61\x6c\x6c\x20\x3d\x20\x43\x4f\x4e\x46\x49\x47\x5f\
\x42\x50\x46\x5f\x53\x59\x53\x43\x41\x4c\x4c\x3b\0\x09\x6b\x65\x72\x6e\x5f\x76\
\x65\x72\x20\x3d\x20\x4c\x49\x4e\x55\x58\x5f\x4b\x45\x52\x4e\x45\x4c\x5f\x56\
\x45\x52\x53\x49\x4f\x4e\x3b\0\x09\x66\x6f\x72\x20\x28\x69\x20\x3d\x20\x30\x3b\
\x20\x69\x20\x3c\x20\x69\x6e\x5f\x64\x79\x6e\x61\x72\x72\x5f\x73\x7a\x3b\x20\
\x69\x2b\x2b\x29\0\x09\x09\x6f\x75\x74\x5f\x64\x79\x6e\x61\x72\x72\x5b\x69\x5d\
\x20\x3d\x20\x69\x6e\x5f\x64\x79\x6e\x61\x72\x72\x5b\x69\x5d\x3b\0\x09\x6f\x75\
\x74\x5f\x6d\x6f\x73\x74\x6c\x79\x5f\x76\x61\x72\x20\x3d\x20\x72\x65\x61\x64\
\x5f\x6d\x6f\x73\x74\x6c\x79\x5f\x76\x61\x72\x3b\0\x09\x72\x65\x74\x75\x72\x6e\
\x20\x30\x3b\0\x2e\x64\x61\x74\x61\0\x2e\x62\x73\x73\0\x2e\x72\x6f\x64\x61\x74\
\x61\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\x64\x79\x6e\0\x2e\x64\x61\x74\x61\x2e\
\x64\x79\x6e\0\x2e\x64\x61\x74\x61\x2e\x72\x65\x61\x64\x5f\x6d\x6f\x73\x74\x6c\
\x79\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x6b\x63\x6f\x6e\x66\x69\x67\0\x72\x61\
\x77\x5f\x74\x70\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x9f\xeb\x01\0\x20\0\
\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\xbc\x01\0\0\xd0\x01\0\0\0\0\0\0\x08\0\0\0\xd7\
\x02\0\0\x01\0\0\0\0\0\0\0\x05\0\0\0\x10\0\0\0\xd7\x02\0\0\x1b\0\0\0\0\0\0\0\0\
\x01\0\0\x83\x01\0\0\x09\xfc\0\0\xe0\0\0\0\0\x01\0\0\x90\x01\0\0\x09\xec\0\0\
\xf8\0\0\0\0\x01\0\0\x90\x01\0\0\x07\xec\0\0\x10\x01\0\0\0\x01\0\0\x9d\x01\0\0\
\x09\xf0\0\0\x28\x01\0\0\0\x01\0\0\x9d\x01\0\0\x07\xf0\0\0\x40\x01\0\0\0\x01\0\
\0\xaa\x01\0\0\x09\xf4\0\0\x58\x01\0\0\0\x01\0\0\xaa\x01\0\0\x07\xf4\0\0\x70\
\x01\0\0\0\x01\0\0\xb7\x01\0\0\x09\xf8\0\0\x88\x01\0\0\0\x01\0\0\xb7\x01\0\0\
\x07\xf8\0\0\xa0\x01\0\0\0\x01\0\0\xc4\x01\0\0\x0c\0\x01\0\xb8\x01\0\0\0\x01\0\
\0\xc4\x01\0\0\x07\0\x01\0\xd0\x01\0\0\0\x01\0\0\xd4\x01\0\0\x10\x08\x01\0\xe8\
\x01\0\0\0\x01\0\0\xd4\x01\0\0\x0e\x08\x01\0\0\x02\0\0\0\x01\0\0\xf7\x01\0\0\
\x0d\x0c\x01\0\x18\x02\0\0\0\x01\0\0\xf7\x01\0\0\x0b\x0c\x01\0\x30\x02\0\0\0\
\x01\0\0\x19\x02\0\0\x12\x14\x01\0\x58\x02\0\0\0\x01\0\0\x19\x02\0\0\x02\x14\
\x01\0\x88\x02\0\0\0\x01\0\0\x3d\x02\0\0\x13\x18\x01\0\x90\x02\0\0\0\x01\0\0\
\x3d\x02\0\0\x11\x18\x01\0\x98\x02\0\0\0\x01\0\0\x19\x02\0\0\x10\x14\x01\0\xa8\
\x02\0\0\0\x01\0\0\x19\x02\0\0\x21\x14\x01\0\xb0\x02\0\0\0\x01\0\0\x19\x02\0\0\
\x12\x14\x01\0\xb8\x02\0\0\0\x01\0\0\x19\x02\0\0\x10\x14\x01\0\xc8\x02\0\0\0\
\x01\0\0\x19\x02\0\0\x02\x14\x01\0\xd0\x02\0\0\0\x01\0\0\x5d\x02\0\0\x13\x20\
\x01\0\xe8\x02\0\0\0\x01\0\0\x5d\x02\0\0\x11\x20\x01\0\0\x03\0\0\0\x01\0\0\x80\
\x02\0\0\x02\x28\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\
\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x6a\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x01\0\0\0\0\0\0\xa0\x02\0\0\0\0\0\0\x01\0\
\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x50\x04\0\0\0\0\0\0\x10\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x60\x07\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x80\x07\0\0\0\0\0\0\x7c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x2d\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x07\0\0\0\
\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x35\
\0\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84\x07\0\0\0\0\0\0\x14\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x41\0\0\0\x01\0\0\
\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x07\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4b\0\0\0\x01\0\0\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xa8\x07\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5d\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xac\x07\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x47\x01\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb0\x07\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x5c\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\
\0\0\0\0\0\0\x10\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x61\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x10\0\0\0\0\0\0\
\xf0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __TEST_SKELETON_SKEL_H__ */
