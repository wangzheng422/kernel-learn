/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_TRACEPOINT_SKEL_H__
#define __TEST_TRACEPOINT_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct test_tracepoint {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *oncpu;
	} progs;
	struct {
		struct bpf_link *oncpu;
	} links;
};

static void
test_tracepoint__destroy(struct test_tracepoint *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
test_tracepoint__create_skeleton(struct test_tracepoint *obj);

static inline struct test_tracepoint *
test_tracepoint__open_opts(const struct bpf_object_open_opts *opts)
{
	struct test_tracepoint *obj;
	int err;

	obj = (struct test_tracepoint *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = test_tracepoint__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	test_tracepoint__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct test_tracepoint *
test_tracepoint__open(void)
{
	return test_tracepoint__open_opts(NULL);
}

static inline int
test_tracepoint__load(struct test_tracepoint *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct test_tracepoint *
test_tracepoint__open_and_load(void)
{
	struct test_tracepoint *obj;
	int err;

	obj = test_tracepoint__open();
	if (!obj)
		return NULL;
	err = test_tracepoint__load(obj);
	if (err) {
		test_tracepoint__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
test_tracepoint__attach(struct test_tracepoint *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
test_tracepoint__detach(struct test_tracepoint *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *test_tracepoint__elf_bytes(size_t *sz);

static inline int
test_tracepoint__create_skeleton(struct test_tracepoint *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "test_tracepoint";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "oncpu";
	s->progs[0].prog = &obj->progs.oncpu;
	s->progs[0].link = &obj->links.oncpu;

	s->data = (void *)test_tracepoint__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *test_tracepoint__elf_bytes(size_t *sz)
{
	*sz = 1536;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x40\x04\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x07\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x74\x72\
\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x63\x68\x65\x64\x2f\x73\x63\x68\x65\
\x64\x5f\x73\x77\x69\x74\x63\x68\0\x6c\x69\x63\x65\x6e\x73\x65\0\x74\x65\x73\
\x74\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2e\x63\0\x6f\x6e\x63\x70\x75\
\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\
\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x37\0\0\0\x04\0\
\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x49\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x4f\0\0\
\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\
\0\0\0\x47\x50\x4c\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x40\x01\0\0\x40\
\x01\0\0\x5f\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x08\0\0\x04\x40\0\0\
\0\x13\0\0\0\x03\0\0\0\0\0\0\0\x17\0\0\0\x05\0\0\0\x40\0\0\0\x21\0\0\0\x07\0\0\
\0\xc0\0\0\0\x2a\0\0\0\x07\0\0\0\xe0\0\0\0\x34\0\0\0\x08\0\0\0\0\x01\0\0\x3f\0\
\0\0\x05\0\0\0\x40\x01\0\0\x49\0\0\0\x07\0\0\0\xc0\x01\0\0\x52\0\0\0\x07\0\0\0\
\xe0\x01\0\0\x5c\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\x6f\0\0\0\0\0\0\x01\x01\0\
\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x04\0\0\0\x06\0\0\0\x10\0\0\0\x74\0\
\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x88\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\
\x8c\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\x01\0\0\0\0\x01\0\0\x0d\x07\0\0\0\x96\0\
\0\0\x01\0\0\0\x9a\0\0\0\x01\0\0\x0c\x09\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x04\0\
\0\0\x06\0\0\0\x04\0\0\0\xa0\0\0\0\0\0\0\x0e\x0b\0\0\0\x01\0\0\0\x39\x01\0\0\
\x01\0\0\x0f\x04\0\0\0\x0c\0\0\0\0\0\0\0\x04\0\0\0\0\x73\x63\x68\x65\x64\x5f\
\x73\x77\x69\x74\x63\x68\x5f\x61\x72\x67\x73\0\x70\x61\x64\0\x70\x72\x65\x76\
\x5f\x63\x6f\x6d\x6d\0\x70\x72\x65\x76\x5f\x70\x69\x64\0\x70\x72\x65\x76\x5f\
\x70\x72\x69\x6f\0\x70\x72\x65\x76\x5f\x73\x74\x61\x74\x65\0\x6e\x65\x78\x74\
\x5f\x63\x6f\x6d\x6d\0\x6e\x65\x78\x74\x5f\x70\x69\x64\0\x6e\x65\x78\x74\x5f\
\x70\x72\x69\x6f\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\
\x6f\x6e\x67\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\
\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x69\x6e\x74\0\x6c\x6f\x6e\x67\x20\x6c\x6f\
\x6e\x67\0\x63\x74\x78\0\x6f\x6e\x63\x70\x75\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\
\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\
\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\
\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\
\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\
\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\
\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\
\x2f\x74\x65\x73\x74\x5f\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2e\x63\0\x09\
\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\x6c\x69\x63\x65\x6e\x73\x65\0\x74\x72\
\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x63\x68\x65\x64\x2f\x73\x63\x68\x65\
\x64\x5f\x73\x77\x69\x74\x63\x68\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\
\x14\0\0\0\x1c\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\0\x41\x01\0\0\x01\0\0\0\0\0\0\0\
\x0a\0\0\0\x10\0\0\0\x41\x01\0\0\x01\0\0\0\0\0\0\0\xa9\0\0\0\x2e\x01\0\0\x02\
\x58\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\
\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x66\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xa8\0\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x20\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x2f\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x01\0\
\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x58\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x01\0\0\0\0\0\0\xb7\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5d\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf0\x03\0\0\0\0\0\0\x50\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __TEST_TRACEPOINT_SKEL_H__ */
