/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __BPF_ITER_BPF_PERCPU_ARRAY_MAP_SKEL_H__
#define __BPF_ITER_BPF_PERCPU_ARRAY_MAP_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct bpf_iter_bpf_percpu_array_map {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *arraymap1;
		struct bpf_map *rodata;
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *dump_bpf_percpu_array_map;
	} progs;
	struct {
		struct bpf_link *dump_bpf_percpu_array_map;
	} links;
	struct bpf_iter_bpf_percpu_array_map__rodata {
		__u32 num_cpus;
	} *rodata;
	struct bpf_iter_bpf_percpu_array_map__bss {
		__u32 key_sum;
		__u32 val_sum;
	} *bss;
};

static void
bpf_iter_bpf_percpu_array_map__destroy(struct bpf_iter_bpf_percpu_array_map *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
bpf_iter_bpf_percpu_array_map__create_skeleton(struct bpf_iter_bpf_percpu_array_map *obj);

static inline struct bpf_iter_bpf_percpu_array_map *
bpf_iter_bpf_percpu_array_map__open_opts(const struct bpf_object_open_opts *opts)
{
	struct bpf_iter_bpf_percpu_array_map *obj;
	int err;

	obj = (struct bpf_iter_bpf_percpu_array_map *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = bpf_iter_bpf_percpu_array_map__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	bpf_iter_bpf_percpu_array_map__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct bpf_iter_bpf_percpu_array_map *
bpf_iter_bpf_percpu_array_map__open(void)
{
	return bpf_iter_bpf_percpu_array_map__open_opts(NULL);
}

static inline int
bpf_iter_bpf_percpu_array_map__load(struct bpf_iter_bpf_percpu_array_map *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct bpf_iter_bpf_percpu_array_map *
bpf_iter_bpf_percpu_array_map__open_and_load(void)
{
	struct bpf_iter_bpf_percpu_array_map *obj;
	int err;

	obj = bpf_iter_bpf_percpu_array_map__open();
	if (!obj)
		return NULL;
	err = bpf_iter_bpf_percpu_array_map__load(obj);
	if (err) {
		bpf_iter_bpf_percpu_array_map__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
bpf_iter_bpf_percpu_array_map__attach(struct bpf_iter_bpf_percpu_array_map *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
bpf_iter_bpf_percpu_array_map__detach(struct bpf_iter_bpf_percpu_array_map *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *bpf_iter_bpf_percpu_array_map__elf_bytes(size_t *sz);

static inline int
bpf_iter_bpf_percpu_array_map__create_skeleton(struct bpf_iter_bpf_percpu_array_map *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;
	obj->skeleton = s;

	s->sz = sizeof(*s);
	s->name = "bpf_iter_bpf_percpu_array_map";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 3;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps)
		goto err;

	s->maps[0].name = "arraymap1";
	s->maps[0].map = &obj->maps.arraymap1;

	s->maps[1].name = "bpf_iter.rodata";
	s->maps[1].map = &obj->maps.rodata;
	s->maps[1].mmaped = (void **)&obj->rodata;

	s->maps[2].name = "bpf_iter.bss";
	s->maps[2].map = &obj->maps.bss;
	s->maps[2].mmaped = (void **)&obj->bss;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "dump_bpf_percpu_array_map";
	s->progs[0].prog = &obj->progs.dump_bpf_percpu_array_map;
	s->progs[0].link = &obj->links.dump_bpf_percpu_array_map;

	s->data = (void *)bpf_iter_bpf_percpu_array_map__elf_bytes(&s->data_sz);

	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *bpf_iter_bpf_percpu_array_map__elf_bytes(size_t *sz)
{
	*sz = 3080;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x48\x09\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x69\x74\
\x65\x72\x2f\x62\x70\x66\x5f\x6d\x61\x70\x5f\x65\x6c\x65\x6d\0\x6c\x69\x63\x65\
\x6e\x73\x65\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\
\x73\0\x62\x70\x66\x5f\x69\x74\x65\x72\x5f\x62\x70\x66\x5f\x70\x65\x72\x63\x70\
\x75\x5f\x61\x72\x72\x61\x79\x5f\x6d\x61\x70\x2e\x63\0\x4c\x42\x42\x30\x5f\x35\
\0\x4c\x42\x42\x30\x5f\x34\0\x64\x75\x6d\x70\x5f\x62\x70\x66\x5f\x70\x65\x72\
\x63\x70\x75\x5f\x61\x72\x72\x61\x79\x5f\x6d\x61\x70\0\x6b\x65\x79\x5f\x73\x75\
\x6d\0\x6e\x75\x6d\x5f\x63\x70\x75\x73\0\x76\x61\x6c\x5f\x73\x75\x6d\0\x5f\x6c\
\x69\x63\x65\x6e\x73\x65\0\x61\x72\x72\x61\x79\x6d\x61\x70\x31\0\x2e\x72\x65\
\x6c\x69\x74\x65\x72\x2f\x62\x70\x66\x5f\x6d\x61\x70\x5f\x65\x6c\x65\x6d\0\x2e\
\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x3e\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5e\0\0\0\0\0\x03\0\xc8\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x65\0\0\0\0\0\x03\0\x90\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x6c\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\xd8\0\0\0\0\0\0\0\x86\0\0\0\x11\0\
\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x8e\0\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\x97\0\0\0\x11\0\x06\0\x04\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\
\x9f\0\0\0\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xa8\0\0\0\x11\0\x07\0\
\0\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x79\x12\x10\0\0\0\0\0\x15\x02\x17\0\0\0\0\0\
\x79\x11\x18\0\0\0\0\0\x15\x01\x15\0\0\0\0\0\x61\x22\0\0\0\0\0\0\x18\x03\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x61\x34\0\0\0\0\0\0\x0c\x24\0\0\0\0\0\0\x63\x43\0\0\0\0\
\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x23\0\0\0\0\0\0\x16\x03\x0b\0\0\0\
\0\0\xb4\x03\0\0\0\0\0\0\x18\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x45\0\0\0\0\0\
\0\x61\x10\0\0\0\0\0\0\x0c\x05\0\0\0\0\0\0\x63\x54\0\0\0\0\0\0\x07\x01\0\0\x08\
\0\0\0\x04\x03\0\0\x01\0\0\0\x61\x20\0\0\0\0\0\0\xae\x03\xf9\xff\0\0\0\0\xb4\0\
\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x01\0\0\0\x06\0\0\0\
\x50\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x78\0\0\0\0\0\0\0\x01\0\0\0\x08\0\0\0\
\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x6c\x02\0\0\x6c\x02\0\0\x33\x02\0\0\0\0\0\0\0\
\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\
\0\0\0\0\x02\0\0\0\x04\0\0\0\x06\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\
\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x03\
\0\0\0\0\0\0\0\0\0\0\x02\x08\0\0\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1f\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x04\0\0\x04\x20\0\0\0\x2c\0\0\0\x01\0\0\0\0\
\0\0\0\x31\0\0\0\x05\0\0\0\x40\0\0\0\x3d\0\0\0\x07\0\0\0\x80\0\0\0\x41\0\0\0\
\x07\0\0\0\xc0\0\0\0\x47\0\0\0\0\0\0\x0e\x0a\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\
\x0d\0\0\0\x51\0\0\0\x04\0\0\x04\x20\0\0\0\x68\0\0\0\x0e\0\0\0\0\0\0\0\x6d\0\0\
\0\x0f\0\0\0\x40\0\0\0\x3d\0\0\0\x10\0\0\0\x80\0\0\0\x41\0\0\0\x10\0\0\0\xc0\0\
\0\0\0\0\0\0\0\0\0\x02\x1b\0\0\0\0\0\0\0\0\0\0\x02\x1c\0\0\0\0\0\0\0\0\0\0\x02\
\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x71\0\0\0\x0c\0\0\0\x75\0\0\0\x01\0\0\
\x0c\x11\0\0\0\x8f\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\
\0\0\x13\0\0\0\x04\0\0\0\x04\0\0\0\x94\0\0\0\0\0\0\x0e\x14\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\x0a\x17\0\0\0\0\0\0\0\0\0\0\x09\x08\0\0\0\x9d\0\0\0\0\0\0\x0e\x16\0\
\0\0\x01\0\0\0\xa6\0\0\0\0\0\0\x0e\x08\0\0\0\x01\0\0\0\xae\0\0\0\0\0\0\x0e\x08\
\0\0\0\x01\0\0\0\xb6\0\0\0\0\0\0\x07\0\0\0\0\xc4\0\0\0\0\0\0\x07\0\0\0\0\x06\
\x02\0\0\x01\0\0\x0f\x04\0\0\0\x15\0\0\0\0\0\0\0\x04\0\0\0\x0e\x02\0\0\x01\0\0\
\x0f\x04\0\0\0\x18\0\0\0\0\0\0\0\x04\0\0\0\x16\x02\0\0\x02\0\0\x0f\x08\0\0\0\
\x19\0\0\0\0\0\0\0\x04\0\0\0\x1a\0\0\0\x04\0\0\0\x04\0\0\0\x1b\x02\0\0\x01\0\0\
\x0f\x20\0\0\0\x0b\0\0\0\0\0\0\0\x20\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\x52\x52\
\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x5f\x75\x33\x32\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x74\x79\x70\x65\0\x6d\x61\
\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x61\
\x72\x72\x61\x79\x6d\x61\x70\x31\0\x62\x70\x66\x5f\x69\x74\x65\x72\x5f\x5f\x62\
\x70\x66\x5f\x6d\x61\x70\x5f\x65\x6c\x65\x6d\0\x6d\x65\x74\x61\0\x6d\x61\x70\0\
\x63\x74\x78\0\x64\x75\x6d\x70\x5f\x62\x70\x66\x5f\x70\x65\x72\x63\x70\x75\x5f\
\x61\x72\x72\x61\x79\x5f\x6d\x61\x70\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\
\x6e\x73\x65\0\x6e\x75\x6d\x5f\x63\x70\x75\x73\0\x6b\x65\x79\x5f\x73\x75\x6d\0\
\x76\x61\x6c\x5f\x73\x75\x6d\0\x62\x70\x66\x5f\x69\x74\x65\x72\x5f\x6d\x65\x74\
\x61\0\x62\x70\x66\x5f\x6d\x61\x70\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\
\x75\x69\x6c\x64\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\
\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\
\x2f\x6c\x69\x6e\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\
\x2e\x31\x2e\x65\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\
\x2f\x74\x65\x73\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\
\x62\x70\x66\x2f\x70\x72\x6f\x67\x73\x2f\x62\x70\x66\x5f\x69\x74\x65\x72\x5f\
\x62\x70\x66\x5f\x70\x65\x72\x63\x70\x75\x5f\x61\x72\x72\x61\x79\x5f\x6d\x61\
\x70\x2e\x63\0\x09\x5f\x5f\x75\x33\x32\x20\x2a\x6b\x65\x79\x20\x3d\x20\x63\x74\
\x78\x2d\x3e\x6b\x65\x79\x3b\0\x09\x69\x66\x20\x28\x6b\x65\x79\x20\x3d\x3d\x20\
\x28\x76\x6f\x69\x64\x20\x2a\x29\x30\x20\x7c\x7c\x20\x70\x70\x74\x72\x20\x3d\
\x3d\x20\x28\x76\x6f\x69\x64\x20\x2a\x29\x30\x29\0\x09\x6b\x65\x79\x5f\x73\x75\
\x6d\x20\x2b\x3d\x20\x2a\x6b\x65\x79\x3b\0\x09\x66\x6f\x72\x20\x28\x69\x20\x3d\
\x20\x30\x3b\x20\x69\x20\x3c\x20\x6e\x75\x6d\x5f\x63\x70\x75\x73\x3b\x20\x69\
\x2b\x2b\x29\x20\x7b\0\x09\x09\x76\x61\x6c\x5f\x73\x75\x6d\x20\x2b\x3d\x20\x2a\
\x28\x5f\x5f\x75\x33\x32\x20\x2a\x29\x70\x70\x74\x72\x3b\0\x09\x09\x70\x70\x74\
\x72\x20\x2b\x3d\x20\x73\x74\x65\x70\x3b\0\x7d\0\x6c\x69\x63\x65\x6e\x73\x65\0\
\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x62\x73\x73\0\x2e\x6d\x61\x70\x73\0\x69\x74\
\x65\x72\x2f\x62\x70\x66\x5f\x6d\x61\x70\x5f\x65\x6c\x65\x6d\0\0\x9f\xeb\x01\0\
\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\x0c\x01\0\0\x20\x01\0\0\0\0\0\0\x08\0\0\
\0\x21\x02\0\0\x01\0\0\0\0\0\0\0\x12\0\0\0\x10\0\0\0\x21\x02\0\0\x10\0\0\0\0\0\
\0\0\xcc\0\0\0\x5f\x01\0\0\x14\x78\0\0\x08\0\0\0\xcc\0\0\0\x77\x01\0\0\x17\x8c\
\0\0\x10\0\0\0\xcc\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\xcc\0\0\0\x77\x01\0\0\x17\
\x8c\0\0\x20\0\0\0\xcc\0\0\0\xa3\x01\0\0\x0d\x98\0\0\x28\0\0\0\xcc\0\0\0\xa3\
\x01\0\0\x0a\x98\0\0\x50\0\0\0\xcc\0\0\0\xb5\x01\0\0\x12\xa4\0\0\x68\0\0\0\xcc\
\0\0\0\xb5\x01\0\0\x02\xa4\0\0\x78\0\0\0\xcc\0\0\0\xd7\x01\0\0\x0b\xa8\0\0\x90\
\0\0\0\xcc\0\0\0\xd7\x01\0\0\x0e\xa8\0\0\x98\0\0\0\xcc\0\0\0\xd7\x01\0\0\x0b\
\xa8\0\0\xa8\0\0\0\xcc\0\0\0\xf4\x01\0\0\x08\xac\0\0\xb0\0\0\0\xcc\0\0\0\xb5\
\x01\0\0\x1d\xa4\0\0\xb8\0\0\0\xcc\0\0\0\xb5\x01\0\0\x12\xa4\0\0\xc0\0\0\0\xcc\
\0\0\0\xb5\x01\0\0\x02\xa4\0\0\xc8\0\0\0\xcc\0\0\0\x04\x02\0\0\x01\xb8\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xd6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x18\x01\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\
\x02\0\0\0\0\0\0\xd8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x23\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xf8\x02\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2b\0\0\
\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xfc\x02\0\0\0\0\0\0\x04\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x33\0\0\0\x08\0\0\0\
\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xb2\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x20\x03\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x02\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xc8\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x03\
\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xcd\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x08\0\0\0\0\0\0\
\x40\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __BPF_ITER_BPF_PERCPU_ARRAY_MAP_SKEL_H__ */
