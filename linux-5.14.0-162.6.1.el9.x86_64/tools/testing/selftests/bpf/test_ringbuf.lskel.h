/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */
/* THIS FILE IS AUTOGENERATED! */
#ifndef __TEST_RINGBUF_LSKEL_SKEL_H__
#define __TEST_RINGBUF_LSKEL_SKEL_H__

#include <stdlib.h>
#include <bpf/bpf.h>
#include <bpf/skel_internal.h>

struct test_ringbuf_lskel {
	struct bpf_loader_ctx ctx;
	struct {
		struct bpf_map_desc ringbuf;
		struct bpf_map_desc bss;
	} maps;
	struct {
		struct bpf_prog_desc test_ringbuf;
	} progs;
	struct {
		int test_ringbuf_fd;
	} links;
	struct test_ringbuf_lskel__bss {
		int pid;
		char __pad0[4];
		long value;
		long flags;
		long total;
		long discarded;
		long dropped;
		long avail_data;
		long ring_size;
		long cons_pos;
		long prod_pos;
		long seq;
	} *bss;
};

static inline int
test_ringbuf_lskel__test_ringbuf__attach(struct test_ringbuf_lskel *skel)
{
	int prog_fd = skel->progs.test_ringbuf.prog_fd;
	int fd = bpf_raw_tracepoint_open(NULL, prog_fd);

	if (fd > 0)
		skel->links.test_ringbuf_fd = fd;
	return fd;
}

static inline int
test_ringbuf_lskel__attach(struct test_ringbuf_lskel *skel)
{
	int ret = 0;

	ret = ret < 0 ? ret : test_ringbuf_lskel__test_ringbuf__attach(skel);
	return ret < 0 ? ret : 0;
}

static inline void
test_ringbuf_lskel__detach(struct test_ringbuf_lskel *skel)
{
	skel_closenz(skel->links.test_ringbuf_fd);
}
static void
test_ringbuf_lskel__destroy(struct test_ringbuf_lskel *skel)
{
	if (!skel)
		return;
	test_ringbuf_lskel__detach(skel);
	skel_closenz(skel->progs.test_ringbuf.prog_fd);
	skel_closenz(skel->maps.ringbuf.map_fd);
	munmap(skel->bss, 4096);
	skel_closenz(skel->maps.bss.map_fd);
	free(skel);
}
static inline struct test_ringbuf_lskel *
test_ringbuf_lskel__open(void)
{
	struct test_ringbuf_lskel *skel;

	skel = calloc(sizeof(*skel), 1);
	if (!skel)
		goto cleanup;
	skel->ctx.sz = (void *)&skel->links - (void *)skel;
	skel->bss =
		mmap(NULL, 4096, PROT_READ | PROT_WRITE,
		     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
	if (skel->bss == (void *) -1)
		goto cleanup;
	memcpy(skel->bss, (void *)"\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0", 88);
	skel->maps.bss.initial_value = (__u64)(long)skel->bss;
	return skel;
cleanup:
	test_ringbuf_lskel__destroy(skel);
	return NULL;
}

static inline int
test_ringbuf_lskel__load(struct test_ringbuf_lskel *skel)
{
	struct bpf_load_and_run_opts opts = {};
	int err;

	opts.ctx = (struct bpf_loader_ctx *)skel;
	opts.data_sz = 4760;
	opts.data = (void *)"\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\
\x18\0\0\0\0\0\0\0\x50\x02\0\0\x50\x02\0\0\x5c\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\
\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\
\0\0\x04\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\
\0\x04\x08\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\0\0\0\x0e\x05\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x26\0\0\0\x07\0\
\0\0\x2a\0\0\0\x01\0\0\x0c\x08\0\0\0\x37\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\
\0\0\0\0\0\0\0\x03\0\0\0\0\x0a\0\0\0\x04\0\0\0\x04\0\0\0\x3c\0\0\0\0\0\0\x0e\
\x0b\0\0\0\x01\0\0\0\x45\0\0\0\0\0\0\x0e\x02\0\0\0\x01\0\0\0\x49\0\0\0\0\0\0\
\x01\x08\0\0\0\x40\0\0\x01\x4e\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x54\0\0\0\0\
\0\0\x0e\x0e\0\0\0\x01\0\0\0\x5a\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x60\0\0\0\
\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x6a\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x72\0\0\
\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x7d\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x87\0\
\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x99\
\0\0\0\0\0\0\x0e\x0e\0\0\0\x01\0\0\0\x30\x04\0\0\x01\0\0\x0f\x04\0\0\0\x0c\0\0\
\0\0\0\0\0\x04\0\0\0\x38\x04\0\0\x0b\0\0\x0f\x58\0\0\0\x0d\0\0\0\0\0\0\0\x04\0\
\0\0\x0f\0\0\0\x08\0\0\0\x08\0\0\0\x10\0\0\0\x10\0\0\0\x08\0\0\0\x11\0\0\0\x18\
\0\0\0\x08\0\0\0\x12\0\0\0\x20\0\0\0\x08\0\0\0\x13\0\0\0\x28\0\0\0\x08\0\0\0\
\x14\0\0\0\x30\0\0\0\x08\0\0\0\x15\0\0\0\x38\0\0\0\x08\0\0\0\x16\0\0\0\x40\0\0\
\0\x08\0\0\0\x17\0\0\0\x48\0\0\0\x08\0\0\0\x18\0\0\0\x50\0\0\0\x08\0\0\0\x3d\
\x04\0\0\x01\0\0\x0f\x08\0\0\0\x06\0\0\0\0\0\0\0\x08\0\0\0\0\x69\x6e\x74\0\x5f\
\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\
\x79\x70\x65\0\x72\x69\x6e\x67\x62\x75\x66\0\x63\x74\x78\0\x74\x65\x73\x74\x5f\
\x72\x69\x6e\x67\x62\x75\x66\0\x63\x68\x61\x72\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x70\x69\x64\0\x6c\x6f\x6e\x67\0\x76\x61\x6c\x75\x65\0\x66\x6c\x61\x67\
\x73\0\x74\x6f\x74\x61\x6c\0\x64\x69\x73\x63\x61\x72\x64\x65\x64\0\x64\x72\x6f\
\x70\x70\x65\x64\0\x61\x76\x61\x69\x6c\x5f\x64\x61\x74\x61\0\x72\x69\x6e\x67\
\x5f\x73\x69\x7a\x65\0\x63\x6f\x6e\x73\x5f\x70\x6f\x73\0\x70\x72\x6f\x64\x5f\
\x70\x6f\x73\0\x73\x65\x71\0\x2f\x72\x6f\x6f\x74\x2f\x72\x70\x6d\x62\x75\x69\
\x6c\x64\x2f\x42\x55\x49\x4c\x44\x2f\x6b\x65\x72\x6e\x65\x6c\x2d\x35\x2e\x31\
\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\x2e\x65\x6c\x39\x5f\x31\x2f\x6c\
\x69\x6e\x75\x78\x2d\x35\x2e\x31\x34\x2e\x30\x2d\x31\x36\x32\x2e\x36\x2e\x31\
\x2e\x65\x6c\x39\x2e\x78\x38\x36\x5f\x36\x34\x2f\x74\x6f\x6f\x6c\x73\x2f\x74\
\x65\x73\x74\x69\x6e\x67\x2f\x73\x65\x6c\x66\x74\x65\x73\x74\x73\x2f\x62\x70\
\x66\x2f\x70\x72\x6f\x67\x73\x2f\x74\x65\x73\x74\x5f\x72\x69\x6e\x67\x62\x75\
\x66\x2e\x63\0\x09\x69\x6e\x74\x20\x63\x75\x72\x5f\x70\x69\x64\x20\x3d\x20\x62\
\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\
\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\x09\x69\x66\x20\x28\x63\
\x75\x72\x5f\x70\x69\x64\x20\x21\x3d\x20\x70\x69\x64\x29\0\x09\x73\x61\x6d\x70\
\x6c\x65\x20\x3d\x20\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x72\x65\
\x73\x65\x72\x76\x65\x28\x26\x72\x69\x6e\x67\x62\x75\x66\x2c\x20\x73\x69\x7a\
\x65\x6f\x66\x28\x2a\x73\x61\x6d\x70\x6c\x65\x29\x2c\x20\x30\x29\x3b\0\x09\x69\
\x66\x20\x28\x21\x73\x61\x6d\x70\x6c\x65\x29\x20\x7b\0\x09\x09\x5f\x5f\x73\x79\
\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\x64\x28\x26\x64\
\x72\x6f\x70\x70\x65\x64\x2c\x20\x31\x29\x3b\0\x09\x73\x61\x6d\x70\x6c\x65\x2d\
\x3e\x70\x69\x64\x20\x3d\x20\x70\x69\x64\x3b\0\x09\x62\x70\x66\x5f\x67\x65\x74\
\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x63\x6f\x6d\x6d\x28\x73\x61\x6d\x70\x6c\
\x65\x2d\x3e\x63\x6f\x6d\x6d\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x61\x6d\
\x70\x6c\x65\x2d\x3e\x63\x6f\x6d\x6d\x29\x29\x3b\0\x09\x73\x61\x6d\x70\x6c\x65\
\x2d\x3e\x76\x61\x6c\x75\x65\x20\x3d\x20\x76\x61\x6c\x75\x65\x3b\0\x09\x73\x61\
\x6d\x70\x6c\x65\x2d\x3e\x73\x65\x71\x20\x3d\x20\x73\x65\x71\x2b\x2b\x3b\0\x09\
\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\x6e\x64\x5f\x61\x64\
\x64\x28\x26\x74\x6f\x74\x61\x6c\x2c\x20\x31\x29\x3b\0\x09\x69\x66\x20\x28\x73\
\x61\x6d\x70\x6c\x65\x2d\x3e\x73\x65\x71\x20\x26\x20\x31\x29\x20\x7b\0\x09\x09\
\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x6f\x75\x74\x70\x75\x74\x28\
\x26\x72\x69\x6e\x67\x62\x75\x66\x2c\x20\x73\x61\x6d\x70\x6c\x65\x2c\x20\x73\
\x69\x7a\x65\x6f\x66\x28\x2a\x73\x61\x6d\x70\x6c\x65\x29\x2c\x20\x66\x6c\x61\
\x67\x73\x29\x3b\0\x09\x09\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x64\
\x69\x73\x63\x61\x72\x64\x28\x73\x61\x6d\x70\x6c\x65\x2c\x20\x66\x6c\x61\x67\
\x73\x29\x3b\0\x09\x09\x5f\x5f\x73\x79\x6e\x63\x5f\x66\x65\x74\x63\x68\x5f\x61\
\x6e\x64\x5f\x61\x64\x64\x28\x26\x64\x69\x73\x63\x61\x72\x64\x65\x64\x2c\x20\
\x31\x29\x3b\0\x09\x09\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\
\x62\x6d\x69\x74\x28\x73\x61\x6d\x70\x6c\x65\x2c\x20\x66\x6c\x61\x67\x73\x29\
\x3b\0\x09\x61\x76\x61\x69\x6c\x5f\x64\x61\x74\x61\x20\x3d\x20\x62\x70\x66\x5f\
\x72\x69\x6e\x67\x62\x75\x66\x5f\x71\x75\x65\x72\x79\x28\x26\x72\x69\x6e\x67\
\x62\x75\x66\x2c\x20\x42\x50\x46\x5f\x52\x42\x5f\x41\x56\x41\x49\x4c\x5f\x44\
\x41\x54\x41\x29\x3b\0\x09\x72\x69\x6e\x67\x5f\x73\x69\x7a\x65\x20\x3d\x20\x62\
\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x71\x75\x65\x72\x79\x28\x26\x72\
\x69\x6e\x67\x62\x75\x66\x2c\x20\x42\x50\x46\x5f\x52\x42\x5f\x52\x49\x4e\x47\
\x5f\x53\x49\x5a\x45\x29\x3b\0\x09\x63\x6f\x6e\x73\x5f\x70\x6f\x73\x20\x3d\x20\
\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x71\x75\x65\x72\x79\x28\x26\
\x72\x69\x6e\x67\x62\x75\x66\x2c\x20\x42\x50\x46\x5f\x52\x42\x5f\x43\x4f\x4e\
\x53\x5f\x50\x4f\x53\x29\x3b\0\x09\x70\x72\x6f\x64\x5f\x70\x6f\x73\x20\x3d\x20\
\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x71\x75\x65\x72\x79\x28\x26\
\x72\x69\x6e\x67\x62\x75\x66\x2c\x20\x42\x50\x46\x5f\x52\x42\x5f\x50\x52\x4f\
\x44\x5f\x50\x4f\x53\x29\x3b\0\x7d\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x62\x73\
\x73\0\x2e\x6d\x61\x70\x73\0\x66\x65\x6e\x74\x72\x79\x2f\x5f\x5f\x78\x36\x34\
\x5f\x73\x79\x73\x5f\x67\x65\x74\x70\x67\x69\x64\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xc4\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1b\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x72\x69\x6e\x67\x62\x75\x66\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x58\0\0\0\x01\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\x74\x65\x73\x74\x5f\x72\x69\x6e\x2e\x62\x73\x73\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\x50\x4c\
\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x18\x61\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\
\0\0\0\0\0\x77\0\0\0\x20\0\0\0\x5e\x01\x55\0\0\0\0\0\x18\x51\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xb7\x02\0\0\x20\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\
\x06\0\0\0\0\0\0\x55\x06\x05\0\0\0\0\0\xb7\x01\0\0\x01\0\0\0\x18\x62\0\0\x01\0\
\0\0\0\0\0\0\x28\0\0\0\xdb\x12\0\0\0\0\0\0\x05\0\x49\0\0\0\0\0\x18\x61\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\x61\x11\0\0\0\0\0\0\x63\x16\0\0\0\0\0\0\xbf\x61\0\0\0\0\
\0\0\x07\x01\0\0\x10\0\0\0\xb4\x02\0\0\x10\0\0\0\x85\0\0\0\x10\0\0\0\x18\x61\0\
\0\x01\0\0\0\0\0\0\0\x08\0\0\0\x79\x11\0\0\0\0\0\0\x7b\x16\x08\0\0\0\0\0\x18\
\x61\0\0\x01\0\0\0\0\0\0\0\x50\0\0\0\x79\x12\0\0\0\0\0\0\xbf\x23\0\0\0\0\0\0\
\x07\x03\0\0\x01\0\0\0\x7b\x31\0\0\0\0\0\0\x63\x26\x04\0\0\0\0\0\xb7\x07\0\0\
\x01\0\0\0\x18\x61\0\0\x01\0\0\0\0\0\0\0\x18\0\0\0\xb7\x02\0\0\x01\0\0\0\xdb\
\x21\0\0\0\0\0\0\x18\x68\0\0\x01\0\0\0\0\0\0\0\x10\0\0\0\x79\x84\0\0\0\0\0\0\
\x61\x61\x04\0\0\0\0\0\x54\x01\0\0\x01\0\0\0\x16\x01\x0c\0\0\0\0\0\x18\x51\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xbf\x62\0\0\0\0\0\0\xb7\x03\0\0\x20\0\0\0\x85\0\0\0\
\x82\0\0\0\x79\x82\0\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\x85\0\0\0\x85\0\0\0\x18\x61\
\0\0\x01\0\0\0\0\0\0\0\x20\0\0\0\xdb\x71\0\0\0\0\0\0\x05\0\x03\0\0\0\0\0\xbf\
\x61\0\0\0\0\0\0\xbf\x42\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\x18\x51\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x86\0\0\0\x18\x61\0\0\x01\0\0\0\0\
\0\0\0\x30\0\0\0\x7b\x01\0\0\0\0\0\0\x18\x51\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\
\x02\0\0\x01\0\0\0\x85\0\0\0\x86\0\0\0\x18\x61\0\0\x01\0\0\0\0\0\0\0\x38\0\0\0\
\x7b\x01\0\0\0\0\0\0\x18\x51\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x02\0\0\0\
\x85\0\0\0\x86\0\0\0\x18\x61\0\0\x01\0\0\0\0\0\0\0\x40\0\0\0\x7b\x01\0\0\0\0\0\
\0\x18\x51\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x03\0\0\0\x85\0\0\0\x86\0\0\
\0\x18\x61\0\0\x01\0\0\0\0\0\0\0\x48\0\0\0\x7b\x01\0\0\0\0\0\0\xb4\0\0\0\0\0\0\
\0\x95\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\0\0\0\0\x9d\0\0\0\x1f\x01\0\0\x10\xa4\0\
\0\x01\0\0\0\x9d\0\0\0\x50\x01\0\0\x11\xb4\0\0\x04\0\0\0\x9d\0\0\0\x1f\x01\0\0\
\x2b\xa4\0\0\x05\0\0\0\x9d\0\0\0\x50\x01\0\0\x06\xb4\0\0\x06\0\0\0\x9d\0\0\0\
\x65\x01\0\0\x0b\xc0\0\0\x0c\0\0\0\x9d\0\0\0\xa2\x01\0\0\x06\xc4\0\0\x0e\0\0\0\
\x9d\0\0\0\xb2\x01\0\0\x03\xc8\0\0\x12\0\0\0\x9d\0\0\0\xd7\x01\0\0\x10\xd8\0\0\
\x15\0\0\0\x9d\0\0\0\xd7\x01\0\0\x0e\xd8\0\0\x16\0\0\0\x9d\0\0\0\xeb\x01\0\0\
\x1f\xdc\0\0\x18\0\0\0\x9d\0\0\0\xeb\x01\0\0\x02\xdc\0\0\x1a\0\0\0\x9d\0\0\0\
\x26\x02\0\0\x12\xe0\0\0\x1d\0\0\0\x9d\0\0\0\x26\x02\0\0\x10\xe0\0\0\x1e\0\0\0\
\x9d\0\0\0\x3e\x02\0\0\x13\xe8\0\0\x24\0\0\0\x9d\0\0\0\x3e\x02\0\0\x0e\xe8\0\0\
\x26\0\0\0\x9d\0\0\0\x54\x02\0\0\x02\xec\0\0\x2a\0\0\0\x9d\0\0\0\0\0\0\0\0\0\0\
\0\x2d\0\0\0\x9d\0\0\0\x76\x02\0\0\x0e\xf4\0\0\x2e\0\0\0\x9d\0\0\0\x76\x02\0\0\
\x12\xf4\0\0\x2f\0\0\0\x9d\0\0\0\x76\x02\0\0\x06\xf4\0\0\x30\0\0\0\x9d\0\0\0\
\x8e\x02\0\0\x03\xfc\0\0\x35\0\0\0\x9d\0\0\0\xce\x02\0\0\x1f\x04\x01\0\x36\0\0\
\0\x9d\0\0\0\xce\x02\0\0\x03\x04\x01\0\x38\0\0\0\x9d\0\0\0\xf4\x02\0\0\x03\x08\
\x01\0\x3c\0\0\0\x9d\0\0\0\x1b\x03\0\0\x03\x10\x01\0\x3f\0\0\0\x9d\0\0\0\x40\
\x03\0\0\x0f\x1c\x01\0\x43\0\0\0\x9d\0\0\0\x40\x03\0\0\x0d\x1c\x01\0\x46\0\0\0\
\x9d\0\0\0\x7e\x03\0\0\x0e\x20\x01\0\x4a\0\0\0\x9d\0\0\0\x7e\x03\0\0\x0c\x20\
\x01\0\x4d\0\0\0\x9d\0\0\0\xba\x03\0\0\x0d\x24\x01\0\x51\0\0\0\x9d\0\0\0\xba\
\x03\0\0\x0b\x24\x01\0\x54\0\0\0\x9d\0\0\0\xf4\x03\0\0\x0d\x28\x01\0\x58\0\0\0\
\x9d\0\0\0\xf4\x03\0\0\x0b\x28\x01\0\x5b\0\0\0\x9d\0\0\0\x2e\x04\0\0\x01\x34\
\x01\0\x1a\0\0\0\x5d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x74\x65\x73\x74\x5f\x72\x69\x6e\x67\x62\x75\x66\0\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x10\0\0\0\
\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x5f\x5f\
\x78\x36\x34\x5f\x73\x79\x73\x5f\x67\x65\x74\x70\x67\x69\x64\0\0\0\0\0\0\0";
	opts.insns_sz = 1616;
	opts.insns = (void *)"\
\xbf\x16\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\x78\xff\xff\xff\xb7\x02\0\
\0\x88\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x71\0\0\0\x05\0\x17\0\0\0\0\0\x61\
\xa1\x78\xff\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x7c\xff\
\0\0\0\0\xd5\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x61\xa1\x80\xff\0\0\0\0\xd5\
\x01\x01\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\
\x01\0\0\0\0\0\0\xd5\x01\x02\0\0\0\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\
\x18\x60\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x61\x01\0\0\0\0\0\0\xd5\x01\x02\0\0\0\0\
\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\xbf\x70\0\0\0\0\0\0\x95\0\0\0\0\0\0\
\0\x61\x60\x08\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xe0\x0b\0\0\x63\x01\0\0\0\
\0\0\0\x61\x60\x0c\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xdc\x0b\0\0\x63\x01\0\
\0\0\0\0\0\x79\x60\x10\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xd0\x0b\0\0\x7b\
\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\x18\x61\0\0\0\0\0\0\0\0\
\0\0\xc8\x0b\0\0\x7b\x01\0\0\0\0\0\0\xb7\x01\0\0\x12\0\0\0\x18\x62\0\0\0\0\0\0\
\0\0\0\0\xc8\x0b\0\0\xb7\x03\0\0\x1c\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\
\0\0\xc5\x07\xd1\xff\0\0\0\0\x63\x7a\x78\xff\0\0\0\0\x61\x60\x20\0\0\0\0\0\x15\
\0\x03\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xf4\x0b\0\0\x63\x01\0\0\0\0\0\0\
\xb7\x01\0\0\0\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\xe8\x0b\0\0\xb7\x03\0\0\x40\0\
\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\xc4\xff\0\0\0\0\x18\x61\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\x71\0\0\0\0\0\0\x61\xa0\x78\xff\0\0\0\0\x18\x61\
\0\0\0\0\0\0\0\0\0\0\x58\x0c\0\0\x63\x01\0\0\0\0\0\0\x61\x60\x30\0\0\0\0\0\x15\
\0\x03\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x34\x0c\0\0\x63\x01\0\0\0\0\0\0\
\xb7\x01\0\0\0\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\x28\x0c\0\0\xb7\x03\0\0\x40\0\
\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\xb1\xff\0\0\0\0\x18\x61\0\
\0\0\0\0\0\0\0\0\0\x04\0\0\0\x63\x71\0\0\0\0\0\0\x79\x63\x28\0\0\0\0\0\x15\x03\
\x04\0\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x68\x0c\0\0\xb7\x02\0\0\x58\0\0\0\
\x85\0\0\0\x94\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x61\x20\0\0\0\0\0\0\
\x18\x61\0\0\0\0\0\0\0\0\0\0\xc8\x0c\0\0\x63\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\
\0\0\0\0\0\xc0\x0c\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xd0\x0c\0\0\x7b\x01\0\0\0\0\
\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\x68\x0c\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\xd8\
\x0c\0\0\x7b\x01\0\0\0\0\0\0\xb7\x01\0\0\x02\0\0\0\x18\x62\0\0\0\0\0\0\0\0\0\0\
\xc8\x0c\0\0\xb7\x03\0\0\x20\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\
\x07\x91\xff\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xe8\x0c\0\0\x18\x61\0\0\0\0\0\
\0\0\0\0\0\x10\x12\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xf0\x0c\
\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x08\x12\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\
\0\0\0\0\0\0\0\xd8\x0f\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x50\x12\0\0\x7b\x01\0\0\
\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\xe0\x0f\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\
\x60\x12\0\0\x7b\x01\0\0\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x61\0\
\0\0\0\0\0\0\0\0\0\x78\x12\0\0\x7b\x01\0\0\0\0\0\0\x61\x60\x08\0\0\0\0\0\x18\
\x61\0\0\0\0\0\0\0\0\0\0\x18\x12\0\0\x63\x01\0\0\0\0\0\0\x61\x60\x0c\0\0\0\0\0\
\x18\x61\0\0\0\0\0\0\0\0\0\0\x1c\x12\0\0\x63\x01\0\0\0\0\0\0\x79\x60\x10\0\0\0\
\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x20\x12\0\0\x7b\x01\0\0\0\0\0\0\x61\xa0\x78\
\xff\0\0\0\0\x18\x61\0\0\0\0\0\0\0\0\0\0\x48\x12\0\0\x63\x01\0\0\0\0\0\0\x18\
\x61\0\0\0\0\0\0\0\0\0\0\x80\x12\0\0\xb7\x02\0\0\x12\0\0\0\xb7\x03\0\0\x0c\0\0\
\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\xa7\0\0\0\xbf\x07\0\0\0\0\0\0\xc5\x07\x60\xff\
\0\0\0\0\x18\x60\0\0\0\0\0\0\0\0\0\0\0\x12\0\0\x63\x70\x6c\0\0\0\0\0\x77\x07\0\
\0\x20\0\0\0\x63\x70\x70\0\0\0\0\0\xb7\x01\0\0\x05\0\0\0\x18\x62\0\0\0\0\0\0\0\
\0\0\0\0\x12\0\0\xb7\x03\0\0\x80\0\0\0\x85\0\0\0\xa6\0\0\0\xbf\x07\0\0\0\0\0\0\
\x18\x60\0\0\0\0\0\0\0\0\0\0\x70\x12\0\0\x61\x01\0\0\0\0\0\0\xd5\x01\x02\0\0\0\
\0\0\xbf\x19\0\0\0\0\0\0\x85\0\0\0\xa8\0\0\0\xc5\x07\x4e\xff\0\0\0\0\x63\x7a\
\x80\xff\0\0\0\0\x61\xa1\x78\xff\0\0\0\0\xd5\x01\x02\0\0\0\0\0\xbf\x19\0\0\0\0\
\0\0\x85\0\0\0\xa8\0\0\0\x61\xa0\x80\xff\0\0\0\0\x63\x06\x38\0\0\0\0\0\x18\x61\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x61\x10\0\0\0\0\0\0\x63\x06\x18\0\0\0\0\0\x18\x61\
\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x61\x10\0\0\0\0\0\0\x63\x06\x28\0\0\0\0\0\xb7\0\
\0\0\0\0\0\0\x95\0\0\0\0\0\0\0";
	err = bpf_load_and_run(&opts);
	if (err < 0)
		return err;
	skel->bss =
		mmap(skel->bss, 4096, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_FIXED,
			skel->maps.bss.map_fd, 0);
	return 0;
}

static inline struct test_ringbuf_lskel *
test_ringbuf_lskel__open_and_load(void)
{
	struct test_ringbuf_lskel *skel;

	skel = test_ringbuf_lskel__open();
	if (!skel)
		return NULL;
	if (test_ringbuf_lskel__load(skel)) {
		test_ringbuf_lskel__destroy(skel);
		return NULL;
	}
	return skel;
}

#endif /* __TEST_RINGBUF_LSKEL_SKEL_H__ */
