.\" Man page generated from reStructuredText.
.
.TH BPF 2 "" "" ""
.SH NAME
bpf \- Perform a command on an extended BPF object
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Copyright (C) All BPF authors and contributors from 2014 to present.
.
.\" See git log include/uapi/linux/bpf.h in kernel tree for details.
.
.\" 
.
.\" %%%LICENSE_START(VERBATIM)
.
.\" Permission is granted to make and distribute verbatim copies of this
.
.\" manual provided the copyright notice and this permission notice are
.
.\" preserved on all copies.
.
.\" 
.
.\" Permission is granted to copy and distribute modified versions of this
.
.\" manual under the conditions for verbatim copying, provided that the
.
.\" entire resulting derived work is distributed under the terms of a
.
.\" permission notice identical to this one.
.
.\" 
.
.\" Since the Linux kernel and libraries are constantly changing, this
.
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.
.\" responsibility for errors or omissions, or for damages resulting from
.
.\" the use of the information contained herein.  The author(s) may not
.
.\" have taken the same level of care in the production of this manual,
.
.\" which is licensed free of charge, as they might when working
.
.\" professionally.
.
.\" 
.
.\" Formatted or processed versions of this manual, if unaccompanied by
.
.\" the source, must acknowledge the copyright and authors of this work.
.
.\" %%%LICENSE_END
.
.\" 
.
.\" Please do not edit this file. It was generated from the documentation
.
.\" located in file include/uapi/linux/bpf.h of the Linux kernel sources
.
.\" (helpers description), and from scripts/bpf_doc.py in the same
.
.\" repository (header and footer).
.
.SH COMMANDS
.INDENT 0.0
.TP
.B \fBBPF_MAP_CREATE\fP
.INDENT 7.0
.TP
.B Description
Create a map and return a file descriptor that refers to the
map. The close\-on\-exec file descriptor flag (see \fBfcntl\fP(2))
is automatically enabled for the new file descriptor.
.sp
Applying \fBclose\fP(2) to the file descriptor returned by
\fBBPF_MAP_CREATE\fP will delete the map (but see NOTES).
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_MAP_LOOKUP_ELEM\fP
.INDENT 7.0
.TP
.B Description
Look up an element with a given \fIkey\fP in the map referred to
by the file descriptor \fImap_fd\fP\&.
.sp
The \fIflags\fP argument may be specified as one of the
following:
.INDENT 7.0
.TP
.B \fBBPF_F_LOCK\fP
Look up the value of a spin\-locked map without
returning the lock. This must be specified if the
elements contain a spinlock.
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_UPDATE_ELEM\fP
.INDENT 7.0
.TP
.B Description
Create or update an element (key/value pair) in a specified map.
.sp
The \fIflags\fP argument should be specified as one of the
following:
.INDENT 7.0
.TP
.B \fBBPF_ANY\fP
Create a new element or update an existing element.
.TP
.B \fBBPF_NOEXIST\fP
Create a new element only if it did not exist.
.TP
.B \fBBPF_EXIST\fP
Update an existing element.
.TP
.B \fBBPF_F_LOCK\fP
Update a spin_lock\-ed map element.
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.sp
May set \fIerrno\fP to \fBEINVAL\fP, \fBEPERM\fP, \fBENOMEM\fP,
\fBE2BIG\fP, \fBEEXIST\fP, or \fBENOENT\fP\&.
.INDENT 7.0
.TP
.B \fBE2BIG\fP
The number of elements in the map reached the
\fImax_entries\fP limit specified at map creation time.
.TP
.B \fBEEXIST\fP
If \fIflags\fP specifies \fBBPF_NOEXIST\fP and the element
with \fIkey\fP already exists in the map.
.TP
.B \fBENOENT\fP
If \fIflags\fP specifies \fBBPF_EXIST\fP and the element with
\fIkey\fP does not exist in the map.
.UNINDENT
.UNINDENT
.TP
.B \fBBPF_MAP_DELETE_ELEM\fP
.INDENT 7.0
.TP
.B Description
Look up and delete an element by key in a specified map.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_GET_NEXT_KEY\fP
.INDENT 7.0
.TP
.B Description
Look up an element by key in a specified map and return the key
of the next element. Can be used to iterate over all elements
in the map.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.sp
The following cases can be used to iterate over all elements of
the map:
.INDENT 7.0
.IP \(bu 2
If \fIkey\fP is not found, the operation returns zero and sets
the \fInext_key\fP pointer to the key of the first element.
.IP \(bu 2
If \fIkey\fP is found, the operation returns zero and sets the
\fInext_key\fP pointer to the key of the next element.
.IP \(bu 2
If \fIkey\fP is the last element, returns \-1 and \fIerrno\fP is set
to \fBENOENT\fP\&.
.UNINDENT
.sp
May set \fIerrno\fP to \fBENOMEM\fP, \fBEFAULT\fP, \fBEPERM\fP, or
\fBEINVAL\fP on error.
.UNINDENT
.TP
.B \fBBPF_PROG_LOAD\fP
.INDENT 7.0
.TP
.B Description
Verify and load an eBPF program, returning a new file
descriptor associated with the program.
.sp
Applying \fBclose\fP(2) to the file descriptor returned by
\fBBPF_PROG_LOAD\fP will unload the eBPF program (but see NOTES).
.sp
The close\-on\-exec file descriptor flag (see \fBfcntl\fP(2)) is
automatically enabled for the new file descriptor.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_OBJ_PIN\fP
.INDENT 7.0
.TP
.B Description
Pin an eBPF program or map referred by the specified \fIbpf_fd\fP
to the provided \fIpathname\fP on the filesystem.
.sp
The \fIpathname\fP argument must not contain a dot (".").
.sp
On success, \fIpathname\fP retains a reference to the eBPF object,
preventing deallocation of the object when the original
\fIbpf_fd\fP is closed. This allow the eBPF object to live beyond
\fBclose\fP(\fIbpf_fd\fP), and hence the lifetime of the parent
process.
.sp
Applying \fBunlink\fP(2) or similar calls to the \fIpathname\fP
unpins the object from the filesystem, removing the reference.
If no other file descriptors or filesystem nodes refer to the
same object, it will be deallocated (see NOTES).
.sp
The filesystem type for the parent directory of \fIpathname\fP must
be \fBBPF_FS_MAGIC\fP\&.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_OBJ_GET\fP
.INDENT 7.0
.TP
.B Description
Open a file descriptor for the eBPF object pinned to the
specified \fIpathname\fP\&.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_PROG_ATTACH\fP
.INDENT 7.0
.TP
.B Description
Attach an eBPF program to a \fItarget_fd\fP at the specified
\fIattach_type\fP hook.
.sp
The \fIattach_type\fP specifies the eBPF attachment point to
attach the program to, and must be one of \fIbpf_attach_type\fP
(see below).
.sp
The \fIattach_bpf_fd\fP must be a valid file descriptor for a
loaded eBPF program of a cgroup, flow dissector, LIRC, sockmap
or sock_ops type corresponding to the specified \fIattach_type\fP\&.
.sp
The \fItarget_fd\fP must be a valid file descriptor for a kernel
object which depends on the attach type of \fIattach_bpf_fd\fP:
.sp
\fBBPF_PROG_TYPE_CGROUP_DEVICE\fP,
\fBBPF_PROG_TYPE_CGROUP_SKB\fP,
\fBBPF_PROG_TYPE_CGROUP_SOCK\fP,
\fBBPF_PROG_TYPE_CGROUP_SOCK_ADDR\fP,
\fBBPF_PROG_TYPE_CGROUP_SOCKOPT\fP,
\fBBPF_PROG_TYPE_CGROUP_SYSCTL\fP,
\fBBPF_PROG_TYPE_SOCK_OPS\fP
.INDENT 7.0
.INDENT 3.5
Control Group v2 hierarchy with the eBPF controller
enabled. Requires the kernel to be compiled with
\fBCONFIG_CGROUP_BPF\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBBPF_PROG_TYPE_FLOW_DISSECTOR\fP
.INDENT 7.0
.INDENT 3.5
Network namespace (eg /proc/self/ns/net).
.UNINDENT
.UNINDENT
.sp
\fBBPF_PROG_TYPE_LIRC_MODE2\fP
.INDENT 7.0
.INDENT 3.5
LIRC device path (eg /dev/lircN). Requires the kernel
to be compiled with \fBCONFIG_BPF_LIRC_MODE2\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBBPF_PROG_TYPE_SK_SKB\fP,
\fBBPF_PROG_TYPE_SK_MSG\fP
.INDENT 7.0
.INDENT 3.5
eBPF map of socket type (eg \fBBPF_MAP_TYPE_SOCKHASH\fP).
.UNINDENT
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_PROG_DETACH\fP
.INDENT 7.0
.TP
.B Description
Detach the eBPF program associated with the \fItarget_fd\fP at the
hook specified by \fIattach_type\fP\&. The program must have been
previously attached using \fBBPF_PROG_ATTACH\fP\&.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_PROG_TEST_RUN\fP
.INDENT 7.0
.TP
.B Description
Run the eBPF program associated with the \fIprog_fd\fP a \fIrepeat\fP
number of times against a provided program context \fIctx_in\fP and
data \fIdata_in\fP, and return the modified program context
\fIctx_out\fP, \fIdata_out\fP (for example, packet data), result of the
execution \fIretval\fP, and \fIduration\fP of the test run.
.sp
The sizes of the buffers provided as input and output
parameters \fIctx_in\fP, \fIctx_out\fP, \fIdata_in\fP, and \fIdata_out\fP must
be provided in the corresponding variables \fIctx_size_in\fP,
\fIctx_size_out\fP, \fIdata_size_in\fP, and/or \fIdata_size_out\fP\&. If any
of these parameters are not provided (ie set to NULL), the
corresponding size field must be zero.
.sp
Some program types have particular requirements:
.INDENT 7.0
.TP
.B \fBBPF_PROG_TYPE_SK_LOOKUP\fP
\fIdata_in\fP and \fIdata_out\fP must be NULL.
.UNINDENT
.sp
\fBBPF_PROG_TYPE_RAW_TRACEPOINT\fP,
\fBBPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE\fP
.INDENT 7.0
.INDENT 3.5
\fIctx_out\fP, \fIdata_in\fP and \fIdata_out\fP must be NULL.
\fIrepeat\fP must be zero.
.UNINDENT
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.INDENT 7.0
.TP
.B \fBENOSPC\fP
Either \fIdata_size_out\fP or \fIctx_size_out\fP is too small.
.TP
.B \fBENOTSUPP\fP
This command is not supported by the program type of
the program referred to by \fIprog_fd\fP\&.
.UNINDENT
.UNINDENT
.TP
.B \fBBPF_PROG_GET_NEXT_ID\fP
.INDENT 7.0
.TP
.B Description
Fetch the next eBPF program currently loaded into the kernel.
.sp
Looks for the eBPF program with an id greater than \fIstart_id\fP
and updates \fInext_id\fP on success. If no other eBPF programs
remain with ids higher than \fIstart_id\fP, returns \-1 and sets
\fIerrno\fP to \fBENOENT\fP\&.
.TP
.B Return
Returns zero on success. On error, or when no id remains, \-1
is returned and \fIerrno\fP is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_GET_NEXT_ID\fP
.INDENT 7.0
.TP
.B Description
Fetch the next eBPF map currently loaded into the kernel.
.sp
Looks for the eBPF map with an id greater than \fIstart_id\fP
and updates \fInext_id\fP on success. If no other eBPF maps
remain with ids higher than \fIstart_id\fP, returns \-1 and sets
\fIerrno\fP to \fBENOENT\fP\&.
.TP
.B Return
Returns zero on success. On error, or when no id remains, \-1
is returned and \fIerrno\fP is set appropriately.
.UNINDENT
.TP
.B \fBBPF_PROG_GET_FD_BY_ID\fP
.INDENT 7.0
.TP
.B Description
Open a file descriptor for the eBPF program corresponding to
\fIprog_id\fP\&.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_MAP_GET_FD_BY_ID\fP
.INDENT 7.0
.TP
.B Description
Open a file descriptor for the eBPF map corresponding to
\fImap_id\fP\&.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_OBJ_GET_INFO_BY_FD\fP
.INDENT 7.0
.TP
.B Description
Obtain information about the eBPF object corresponding to
\fIbpf_fd\fP\&.
.sp
Populates up to \fIinfo_len\fP bytes of \fIinfo\fP, which will be in
one of the following formats depending on the eBPF object type
of \fIbpf_fd\fP:
.INDENT 7.0
.IP \(bu 2
\fBstruct bpf_prog_info\fP
.IP \(bu 2
\fBstruct bpf_map_info\fP
.IP \(bu 2
\fBstruct bpf_btf_info\fP
.IP \(bu 2
\fBstruct bpf_link_info\fP
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_PROG_QUERY\fP
.INDENT 7.0
.TP
.B Description
Obtain information about eBPF programs associated with the
specified \fIattach_type\fP hook.
.sp
The \fItarget_fd\fP must be a valid file descriptor for a kernel
object which depends on the attach type of \fIattach_bpf_fd\fP:
.sp
\fBBPF_PROG_TYPE_CGROUP_DEVICE\fP,
\fBBPF_PROG_TYPE_CGROUP_SKB\fP,
\fBBPF_PROG_TYPE_CGROUP_SOCK\fP,
\fBBPF_PROG_TYPE_CGROUP_SOCK_ADDR\fP,
\fBBPF_PROG_TYPE_CGROUP_SOCKOPT\fP,
\fBBPF_PROG_TYPE_CGROUP_SYSCTL\fP,
\fBBPF_PROG_TYPE_SOCK_OPS\fP
.INDENT 7.0
.INDENT 3.5
Control Group v2 hierarchy with the eBPF controller
enabled. Requires the kernel to be compiled with
\fBCONFIG_CGROUP_BPF\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBBPF_PROG_TYPE_FLOW_DISSECTOR\fP
.INDENT 7.0
.INDENT 3.5
Network namespace (eg /proc/self/ns/net).
.UNINDENT
.UNINDENT
.sp
\fBBPF_PROG_TYPE_LIRC_MODE2\fP
.INDENT 7.0
.INDENT 3.5
LIRC device path (eg /dev/lircN). Requires the kernel
to be compiled with \fBCONFIG_BPF_LIRC_MODE2\fP\&.
.UNINDENT
.UNINDENT
.sp
\fBBPF_PROG_QUERY\fP always fetches the number of programs
attached and the \fIattach_flags\fP which were used to attach those
programs. Additionally, if \fIprog_ids\fP is nonzero and the number
of attached programs is less than \fIprog_cnt\fP, populates
\fIprog_ids\fP with the eBPF program ids of the programs attached
at \fItarget_fd\fP\&.
.sp
The following flags may alter the result:
.INDENT 7.0
.TP
.B \fBBPF_F_QUERY_EFFECTIVE\fP
Only return information regarding programs which are
currently effective at the specified \fItarget_fd\fP\&.
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_RAW_TRACEPOINT_OPEN\fP
.INDENT 7.0
.TP
.B Description
Attach an eBPF program to a tracepoint \fIname\fP to access kernel
internal arguments of the tracepoint in their raw form.
.sp
The \fIprog_fd\fP must be a valid file descriptor associated with
a loaded eBPF program of type \fBBPF_PROG_TYPE_RAW_TRACEPOINT\fP\&.
.sp
No ABI guarantees are made about the content of tracepoint
arguments exposed to the corresponding eBPF program.
.sp
Applying \fBclose\fP(2) to the file descriptor returned by
\fBBPF_RAW_TRACEPOINT_OPEN\fP will delete the map (but see NOTES).
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_BTF_LOAD\fP
.INDENT 7.0
.TP
.B Description
Verify and load BPF Type Format (BTF) metadata into the kernel,
returning a new file descriptor associated with the metadata.
BTF is described in more detail at
\fI\%https://www.kernel.org/doc/html/latest/bpf/btf.html\fP\&.
.sp
The \fIbtf\fP parameter must point to valid memory providing
\fIbtf_size\fP bytes of BTF binary metadata.
.sp
The returned file descriptor can be passed to other \fBbpf\fP()
subcommands such as \fBBPF_PROG_LOAD\fP or \fBBPF_MAP_CREATE\fP to
associate the BTF with those objects.
.sp
Similar to \fBBPF_PROG_LOAD\fP, \fBBPF_BTF_LOAD\fP has optional
parameters to specify a \fIbtf_log_buf\fP, \fIbtf_log_size\fP and
\fIbtf_log_level\fP which allow the kernel to return freeform log
output regarding the BTF verification process.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_BTF_GET_FD_BY_ID\fP
.INDENT 7.0
.TP
.B Description
Open a file descriptor for the BPF Type Format (BTF)
corresponding to \fIbtf_id\fP\&.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_TASK_FD_QUERY\fP
.INDENT 7.0
.TP
.B Description
Obtain information about eBPF programs associated with the
target process identified by \fIpid\fP and \fIfd\fP\&.
.sp
If the \fIpid\fP and \fIfd\fP are associated with a tracepoint, kprobe
or uprobe perf event, then the \fIprog_id\fP and \fIfd_type\fP will
be populated with the eBPF program id and file descriptor type
of type \fBbpf_task_fd_type\fP\&. If associated with a kprobe or
uprobe, the  \fIprobe_offset\fP and \fIprobe_addr\fP will also be
populated. Optionally, if \fIbuf\fP is provided, then up to
\fIbuf_len\fP bytes of \fIbuf\fP will be populated with the name of
the tracepoint, kprobe or uprobe.
.sp
The resulting \fIprog_id\fP may be introspected in deeper detail
using \fBBPF_PROG_GET_FD_BY_ID\fP and \fBBPF_OBJ_GET_INFO_BY_FD\fP\&.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_LOOKUP_AND_DELETE_ELEM\fP
.INDENT 7.0
.TP
.B Description
Look up an element with the given \fIkey\fP in the map referred to
by the file descriptor \fIfd\fP, and if found, delete the element.
.sp
For \fBBPF_MAP_TYPE_QUEUE\fP and \fBBPF_MAP_TYPE_STACK\fP map
types, the \fIflags\fP argument needs to be set to 0, but for other
map types, it may be specified as:
.INDENT 7.0
.TP
.B \fBBPF_F_LOCK\fP
Look up and delete the value of a spin\-locked map
without returning the lock. This must be specified if
the elements contain a spinlock.
.UNINDENT
.sp
The \fBBPF_MAP_TYPE_QUEUE\fP and \fBBPF_MAP_TYPE_STACK\fP map types
implement this command as a "pop" operation, deleting the top
element rather than one corresponding to \fIkey\fP\&.
The \fIkey\fP and \fIkey_len\fP parameters should be zeroed when
issuing this operation for these map types.
.sp
This command is only valid for the following map types:
* \fBBPF_MAP_TYPE_QUEUE\fP
* \fBBPF_MAP_TYPE_STACK\fP
* \fBBPF_MAP_TYPE_HASH\fP
* \fBBPF_MAP_TYPE_PERCPU_HASH\fP
* \fBBPF_MAP_TYPE_LRU_HASH\fP
* \fBBPF_MAP_TYPE_LRU_PERCPU_HASH\fP
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_FREEZE\fP
.INDENT 7.0
.TP
.B Description
Freeze the permissions of the specified map.
.sp
Write permissions may be frozen by passing zero \fIflags\fP\&.
Upon success, no future syscall invocations may alter the
map state of \fImap_fd\fP\&. Write operations from eBPF programs
are still possible for a frozen map.
.sp
Not supported for maps of type \fBBPF_MAP_TYPE_STRUCT_OPS\fP\&.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_BTF_GET_NEXT_ID\fP
.INDENT 7.0
.TP
.B Description
Fetch the next BPF Type Format (BTF) object currently loaded
into the kernel.
.sp
Looks for the BTF object with an id greater than \fIstart_id\fP
and updates \fInext_id\fP on success. If no other BTF objects
remain with ids higher than \fIstart_id\fP, returns \-1 and sets
\fIerrno\fP to \fBENOENT\fP\&.
.TP
.B Return
Returns zero on success. On error, or when no id remains, \-1
is returned and \fIerrno\fP is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_LOOKUP_BATCH\fP
.INDENT 7.0
.TP
.B Description
Iterate and fetch multiple elements in a map.
.sp
Two opaque values are used to manage batch operations,
\fIin_batch\fP and \fIout_batch\fP\&. Initially, \fIin_batch\fP must be set
to NULL to begin the batched operation. After each subsequent
\fBBPF_MAP_LOOKUP_BATCH\fP, the caller should pass the resultant
\fIout_batch\fP as the \fIin_batch\fP for the next operation to
continue iteration from the current point.
.sp
The \fIkeys\fP and \fIvalues\fP are output parameters which must point
to memory large enough to hold \fIcount\fP items based on the key
and value size of the map \fImap_fd\fP\&. The \fIkeys\fP buffer must be
of \fIkey_size\fP * \fIcount\fP\&. The \fIvalues\fP buffer must be of
\fIvalue_size\fP * \fIcount\fP\&.
.sp
The \fIelem_flags\fP argument may be specified as one of the
following:
.INDENT 7.0
.TP
.B \fBBPF_F_LOCK\fP
Look up the value of a spin\-locked map without
returning the lock. This must be specified if the
elements contain a spinlock.
.UNINDENT
.sp
On success, \fIcount\fP elements from the map are copied into the
user buffer, with the keys copied into \fIkeys\fP and the values
copied into the corresponding indices in \fIvalues\fP\&.
.sp
If an error is returned and \fIerrno\fP is not \fBEFAULT\fP, \fIcount\fP
is set to the number of successfully processed elements.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.sp
May set \fIerrno\fP to \fBENOSPC\fP to indicate that \fIkeys\fP or
\fIvalues\fP is too small to dump an entire bucket during
iteration of a hash\-based map type.
.UNINDENT
.TP
.B \fBBPF_MAP_LOOKUP_AND_DELETE_BATCH\fP
.INDENT 7.0
.TP
.B Description
Iterate and delete all elements in a map.
.sp
This operation has the same behavior as
\fBBPF_MAP_LOOKUP_BATCH\fP with two exceptions:
.INDENT 7.0
.IP \(bu 2
Every element that is successfully returned is also deleted
from the map. This is at least \fIcount\fP elements. Note that
\fIcount\fP is both an input and an output parameter.
.IP \(bu 2
Upon returning with \fIerrno\fP set to \fBEFAULT\fP, up to
\fIcount\fP elements may be deleted without returning the keys
and values of the deleted elements.
.UNINDENT
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_MAP_UPDATE_BATCH\fP
.INDENT 7.0
.TP
.B Description
Update multiple elements in a map by \fIkey\fP\&.
.sp
The \fIkeys\fP and \fIvalues\fP are input parameters which must point
to memory large enough to hold \fIcount\fP items based on the key
and value size of the map \fImap_fd\fP\&. The \fIkeys\fP buffer must be
of \fIkey_size\fP * \fIcount\fP\&. The \fIvalues\fP buffer must be of
\fIvalue_size\fP * \fIcount\fP\&.
.sp
Each element specified in \fIkeys\fP is sequentially updated to the
value in the corresponding index in \fIvalues\fP\&. The \fIin_batch\fP
and \fIout_batch\fP parameters are ignored and should be zeroed.
.sp
The \fIelem_flags\fP argument should be specified as one of the
following:
.INDENT 7.0
.TP
.B \fBBPF_ANY\fP
Create new elements or update a existing elements.
.TP
.B \fBBPF_NOEXIST\fP
Create new elements only if they do not exist.
.TP
.B \fBBPF_EXIST\fP
Update existing elements.
.TP
.B \fBBPF_F_LOCK\fP
Update spin_lock\-ed map elements. This must be
specified if the map value contains a spinlock.
.UNINDENT
.sp
On success, \fIcount\fP elements from the map are updated.
.sp
If an error is returned and \fIerrno\fP is not \fBEFAULT\fP, \fIcount\fP
is set to the number of successfully processed elements.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.sp
May set \fIerrno\fP to \fBEINVAL\fP, \fBEPERM\fP, \fBENOMEM\fP, or
\fBE2BIG\fP\&. \fBE2BIG\fP indicates that the number of elements in
the map reached the \fImax_entries\fP limit specified at map
creation time.
.sp
May set \fIerrno\fP to one of the following error codes under
specific circumstances:
.INDENT 7.0
.TP
.B \fBEEXIST\fP
If \fIflags\fP specifies \fBBPF_NOEXIST\fP and the element
with \fIkey\fP already exists in the map.
.TP
.B \fBENOENT\fP
If \fIflags\fP specifies \fBBPF_EXIST\fP and the element with
\fIkey\fP does not exist in the map.
.UNINDENT
.UNINDENT
.TP
.B \fBBPF_MAP_DELETE_BATCH\fP
.INDENT 7.0
.TP
.B Description
Delete multiple elements in a map by \fIkey\fP\&.
.sp
The \fIkeys\fP parameter is an input parameter which must point
to memory large enough to hold \fIcount\fP items based on the key
size of the map \fImap_fd\fP, that is, \fIkey_size\fP * \fIcount\fP\&.
.sp
Each element specified in \fIkeys\fP is sequentially deleted. The
\fIin_batch\fP, \fIout_batch\fP, and \fIvalues\fP parameters are ignored
and should be zeroed.
.sp
The \fIelem_flags\fP argument may be specified as one of the
following:
.INDENT 7.0
.TP
.B \fBBPF_F_LOCK\fP
Look up the value of a spin\-locked map without
returning the lock. This must be specified if the
elements contain a spinlock.
.UNINDENT
.sp
On success, \fIcount\fP elements from the map are updated.
.sp
If an error is returned and \fIerrno\fP is not \fBEFAULT\fP, \fIcount\fP
is set to the number of successfully processed elements. If
\fIerrno\fP is \fBEFAULT\fP, up to \fIcount\fP elements may be been
deleted.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_LINK_CREATE\fP
.INDENT 7.0
.TP
.B Description
Attach an eBPF program to a \fItarget_fd\fP at the specified
\fIattach_type\fP hook and return a file descriptor handle for
managing the link.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_LINK_UPDATE\fP
.INDENT 7.0
.TP
.B Description
Update the eBPF program in the specified \fIlink_fd\fP to
\fInew_prog_fd\fP\&.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_LINK_GET_FD_BY_ID\fP
.INDENT 7.0
.TP
.B Description
Open a file descriptor for the eBPF Link corresponding to
\fIlink_id\fP\&.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_LINK_GET_NEXT_ID\fP
.INDENT 7.0
.TP
.B Description
Fetch the next eBPF link currently loaded into the kernel.
.sp
Looks for the eBPF link with an id greater than \fIstart_id\fP
and updates \fInext_id\fP on success. If no other eBPF links
remain with ids higher than \fIstart_id\fP, returns \-1 and sets
\fIerrno\fP to \fBENOENT\fP\&.
.TP
.B Return
Returns zero on success. On error, or when no id remains, \-1
is returned and \fIerrno\fP is set appropriately.
.UNINDENT
.TP
.B \fBBPF_ENABLE_STATS\fP
.INDENT 7.0
.TP
.B Description
Enable eBPF runtime statistics gathering.
.sp
Runtime statistics gathering for the eBPF runtime is disabled
by default to minimize the corresponding performance overhead.
This command enables statistics globally.
.sp
Multiple programs may independently enable statistics.
After gathering the desired statistics, eBPF runtime statistics
may be disabled again by calling \fBclose\fP(2) for the file
descriptor returned by this function. Statistics will only be
disabled system\-wide when all outstanding file descriptors
returned by prior calls for this subcommand are closed.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_ITER_CREATE\fP
.INDENT 7.0
.TP
.B Description
Create an iterator on top of the specified \fIlink_fd\fP (as
previously created using \fBBPF_LINK_CREATE\fP) and return a
file descriptor that can be used to trigger the iteration.
.sp
If the resulting file descriptor is pinned to the filesystem
using  \fBBPF_OBJ_PIN\fP, then subsequent \fBread\fP(2) syscalls
for that path will trigger the iterator to read kernel state
using the eBPF program attached to \fIlink_fd\fP\&.
.TP
.B Return
A new file descriptor (a nonnegative integer), or \-1 if an
error occurred (in which case, \fIerrno\fP is set appropriately).
.UNINDENT
.TP
.B \fBBPF_LINK_DETACH\fP
.INDENT 7.0
.TP
.B Description
Forcefully detach the specified \fIlink_fd\fP from its
corresponding attachment point.
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.TP
.B \fBBPF_PROG_BIND_MAP\fP
.INDENT 7.0
.TP
.B Description
Bind a map to the lifetime of an eBPF program.
.sp
The map identified by \fImap_fd\fP is bound to the program
identified by \fIprog_fd\fP and only released when \fIprog_fd\fP is
released. This may be used in cases where metadata should be
associated with a program which otherwise does not contain any
references to the map (for example, embedded in the eBPF
program instructions).
.TP
.B Return
Returns zero on success. On error, \-1 is returned and \fIerrno\fP
is set appropriately.
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
