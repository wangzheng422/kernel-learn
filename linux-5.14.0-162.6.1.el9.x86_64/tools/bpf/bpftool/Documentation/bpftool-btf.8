.\" Man page generated from reStructuredText.
.
.TH BPFTOOL-BTF 8 "" "" ""
.SH NAME
bpftool-btf \- tool for inspection of BTF data
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.INDENT 0.0
.INDENT 3.5
\fBbpftool\fP [\fIOPTIONS\fP] \fBbtf\fP \fICOMMAND\fP
.sp
\fIOPTIONS\fP := { { \fB\-j\fP | \fB\-\-json\fP } [{ \fB\-p\fP | \fB\-\-pretty\fP }] | {\fB\-d\fP | \fB\-\-debug\fP } |
{ \fB\-B\fP | \fB\-\-base\-btf\fP } }
.sp
\fICOMMANDS\fP := { \fBdump\fP | \fBhelp\fP }
.UNINDENT
.UNINDENT
.SH BTF COMMANDS
.nf
\fBbpftool\fP \fBbtf\fP { \fBshow\fP | \fBlist\fP } [\fBid\fP \fIBTF_ID\fP]
\fBbpftool\fP \fBbtf dump\fP \fIBTF_SRC\fP [\fBformat\fP \fIFORMAT\fP]
\fBbpftool\fP \fBbtf help\fP

\fIBTF_SRC\fP := { \fBid\fP \fIBTF_ID\fP | \fBprog\fP \fIPROG\fP | \fBmap\fP \fIMAP\fP [{\fBkey\fP | \fBvalue\fP | \fBkv\fP | \fBall\fP}] | \fBfile\fP \fIFILE\fP }
\fIFORMAT\fP := { \fBraw\fP | \fBc\fP }
\fIMAP\fP := { \fBid\fP \fIMAP_ID\fP | \fBpinned\fP \fIFILE\fP }
\fIPROG\fP := { \fBid\fP \fIPROG_ID\fP | \fBpinned\fP \fIFILE\fP | \fBtag\fP \fIPROG_TAG\fP }
.fi
.sp
.SH DESCRIPTION
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fBbpftool btf { show | list }\fP [\fBid\fP \fIBTF_ID\fP]
Show information about loaded BTF objects. If a BTF ID is
specified, show information only about given BTF object,
otherwise list all BTF objects currently loaded on the
system.
.sp
Since Linux 5.8 bpftool is able to discover information about
processes that hold open file descriptors (FDs) against BTF
objects. On such kernels bpftool will automatically emit this
information as well.
.TP
.B \fBbpftool btf dump\fP \fIBTF_SRC\fP
Dump BTF entries from a given \fIBTF_SRC\fP\&.
.sp
When \fBid\fP is specified, BTF object with that ID will be
loaded and all its BTF types emitted.
.sp
When \fBmap\fP is provided, it\(aqs expected that map has
associated BTF object with BTF types describing key and
value. It\(aqs possible to select whether to dump only BTF
type(s) associated with key (\fBkey\fP), value (\fBvalue\fP),
both key and value (\fBkv\fP), or all BTF types present in
associated BTF object (\fBall\fP). If not specified, \fBkv\fP
is assumed.
.sp
When \fBprog\fP is provided, it\(aqs expected that program has
associated BTF object with BTF types.
.sp
When specifying \fIFILE\fP, an ELF file is expected, containing
\&.BTF section with well\-defined BTF binary format data,
typically produced by clang or pahole.
.sp
\fBformat\fP option can be used to override default (raw)
output format. Raw (\fBraw\fP) or C\-syntax (\fBc\fP) output
formats are supported.
.TP
.B \fBbpftool btf help\fP
Print short help message.
.UNINDENT
.UNINDENT
.UNINDENT
.SH OPTIONS
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
Print short help message (similar to \fBbpftool help\fP).
.TP
.B \-V\fP,\fB  \-\-version
Print version number (similar to \fBbpftool version\fP), and optional
features that were included when bpftool was compiled. Optional
features include linking against libbfd to provide the disassembler
for JIT\-ted programs (\fBbpftool prog dump jited\fP) and usage of BPF
skeletons (some features like \fBbpftool prog profile\fP or showing
pids associated to BPF objects may rely on it).
.TP
.B \-j\fP,\fB  \-\-json
Generate JSON output. For commands that cannot produce JSON, this
option has no effect.
.TP
.B \-p\fP,\fB  \-\-pretty
Generate human\-readable JSON output. Implies \fB\-j\fP\&.
.TP
.B \-d\fP,\fB  \-\-debug
Print all logs available, even debug\-level information. This includes
logs from libbpf as well as from the verifier, when attempting to
load programs.
.TP
.B \-l\fP,\fB  \-\-legacy
Use legacy libbpf mode which has more relaxed BPF program
requirements. By default, bpftool has more strict requirements
about section names, changes pinning logic and doesn\(aqt support
some of the older non\-BTF map declarations.
.sp
See \fI\%https://github.com/libbpf/libbpf/wiki/Libbpf:\-the\-road\-to\-v1.0\fP
for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-B, \-\-base\-btf \fIFILE\fP
Pass a base BTF object. Base BTF objects are typically used
with BTF objects for kernel modules. To avoid duplicating
all kernel symbols required by modules, BTF objects for
modules are "split", they are built incrementally on top of
the kernel (vmlinux) BTF object. So the base BTF reference
should usually point to the kernel BTF.
.sp
When the main BTF object to process (for example, the
module BTF to dump) is passed as a \fIFILE\fP, bpftool attempts
to autodetect the path for the base object, and passing
this option is optional. When the main BTF object is passed
through other handles, this option becomes necessary.
.UNINDENT
.UNINDENT
.UNINDENT
.SH EXAMPLES
.sp
\fB# bpftool btf dump id 1226\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[1] PTR \(aq(anon)\(aq type_id=2
[2] STRUCT \(aqdummy_tracepoint_args\(aq size=16 vlen=2
        \(aqpad\(aq type_id=3 bits_offset=0
        \(aqsock\(aq type_id=4 bits_offset=64
[3] INT \(aqlong long unsigned int\(aq size=8 bits_offset=0 nr_bits=64 encoding=(none)
[4] PTR \(aq(anon)\(aq type_id=5
[5] FWD \(aqsock\(aq fwd_kind=union
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This gives an example of default output for all supported BTF kinds.
.sp
\fB$ cat prog.c\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
struct fwd_struct;

enum my_enum {
        VAL1 = 3,
        VAL2 = 7,
};

typedef struct my_struct my_struct_t;

struct my_struct {
        const unsigned int const_int_field;
        int bitfield_field: 4;
        char arr_field[16];
        const struct fwd_struct *restrict fwd_field;
        enum my_enum enum_field;
        volatile my_struct_t *typedef_ptr_field;
};

union my_union {
        int a;
        struct my_struct b;
};

struct my_struct struct_global_var __attribute__((section("data_sec"))) = {
        .bitfield_field = 3,
        .enum_field = VAL1,
};
int global_var __attribute__((section("data_sec"))) = 7;

__attribute__((noinline))
int my_func(union my_union *arg1, int arg2)
{
        static int static_var __attribute__((section("data_sec"))) = 123;
        static_var++;
        return static_var;
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB$ bpftool btf dump file prog.o\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[1] PTR \(aq(anon)\(aq type_id=2
[2] UNION \(aqmy_union\(aq size=48 vlen=2
        \(aqa\(aq type_id=3 bits_offset=0
        \(aqb\(aq type_id=4 bits_offset=0
[3] INT \(aqint\(aq size=4 bits_offset=0 nr_bits=32 encoding=SIGNED
[4] STRUCT \(aqmy_struct\(aq size=48 vlen=6
        \(aqconst_int_field\(aq type_id=5 bits_offset=0
        \(aqbitfield_field\(aq type_id=3 bits_offset=32 bitfield_size=4
        \(aqarr_field\(aq type_id=8 bits_offset=40
        \(aqfwd_field\(aq type_id=10 bits_offset=192
        \(aqenum_field\(aq type_id=14 bits_offset=256
        \(aqtypedef_ptr_field\(aq type_id=15 bits_offset=320
[5] CONST \(aq(anon)\(aq type_id=6
[6] INT \(aqunsigned int\(aq size=4 bits_offset=0 nr_bits=32 encoding=(none)
[7] INT \(aqchar\(aq size=1 bits_offset=0 nr_bits=8 encoding=SIGNED
[8] ARRAY \(aq(anon)\(aq type_id=7 index_type_id=9 nr_elems=16
[9] INT \(aq__ARRAY_SIZE_TYPE__\(aq size=4 bits_offset=0 nr_bits=32 encoding=(none)
[10] RESTRICT \(aq(anon)\(aq type_id=11
[11] PTR \(aq(anon)\(aq type_id=12
[12] CONST \(aq(anon)\(aq type_id=13
[13] FWD \(aqfwd_struct\(aq fwd_kind=union
[14] ENUM \(aqmy_enum\(aq size=4 vlen=2
        \(aqVAL1\(aq val=3
        \(aqVAL2\(aq val=7
[15] PTR \(aq(anon)\(aq type_id=16
[16] VOLATILE \(aq(anon)\(aq type_id=17
[17] TYPEDEF \(aqmy_struct_t\(aq type_id=4
[18] FUNC_PROTO \(aq(anon)\(aq ret_type_id=3 vlen=2
        \(aqarg1\(aq type_id=1
        \(aqarg2\(aq type_id=3
[19] FUNC \(aqmy_func\(aq type_id=18
[20] VAR \(aqstruct_global_var\(aq type_id=4, linkage=global\-alloc
[21] VAR \(aqglobal_var\(aq type_id=3, linkage=global\-alloc
[22] VAR \(aqmy_func.static_var\(aq type_id=3, linkage=static
[23] DATASEC \(aqdata_sec\(aq size=0 vlen=3
        type_id=20 offset=0 size=48
        type_id=21 offset=0 size=4
        type_id=22 offset=52 size=4
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following commands print BTF types associated with specified map\(aqs key,
value, both key and value, and all BTF types, respectively. By default, both
key and value types will be printed.
.sp
\fB# bpftool btf dump map id 123 key\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[39] TYPEDEF \(aqu32\(aq type_id=37
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB# bpftool btf dump map id 123 value\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[86] PTR \(aq(anon)\(aq type_id=87
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB# bpftool btf dump map id 123 kv\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[39] TYPEDEF \(aqu32\(aq type_id=37
[86] PTR \(aq(anon)\(aq type_id=87
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB# bpftool btf dump map id 123 all\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[1] PTR \(aq(anon)\(aq type_id=0
\&.
\&.
\&.
[2866] ARRAY \(aq(anon)\(aq type_id=52 index_type_id=51 nr_elems=4
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
All the standard ways to specify map or program are supported:
.sp
\fB# bpftool btf dump map id 123\fP
.sp
\fB# bpftool btf dump map pinned /sys/fs/bpf/map_name\fP
.sp
\fB# bpftool btf dump prog id 456\fP
.sp
\fB# bpftool btf dump prog tag b88e0a09b1d9759d\fP
.sp
\fB# bpftool btf dump prog pinned /sys/fs/bpf/prog_name\fP
.nf

\fB# bpftool btf dump file /sys/kernel/btf/i2c_smbus\fP
(or)
\fB# I2C_SMBUS_ID=$(bpftool btf show \-p | jq \(aq.[] | select(.name=="i2c_smbus").id\(aq)\fP
\fB# bpftool btf dump id ${I2C_SMBUS_ID} \-B /sys/kernel/btf/vmlinux\fP
.fi
.sp
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[104848] STRUCT \(aqi2c_smbus_alert\(aq size=40 vlen=2
        \(aqalert\(aq type_id=393 bits_offset=0
        \(aqara\(aq type_id=56050 bits_offset=256
[104849] STRUCT \(aqalert_data\(aq size=12 vlen=3
        \(aqaddr\(aq type_id=16 bits_offset=0
        \(aqtype\(aq type_id=56053 bits_offset=32
        \(aqdata\(aq type_id=7 bits_offset=64
[104850] PTR \(aq(anon)\(aq type_id=104848
[104851] PTR \(aq(anon)\(aq type_id=104849
[104852] FUNC \(aqi2c_register_spd\(aq type_id=84745 linkage=static
[104853] FUNC \(aqsmbalert_driver_init\(aq type_id=1213 linkage=static
[104854] FUNC_PROTO \(aq(anon)\(aq ret_type_id=18 vlen=1
        \(aqara\(aq type_id=56050
[104855] FUNC \(aqi2c_handle_smbus_alert\(aq type_id=104854 linkage=static
[104856] FUNC \(aqsmbalert_remove\(aq type_id=104854 linkage=static
[104857] FUNC_PROTO \(aq(anon)\(aq ret_type_id=18 vlen=2
        \(aqara\(aq type_id=56050
        \(aqid\(aq type_id=56056
[104858] FUNC \(aqsmbalert_probe\(aq type_id=104857 linkage=static
[104859] FUNC \(aqsmbalert_work\(aq type_id=9695 linkage=static
[104860] FUNC \(aqsmbus_alert\(aq type_id=71367 linkage=static
[104861] FUNC \(aqsmbus_do_alert\(aq type_id=84827 linkage=static
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SEE ALSO
.INDENT 0.0
.INDENT 3.5
\fBbpf\fP(2),
\fBbpf\-helpers\fP(7),
\fBbpftool\fP(8),
\fBbpftool\-cgroup\fP(8),
\fBbpftool\-feature\fP(8),
\fBbpftool\-gen\fP(8),
\fBbpftool\-iter\fP(8),
\fBbpftool\-link\fP(8),
\fBbpftool\-map\fP(8),
\fBbpftool\-net\fP(8),
\fBbpftool\-perf\fP(8),
\fBbpftool\-prog\fP(8),
\fBbpftool\-struct_ops\fP(8)
.UNINDENT
.UNINDENT
.\" Generated by docutils manpage writer.
.
